body len = 13
header len = 3
body opener = "`"
body closer = "`"
OPCODE DATA

Flag Names: ['special', 'isRegister', 'isNonNull']

Flag Codes:
{   '000': {   'code': '0000',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f6749261840>,
               'name': 'uninitialized block',
               'symbol': '░',
               'type': 'uninitialized'},
    '001': {   'code': None,
               'default body': None,
               'execute?': True,
               'interpret body': <function Opcodes.<lambda> at 0x7f6749261bf8>,
               'name': 'instruction block',
               'symbol': None,
               'type': 'instruction'},
    '010': {   'code': 'REGn',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f6749261950>,
               'name': 'register with a null value',
               'symbol': '_',
               'type': 'register'},
    '011': {   'code': 'REG#',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f67492618c8>,
               'name': 'register',
               'symbol': '#',
               'type': 'register'},
    '100': {   'code': 'EXEn',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f6749261b70>,
               'name': 'dormant executor',
               'symbol': '◇',
               'type': 'executor'},
    '101': {   'code': 'EXEC',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f6749261ae8>,
               'name': 'executor',
               'symbol': '◈',
               'type': 'executor'},
    '110': {   'code': 'DMPn',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f6749261a60>,
               'name': 'dump register with a null value',
               'symbol': '█',
               'type': 'dump register'},
    '111': {   'code': 'DUMP',
               'default body': '1111111111111',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f67492619d8>,
               'name': 'dump register',
               'symbol': '▯',
               'type': 'dump register'}}


Instruction Codes:
[   {   'arg count': 0,
        'code': 'NOOP',
        'description': 'No operation',
        'function': <function noOp at 0x7f67492602f0>,
        'symbol': ' ',
        'type': 'noop'},
    {   'arg count': 0,
        'code': 'ARG0',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f67492602f0>,
        'symbol': '0',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG1',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f67492602f0>,
        'symbol': '1',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG2',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f67492602f0>,
        'symbol': '2',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG3',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f67492602f0>,
        'symbol': '3',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG4',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f67492602f0>,
        'symbol': '4',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG5',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f67492602f0>,
        'symbol': '5',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG6',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f67492602f0>,
        'symbol': '6',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG7',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f67492602f0>,
        'symbol': '7',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG8',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f67492602f0>,
        'symbol': '8',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG9',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f67492602f0>,
        'symbol': '9',
        'type': 'arg'},
    {   'arg count': 1,
        'code': 'JMPR',
        'description': 'Jump to the address in r0.',
        'function': <function jumpR at 0x7f6749260378>,
        'symbol': '%',
        'type': 'jump'},
    {   'arg count': 0,
        'code': 'JMPB',
        'description': 'Jump backwards to the first lock matching the '
                       'following key',
        'function': <function jumpB at 0x7f6749260400>,
        'symbol': '(',
        'type': 'jump'},
    {   'arg count': 0,
        'code': 'JMPF',
        'description': 'Jump forwards to the first lock matching the following '
                       'key',
        'function': <function jumpF at 0x7f6749260488>,
        'symbol': ')',
        'type': 'jump'},
    {   'arg count': 1,
        'code': 'ADRB',
        'description': 'Look backwards to the first lock matching the '
                       'following key, store its address in r0',
        'function': <function addressOfJumpB at 0x7f6749260510>,
        'symbol': '[',
        'type': 'lookaround'},
    {   'arg count': 1,
        'code': 'ADRF',
        'description': 'Look forwards to the first lock matching the following '
                       'key, store its address in r0',
        'function': <function addressOfJumpF at 0x7f6749260598>,
        'symbol': ']',
        'type': 'lookaround'},
    {   'arg count': 3,
        'code': 'SERB',
        'description': 'Starting from [r0], look backwards for the first '
                       'instruction matching the instruction at [r1], store '
                       'its address in r2',
        'function': <function addressOfInstructionB at 0x7f6749260620>,
        'symbol': '<',
        'type': 'lookaround'},
    {   'arg count': 3,
        'code': 'SERF',
        'description': 'Starting from [r0], look forwards for the first '
                       'instruction matching the instruction at [r1], store '
                       'its address in r2',
        'function': <function addressOfInstructionF at 0x7f67492606a8>,
        'symbol': '>',
        'type': 'lookaround'},
    {   'arg count': 1,
        'code': 'IFNZ',
        'description': 'if [r0] is not 0, execute the following instruction, '
                       'otherwise, skip to the next non-argument instruction',
        'function': <function skipIfZero at 0x7f6749260730>,
        'symbol': '?',
        'type': 'if'},
    {   'arg count': 1,
        'code': 'IFNN',
        'description': 'if [r0] is not null, execute the following '
                       'instruction, otherwise, skip to the next non-argument '
                       'instruction',
        'function': <function skipIfNull at 0x7f67492607b8>,
        'symbol': '‽',
        'type': 'if'},
    {   'arg count': 0,
        'code': 'IFDZ',
        'description': 'if the instruction at the address in r0 is the same as '
                       "the instruction at the address in r1 (or if they're "
                       'both registers, dump registers, or executors), execute '
                       'the next instruction, otherwise, skip to the next '
                       'non-argument instruction',
        'function': <function skipIfDumpIsZero at 0x7f6749260840>,
        'symbol': '¿',
        'type': 'if'},
    {   'arg count': 2,
        'code': 'IFBE',
        'description': 'if the instruction at the address in r0 is the same as '
                       "the instruction at the address in r1 (or if they're "
                       'both registers, dump registers, or executors), execute '
                       'the next instruction, otherwise, skip to the next '
                       'non-argument instruction',
        'function': <function skipUnlessEquiv at 0x7f67492608c8>,
        'symbol': '⸘',
        'type': 'if'},
    {   'arg count': 2,
        'code': 'IFEQ',
        'description': 'if [r0] == [r1], execute the next instruction, '
                       'otherwise, skip to the next non-argument instruction',
        'function': <function skipUnlessEqual at 0x7f6749260950>,
        'symbol': '=',
        'type': 'if'},
    {   'arg count': 3,
        'code': 'ADDr',
        'description': "Add registers' contents ([r0] = [r1] + [r2])",
        'function': <function add at 0x7f67492609d8>,
        'symbol': '+',
        'type': 'arithmetic'},
    {   'arg count': 3,
        'code': 'SUBr',
        'description': "Subtract registers' contents ([r0] = [r1] - [r2])",
        'function': <function subtract at 0x7f6749260a60>,
        'symbol': '-',
        'type': 'arithmetic'},
    {   'arg count': 3,
        'code': 'MULr',
        'description': "Multiply registers' contents ([r0] = [r1] * [r2])",
        'function': <function multiply at 0x7f6749260ae8>,
        'symbol': '*',
        'type': 'arithmetic'},
    {   'arg count': 3,
        'code': 'DIVr',
        'description': "Divide registers' contents ([r0] = [r1] ÷ [r2])",
        'function': <function divide at 0x7f6749260b70>,
        'symbol': '÷',
        'type': 'arithmetic'},
    {   'arg count': 1,
        'code': 'INCr',
        'description': "Increment register's contents ([r0]++)",
        'function': <function increment at 0x7f6749260e18>,
        'symbol': '^',
        'type': 'arithmetic'},
    {   'arg count': 1,
        'code': 'DECr',
        'description': "Decrement register's contents ([r0]--)",
        'function': <function decrement at 0x7f6749260ea0>,
        'symbol': 'v',
        'type': 'arithmetic'},
    {   'arg count': 1,
        'code': 'NOTr',
        'description': "Bitwise NOT register's contents ([r0] = ![r0])",
        'function': <function bitwiseInverse at 0x7f6749260f28>,
        'symbol': '!',
        'type': 'bitwise'},
    {   'arg count': 1,
        'code': 'SHFL',
        'description': "Bitwise left shift register's contents ([r0] = [r0] << "
                       '1)',
        'function': <function bitwiseShiftLeft at 0x7f6749261048>,
        'symbol': '«',
        'type': 'bitwise'},
    {   'arg count': 1,
        'code': 'SHFR',
        'description': "Bitwise right shift register's contents ([r0] = [r0] "
                       '>> 1)',
        'function': <function bitwiseShiftRight at 0x7f67492610d0>,
        'symbol': '»',
        'type': 'bitwise'},
    {   'arg count': 3,
        'code': 'ANDr',
        'description': "Bitwise AND register's contents ([r0] = [r1] & [r2])",
        'function': <function bitwiseAND at 0x7f6749260bf8>,
        'symbol': '&',
        'type': 'bitwise'},
    {   'arg count': 3,
        'code': 'ORr-',
        'description': "Bitwise OR register's contents ([r0] = [r1] | [r2])",
        'function': <function bitwiseOR at 0x7f6749260c80>,
        'symbol': '|',
        'type': 'bitwise'},
    {   'arg count': 3,
        'code': 'XORr',
        'description': "Bitwise XOR register's contents ([r0] = [r1] ^ [r2])",
        'function': <function bitwiseXOR at 0x7f6749260d08>,
        'symbol': '⊕',
        'type': 'bitwise'},
    {   'arg count': 1,
        'code': 'ZERO',
        'description': 'Set register contents to 0 ([r0] = 0)',
        'function': <function setToZero at 0x7f6749261158>,
        'symbol': 'z',
        'type': 'set'},
    {   'arg count': 1,
        'code': 'UNIT',
        'description': 'Set register contents to 1 ([r0] = 1)',
        'function': <function setToOne at 0x7f67492611e0>,
        'symbol': 'u',
        'type': 'set'},
    {   'arg count': 1,
        'code': 'RAND',
        'description': 'Sets [r0] to a random valid address.',
        'function': <function setToRand at 0x7f67492612f0>,
        'symbol': 'r',
        'type': 'set'},
    {   'arg count': 1,
        'code': 'NULL',
        'description': 'Sets [r0] to null.',
        'function': <function setToNull at 0x7f6749261268>,
        'symbol': 'n',
        'type': 'set'},
    {   'arg count': 2,
        'code': 'CPYr',
        'description': 'Copy [r0] into r1',
        'function': <function copy at 0x7f6749261400>,
        'symbol': '"',
        'type': 'clone/swap'},
    {   'arg count': 2,
        'code': 'SWPr',
        'description': 'Swap [r0] into r1 and [r1] into r0',
        'function': <function swap at 0x7f6749261488>,
        'symbol': 'x',
        'type': 'clone/swap'},
    {   'arg count': 1,
        'code': 'POPr',
        'description': 'Pop into r0 a value from the first stack found '
                       'immediately after the first matching lock found after '
                       'this executor',
        'function': <function pop at 0x7f6749261598>,
        'symbol': '↑',
        'type': 'stack'},
    {   'arg count': 1,
        'code': 'PSHr',
        'description': 'Push [r0] to the first stack found immediately after '
                       'the first matching lock found after this executor',
        'function': <function push at 0x7f6749261510>,
        'symbol': '↓',
        'type': 'stack'},
    {   'arg count': 0,
        'code': 'CLAM',
        'description': "A claim marker, used to stake an executor's territory; "
                       'the boundaries of an organism. Also functions as lock.',
        'function': <function noOp at 0x7f67492602f0>,
        'symbol': 'T',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'CLMk',
        'description': 'A claim marker key, matches to a claim marker.',
        'function': <function noOp at 0x7f67492602f0>,
        'symbol': 't',
        'type': 'key'},
    {   'arg count': 2,
        'code': 'MNTR',
        'description': 'Sets [r0] to the address most recently checked within '
                       "this executor's claim boundaries, and [r1] to the "
                       'address of the instruction that checked it. Both are '
                       'set to null if no checks have been recently made.',
        'function': <function monitor at 0x7f67492616a8>,
        'symbol': '~',
        'type': 'monitor'},
    {   'arg count': 2,
        'code': 'ADRS',
        'description': 'Swap the memory block at [r0] with the block at [r1]',
        'function': <function swapMemoryBlocks at 0x7f6749261620>,
        'symbol': '$',
        'type': 'memwrite'},
    {   'arg count': 1,
        'code': 'INIT',
        'description': 'Initializes the executor at the address contained in '
                       'r0. (Sets it to non-dormant and sets its instruction '
                       'pointer to itself.)',
        'function': <function initializeExecutor at 0x7f6749261730>,
        'symbol': ':',
        'type': 'init'},
    {   'arg count': 1,
        'code': 'DINT',
        'description': 'Denitializes the executor at the address contained in '
                       'r0. (Sets it to dormant.)',
        'function': <function denitializeExecutor at 0x7f67492617b8>,
        'symbol': '.',
        'type': 'deinit'},
    {   'arg count': 0,
        'code': 'KEYA',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f67492602f0>,
        'symbol': 'a',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYB',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f67492602f0>,
        'symbol': 'b',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYC',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f67492602f0>,
        'symbol': 'c',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYD',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f67492602f0>,
        'symbol': 'd',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYE',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f67492602f0>,
        'symbol': 'e',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYF',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f67492602f0>,
        'symbol': 'f',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYG',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f67492602f0>,
        'symbol': 'g',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYH',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f67492602f0>,
        'symbol': 'h',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYI',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f67492602f0>,
        'symbol': 'i',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYJ',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f67492602f0>,
        'symbol': 'j',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYK',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f67492602f0>,
        'symbol': 'k',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYL',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f67492602f0>,
        'symbol': 'l',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYM',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f67492602f0>,
        'symbol': 'm',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'LOKA',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f67492602f0>,
        'symbol': 'A',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKB',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f67492602f0>,
        'symbol': 'B',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKC',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f67492602f0>,
        'symbol': 'C',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKD',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f67492602f0>,
        'symbol': 'D',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKE',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f67492602f0>,
        'symbol': 'E',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKF',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f67492602f0>,
        'symbol': 'F',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKG',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f67492602f0>,
        'symbol': 'G',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKH',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f67492602f0>,
        'symbol': 'H',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKI',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f67492602f0>,
        'symbol': 'I',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKJ',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f67492602f0>,
        'symbol': 'J',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKK',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f67492602f0>,
        'symbol': 'K',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKL',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f67492602f0>,
        'symbol': 'L',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKM',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f67492602f0>,
        'symbol': 'M',
        'type': 'lock'}]


INITIAL SOUP
 >2>¿d24##Mv!2lId$EG?jgTL[Ta:h>?%75mIM5J5^aIe(#FJ↓⸘↑1| njd$#⸘cmbnv2f=J+G91÷kt$<*
T◈▯#####[t1]t3r"04B>‽2)c(tC$2=13)d^^1(bD^4:4(tTuH‽↓u.l¿*⸘i<<87xkAJT5H*MHJeA7njbe
#<E+Ix2T1+.◇=9iLH‽.6D<al4x&&ATvgcI&÷HjT◇ij⸘»*u↓+▯AjE÷«zf~‽Kul2u(⸘)Ha«vJ4↓mc"!Mu:
]◇↓k9)!])j#»◇u⸘$E:$‽vbjc%hT?▯ b|x÷«f))z◇8[jJ«Jh|Km«◇&d<v[¿dd⸘Duc)>!Dkli?9f~2F»2i
rb÷5BT1⊕Lvi‽↑(KD»rbG‽1M?lMJ‽÷÷:⊕eg>L.302jv"BjG6"FEk2fkur)+G*dab⊕J$e!K:¿~5M]↑Lh"a
÷:>7⸘?&4(t6-geLuC]v2fJFk"÷H↓2A=~&Ll(◇(#8ThI>J?e^cz%M-r:%«%jgBE5c~K⸘↑k-AgFi¿2G546
)⊕Cku-k!LFB%jg0↓m*5⸘cG^÷lt¿⸘÷gHt!L6t e3v1.B¿rz▯%-(Jc7r‽cg>0⸘«ea⸘÷tEM%kn‽M8v$!‽J~
8^-↓÷1>GJm««7"g4Mfm⊕&*D+JMk‽2Mgx¿⸘«LjD‽8.$G[5nzn◇jE▯^?Ig)KrA<D[0bk4h.)D]lK‽x◇+t◇
#hGviG¿▯GHbmj~&>>adm&]b =◇>6:A88(0.I?(!↓FkfmGb»f?&<kD8zH‽⊕j*«ugTHa]Fh:÷F¿xAiI#l]
&]g⊕eG6&⸘⸘t-⊕7B|l(&d&B? Ci>J*÷!mT&1K&M1▯◇v↓↓D+.0.-Te:^tC↑t>>.iJ$5[.$A<%D>↓↓ u↓>r
45vf#▯G◇6E⊕▯jBzc$«:Fk8!7+◇9+^zna⸘tf↑BvL⸘cnELB^DHD  4nDc.BIhG|8<:◇&=◇¿hn(*a⸘[t5«↑
K▯▯=bvH)<D"6]:hKf?AGF)◇iL»2TML!!2r)43▯»^[8⊕hBn!b91.c)z?(=+.2CBH⸘uk1?M~c÷Fee$?8.|
maT▯a]hu|F«7-an↑#HrI ▯u↓%MM<xj.»m1$]J▯b5

BODIES:
8	#`0`
9	#`0`
46	#`0`
59	#`0`
81	◈`81`
82	▯`8191`
83	#`0`
84	#`0`
85	#`0`
86	#`0`
87	#`0`
160	#`0`
171	◇`None`
199	◇`None`
208	▯`8191`
241	◇`None`
250	#`0`
252	◇`None`
268	▯`8191`
279	◇`None`
291	◇`None`
436	◇`None`
438	#`0`
526	▯`8191`
608	◇`None`
611	▯`8191`
636	◇`None`
639	◇`None`
640	#`0`
647	▯`8191`
665	◇`None`
717	#`0`
759	▯`8191`
760	◇`None`
804	#`0`
805	▯`8191`
807	◇`None`
811	▯`8191`
825	◇`None`
864	◇`None`
867	◇`None`
881	▯`8191`
882	▯`8191`
902	◇`None`
917	▯`8191`
963	▯`8191`
976	#`0`
981	▯`8191`
997	▯`8191`

	
cycle 1
82	▯`8190`	BODY
81	◈`82`	BODY

	
cycle 2
82	▯`8189`	BODY
81	◈`83`	BODY

	
cycle 3
82	▯`8188`	BODY
83	#`0`	BODY
82	▯`8188`	BODY
81	◈`84`	BODY

	
cycle 4
82	▯`8187`	BODY
84	#`0`	BODY
82	▯`8187`	BODY
81	◈`85`	BODY

	
cycle 5
82	▯`8186`	BODY
85	#`0`	BODY
82	▯`8186`	BODY
81	◈`86`	BODY

	
cycle 6
82	▯`8185`	BODY
86	#`0`	BODY
82	▯`8185`	BODY
81	◈`87`	BODY

	
cycle 7
82	▯`8184`	BODY
87	#`0`	BODY
82	▯`8184`	BODY
81	◈`88`	BODY

	
cycle 8
82	▯`8103`	BODY
84	#`80`	BODY
82	▯`8103`	BODY
81	◈`89`	BODY

	
cycle 9
82	▯`8102`	BODY
81	◈`90`	BODY

	
cycle 10
82	▯`8101`	BODY
81	◈`91`	BODY

	
cycle 11
82	▯`7974`	BODY
86	#`126`	BODY
82	▯`7974`	BODY
81	◈`92`	BODY

	
cycle 12
82	▯`7973`	BODY
81	◈`93`	BODY

	
cycle 13
82	▯`7972`	BODY
81	◈`94`	BODY

	
cycle 14
82	▯`7518`	BODY
83	#`453`	BODY
82	▯`7518`	BODY
81	◈`95`	BODY

	
cycle 15
82	▯`7064`	BODY
87	#`453`	BODY
82	▯`7064`	BODY
81	◈`96`	BODY

	
cycle 16
82	▯`7063`	BODY
81	◈`97`	BODY

	
cycle 17
82	▯`7062`	BODY
81	◈`98`	BODY

	
cycle 18
82	▯`7061`	BODY
81	◈`99`	BODY

	
cycle 19
82	▯`6357`	BODY
85	#`703`	BODY
82	▯`6357`	BODY
81	◈`100`	BODY

	
cycle 20
82	▯`6356`	BODY
81	◈`101`	BODY

	
cycle 21
82	▯`6355`	BODY
81	◈`102`	BODY

	
cycle 22
82	▯`6351`	BODY
81	◈`106`	BODY

	
cycle 23
82	▯`6350`	BODY
81	◈`107`	BODY

	
cycle 24
82	▯`6349`	BODY
81	◈`108`	BODY
453	T	BLOCK
703	r	BLOCK

	
cycle 25
82	▯`6348`	BODY
81	◈`109`	BODY

	
cycle 26
82	▯`6344`	BODY
81	◈`113`	BODY

	
cycle 27
82	▯`6343`	BODY
81	◈`114`	BODY

	
cycle 28
82	▯`6341`	BODY
83	#`454`	BODY
82	▯`6341`	BODY
81	◈`115`	BODY

	
cycle 29
82	▯`6339`	BODY
84	#`81`	BODY
82	▯`6339`	BODY
81	◈`116`	BODY

	
cycle 30
82	▯`6338`	BODY
81	◈`117`	BODY

	
cycle 31
82	▯`6357`	BODY
81	◈`98`	BODY

	
cycle 32
82	▯`6356`	BODY
81	◈`99`	BODY

	
cycle 33
82	▯`6450`	BODY
85	#`608`	BODY
82	▯`6450`	BODY
81	◈`100`	BODY

	
cycle 34
82	▯`6449`	BODY
81	◈`101`	BODY

	
cycle 35
82	▯`6448`	BODY
81	◈`102`	BODY

	
cycle 36
82	▯`6444`	BODY
81	◈`106`	BODY

	
cycle 37
82	▯`6443`	BODY
81	◈`107`	BODY

	
cycle 38
82	▯`6442`	BODY
81	◈`108`	BODY
454	◇`None`	BLOCK
608	:	BLOCK

	
cycle 39
82	▯`6441`	BODY
81	◈`109`	BODY

	
cycle 40
82	▯`6437`	BODY
81	◈`113`	BODY

	
cycle 41
82	▯`6436`	BODY
81	◈`114`	BODY

	
cycle 42
82	▯`6434`	BODY
83	#`455`	BODY
82	▯`6434`	BODY
81	◈`115`	BODY

	
cycle 43
82	▯`6432`	BODY
84	#`82`	BODY
82	▯`6432`	BODY
81	◈`116`	BODY

	
cycle 44
82	▯`6431`	BODY
81	◈`117`	BODY

	
cycle 45
82	▯`6450`	BODY
81	◈`98`	BODY

	
cycle 46
82	▯`6449`	BODY
81	◈`99`	BODY

	
cycle 47
82	▯`6530`	BODY
85	#`526`	BODY
82	▯`6530`	BODY
81	◈`100`	BODY

	
cycle 48
82	▯`6529`	BODY
81	◈`101`	BODY

	
cycle 49
82	▯`6528`	BODY
81	◈`102`	BODY

	
cycle 50
82	▯`6524`	BODY
81	◈`106`	BODY

	
cycle 51
82	▯`6523`	BODY
81	◈`107`	BODY

	
cycle 52
82	▯`6522`	BODY
81	◈`108`	BODY
455	▯`8191`	BLOCK
526	%	BLOCK

	
cycle 53
82	▯`6521`	BODY
81	◈`109`	BODY

	
cycle 54
82	▯`6517`	BODY
81	◈`113`	BODY

	
cycle 55
82	▯`6516`	BODY
81	◈`114`	BODY

	
cycle 56
82	▯`6514`	BODY
83	#`456`	BODY
82	▯`6514`	BODY
81	◈`115`	BODY

	
cycle 57
82	▯`6512`	BODY
84	#`83`	BODY
82	▯`6512`	BODY
81	◈`116`	BODY

	
cycle 58
82	▯`6511`	BODY
81	◈`117`	BODY

	
cycle 59
82	▯`6530`	BODY
81	◈`98`	BODY

	
cycle 60
82	▯`6529`	BODY
81	◈`99`	BODY

	
cycle 61
82	▯`6414`	BODY
85	#`640`	BODY
82	▯`6414`	BODY
81	◈`100`	BODY

	
cycle 62
82	▯`6413`	BODY
81	◈`101`	BODY

	
cycle 63
82	▯`6412`	BODY
81	◈`102`	BODY

	
cycle 64
82	▯`6408`	BODY
81	◈`106`	BODY

	
cycle 65
82	▯`6407`	BODY
81	◈`107`	BODY

	
cycle 66
82	▯`6406`	BODY
81	◈`108`	BODY
456	#`0`	BLOCK
640	«	BLOCK

	
cycle 67
82	▯`6405`	BODY
81	◈`109`	BODY

	
cycle 68
82	▯`6401`	BODY
81	◈`113`	BODY

	
cycle 69
82	▯`6400`	BODY
81	◈`114`	BODY

	
cycle 70
82	▯`6398`	BODY
83	#`457`	BODY
82	▯`6398`	BODY
81	◈`115`	BODY

	
cycle 71
82	▯`6396`	BODY
84	#`84`	BODY
82	▯`6396`	BODY
81	◈`116`	BODY

	
cycle 72
82	▯`6395`	BODY
81	◈`117`	BODY

	
cycle 73
82	▯`6414`	BODY
81	◈`98`	BODY

	
cycle 74
82	▯`6413`	BODY
81	◈`99`	BODY

	
cycle 75
82	▯`6335`	BODY
85	#`717`	BODY
82	▯`6335`	BODY
81	◈`100`	BODY

	
cycle 76
82	▯`6334`	BODY
81	◈`101`	BODY

	
cycle 77
82	▯`6333`	BODY
81	◈`102`	BODY

	
cycle 78
82	▯`6329`	BODY
81	◈`106`	BODY

	
cycle 79
82	▯`6328`	BODY
81	◈`107`	BODY

	
cycle 80
82	▯`6327`	BODY
81	◈`108`	BODY
457	#`0`	BLOCK
717	%	BLOCK

	
cycle 81
82	▯`6326`	BODY
81	◈`109`	BODY

	
cycle 82
82	▯`6322`	BODY
81	◈`113`	BODY

	
cycle 83
82	▯`6321`	BODY
81	◈`114`	BODY

	
cycle 84
82	▯`6319`	BODY
83	#`458`	BODY
82	▯`6319`	BODY
81	◈`115`	BODY

	
cycle 85
82	▯`6317`	BODY
84	#`85`	BODY
82	▯`6317`	BODY
81	◈`116`	BODY

	
cycle 86
82	▯`6316`	BODY
81	◈`117`	BODY

	
cycle 87
82	▯`6335`	BODY
81	◈`98`	BODY

	
cycle 88
82	▯`6334`	BODY
81	◈`99`	BODY

	
cycle 89
82	▯`6246`	BODY
85	#`804`	BODY
82	▯`6246`	BODY
81	◈`100`	BODY

	
cycle 90
82	▯`6245`	BODY
81	◈`101`	BODY

	
cycle 91
82	▯`6244`	BODY
81	◈`102`	BODY

	
cycle 92
82	▯`6240`	BODY
81	◈`106`	BODY

	
cycle 93
82	▯`6239`	BODY
81	◈`107`	BODY

	
cycle 94
82	▯`6238`	BODY
81	◈`108`	BODY
458	#`0`	BLOCK
804	j	BLOCK

	
cycle 95
82	▯`6237`	BODY
81	◈`109`	BODY

	
cycle 96
82	▯`6233`	BODY
81	◈`113`	BODY

	
cycle 97
82	▯`6232`	BODY
81	◈`114`	BODY

	
cycle 98
82	▯`6230`	BODY
83	#`459`	BODY
82	▯`6230`	BODY
81	◈`115`	BODY

	
cycle 99
82	▯`6228`	BODY
84	#`86`	BODY
82	▯`6228`	BODY
81	◈`116`	BODY

	
cycle 100
82	▯`6227`	BODY
81	◈`117`	BODY

	
cycle 101
82	▯`6246`	BODY
81	◈`98`	BODY

	
cycle 102
82	▯`6245`	BODY
81	◈`99`	BODY

	
cycle 103
82	▯`6072`	BODY
85	#`976`	BODY
82	▯`6072`	BODY
81	◈`100`	BODY

	
cycle 104
82	▯`6071`	BODY
81	◈`101`	BODY

	
cycle 105
82	▯`6070`	BODY
81	◈`102`	BODY

	
cycle 106
82	▯`6066`	BODY
81	◈`106`	BODY

	
cycle 107
82	▯`6065`	BODY
81	◈`107`	BODY

	
cycle 108
82	▯`6064`	BODY
81	◈`108`	BODY
459	#`0`	BLOCK
976	g	BLOCK

	
cycle 109
82	▯`6063`	BODY
81	◈`109`	BODY

	
cycle 110
82	▯`6059`	BODY
81	◈`113`	BODY

	
cycle 111
82	▯`6058`	BODY
81	◈`114`	BODY

	
cycle 112
82	▯`6056`	BODY
83	#`460`	BODY
82	▯`6056`	BODY
81	◈`115`	BODY

	
cycle 113
82	▯`6054`	BODY
84	#`87`	BODY
82	▯`6054`	BODY
81	◈`116`	BODY

	
cycle 114
82	▯`6053`	BODY
81	◈`117`	BODY

	
cycle 115
82	▯`6072`	BODY
81	◈`98`	BODY

	
cycle 116
82	▯`6071`	BODY
81	◈`99`	BODY

	
cycle 117
82	▯`7046`	BODY
82	▯`7046`	BODY
81	◈`100`	BODY
85	_`None`	BLOCK

	
cycle 118
82	▯`7043`	BODY
81	◈`103`	BODY

	
cycle 119
82	▯`7042`	BODY
81	◈`104`	BODY

	
cycle 120
82	▯`7066`	BODY
81	◈`80`	BODY

	
cycle 121
82	▯`7065`	BODY
81	◈`81`	BODY

	
cycle 122
82	▯`7064`	BODY
81	◈`82`	BODY

	
cycle 123
82	▯`7063`	BODY
81	◈`83`	BODY

	
cycle 124
82	▯`7522`	BODY
83	#`0`	BODY
82	▯`7522`	BODY
81	◈`84`	BODY

	
cycle 125
82	▯`7608`	BODY
84	#`0`	BODY
82	▯`7608`	BODY
81	◈`85`	BODY

	
cycle 126
82	▯`7607`	BODY
82	▯`7607`	BODY
81	◈`86`	BODY
85	#`0`	BLOCK

	
cycle 127
82	▯`7732`	BODY
86	#`0`	BODY
82	▯`7732`	BODY
81	◈`87`	BODY

	
cycle 128
82	▯`8184`	BODY
87	#`0`	BODY
82	▯`8184`	BODY
81	◈`88`	BODY

	
cycle 129
82	▯`8103`	BODY
84	#`80`	BODY
82	▯`8103`	BODY
81	◈`89`	BODY

	
cycle 130
82	▯`8102`	BODY
81	◈`90`	BODY

	
cycle 131
82	▯`8101`	BODY
81	◈`91`	BODY

	
cycle 132
82	▯`7974`	BODY
86	#`126`	BODY
82	▯`7974`	BODY
81	◈`92`	BODY

	
cycle 133
82	▯`7973`	BODY
81	◈`93`	BODY

	
cycle 134
82	▯`7972`	BODY
81	◈`94`	BODY

	
cycle 135
82	▯`7675`	BODY
83	#`296`	BODY
82	▯`7675`	BODY
81	◈`95`	BODY

	
cycle 136
82	▯`7378`	BODY
87	#`296`	BODY
82	▯`7378`	BODY
81	◈`96`	BODY

	
cycle 137
82	▯`7377`	BODY
81	◈`97`	BODY

	
cycle 138
82	▯`7376`	BODY
81	◈`98`	BODY

	
cycle 139
82	▯`7375`	BODY
81	◈`99`	BODY

	
cycle 140
82	▯`7049`	BODY
85	#`325`	BODY
82	▯`7049`	BODY
81	◈`100`	BODY

	
cycle 141
82	▯`7048`	BODY
81	◈`101`	BODY

	
cycle 142
82	▯`7047`	BODY
81	◈`102`	BODY

	
cycle 143
82	▯`7043`	BODY
81	◈`106`	BODY

	
cycle 144
82	▯`7042`	BODY
81	◈`107`	BODY

	
cycle 145
82	▯`7041`	BODY
81	◈`108`	BODY
296	T	BLOCK
325	[	BLOCK

	
cycle 146
82	▯`7040`	BODY
81	◈`109`	BODY

	
cycle 147
82	▯`7036`	BODY
81	◈`113`	BODY

	
cycle 148
82	▯`7035`	BODY
81	◈`114`	BODY

	
cycle 149
82	▯`7033`	BODY
83	#`297`	BODY
82	▯`7033`	BODY
81	◈`115`	BODY

	
cycle 150
82	▯`7031`	BODY
84	#`81`	BODY
82	▯`7031`	BODY
81	◈`116`	BODY

	
cycle 151
82	▯`7030`	BODY
81	◈`117`	BODY

	
cycle 152
82	▯`7049`	BODY
81	◈`98`	BODY

	
cycle 153
82	▯`7048`	BODY
81	◈`99`	BODY

	
cycle 154
82	▯`6936`	BODY
85	#`436`	BODY
82	▯`6936`	BODY
81	◈`100`	BODY

	
cycle 155
82	▯`6935`	BODY
81	◈`101`	BODY

	
cycle 156
82	▯`6934`	BODY
81	◈`102`	BODY

	
cycle 157
82	▯`6930`	BODY
81	◈`106`	BODY

	
cycle 158
82	▯`6929`	BODY
81	◈`107`	BODY

	
cycle 159
82	▯`6928`	BODY
81	◈`108`	BODY
297	◇`None`	BLOCK
436	¿	BLOCK

	
cycle 160
82	▯`6927`	BODY
81	◈`109`	BODY

	
cycle 161
82	▯`6923`	BODY
81	◈`113`	BODY

	
cycle 162
82	▯`6922`	BODY
81	◈`114`	BODY

	
cycle 163
82	▯`6920`	BODY
83	#`298`	BODY
82	▯`6920`	BODY
81	◈`115`	BODY

	
cycle 164
82	▯`6918`	BODY
84	#`82`	BODY
82	▯`6918`	BODY
81	◈`116`	BODY

	
cycle 165
82	▯`6917`	BODY
81	◈`117`	BODY

	
cycle 166
82	▯`6936`	BODY
81	◈`98`	BODY

	
cycle 167
82	▯`6935`	BODY
81	◈`99`	BODY

	
cycle 168
82	▯`6915`	BODY
85	#`455`	BODY
82	▯`6915`	BODY
81	◈`100`	BODY

	
cycle 169
82	▯`6914`	BODY
81	◈`101`	BODY

	
cycle 170
82	▯`6913`	BODY
81	◈`102`	BODY

	
cycle 171
82	▯`6909`	BODY
81	◈`106`	BODY

	
cycle 172
82	▯`6908`	BODY
81	◈`107`	BODY

	
cycle 173
82	▯`6907`	BODY
81	◈`108`	BODY
298	▯`8191`	BLOCK
455	d	BLOCK

	
cycle 174
82	▯`6906`	BODY
81	◈`109`	BODY

	
cycle 175
82	▯`6902`	BODY
81	◈`113`	BODY

	
cycle 176
82	▯`6901`	BODY
81	◈`114`	BODY

	
cycle 177
82	▯`6899`	BODY
83	#`299`	BODY
82	▯`6899`	BODY
81	◈`115`	BODY

	
cycle 178
82	▯`6897`	BODY
84	#`83`	BODY
82	▯`6897`	BODY
81	◈`116`	BODY

	
cycle 179
82	▯`6896`	BODY
81	◈`117`	BODY

	
cycle 180
82	▯`6915`	BODY
81	◈`98`	BODY

	
cycle 181
82	▯`6914`	BODY
81	◈`99`	BODY

	
cycle 182
82	▯`6930`	BODY
85	#`438`	BODY
82	▯`6930`	BODY
81	◈`100`	BODY

	
cycle 183
82	▯`6929`	BODY
81	◈`101`	BODY

	
cycle 184
82	▯`6928`	BODY
81	◈`102`	BODY

	
cycle 185
82	▯`6924`	BODY
81	◈`106`	BODY

	
cycle 186
82	▯`6923`	BODY
81	◈`107`	BODY

	
cycle 187
82	▯`6922`	BODY
81	◈`108`	BODY
299	#`0`	BLOCK
438	d	BLOCK

	
cycle 188
82	▯`6921`	BODY
81	◈`109`	BODY

	
cycle 189
82	▯`6917`	BODY
81	◈`113`	BODY

	
cycle 190
82	▯`6916`	BODY
81	◈`114`	BODY

	
cycle 191
82	▯`6914`	BODY
83	#`300`	BODY
82	▯`6914`	BODY
81	◈`115`	BODY

	
cycle 192
82	▯`6912`	BODY
84	#`84`	BODY
82	▯`6912`	BODY
81	◈`116`	BODY

	
cycle 193
82	▯`6911`	BODY
81	◈`117`	BODY

	
cycle 194
82	▯`6930`	BODY
81	◈`98`	BODY

	
cycle 195
82	▯`6929`	BODY
81	◈`99`	BODY

	
cycle 196
82	▯`6910`	BODY
85	#`456`	BODY
82	▯`6910`	BODY
81	◈`100`	BODY

	
cycle 197
82	▯`6909`	BODY
81	◈`101`	BODY

	
cycle 198
82	▯`6908`	BODY
81	◈`102`	BODY

	
cycle 199
82	▯`6904`	BODY
81	◈`106`	BODY

	
cycle 200
82	▯`6903`	BODY
81	◈`107`	BODY

	
cycle 201
82	▯`6902`	BODY
81	◈`108`	BODY
300	#`0`	BLOCK
456	⸘	BLOCK

	
cycle 202
82	▯`6901`	BODY
81	◈`109`	BODY

	
cycle 203
82	▯`6897`	BODY
81	◈`113`	BODY

	
cycle 204
82	▯`6896`	BODY
81	◈`114`	BODY

	
cycle 205
82	▯`6894`	BODY
83	#`301`	BODY
82	▯`6894`	BODY
81	◈`115`	BODY

	
cycle 206
82	▯`6892`	BODY
84	#`85`	BODY
82	▯`6892`	BODY
81	◈`116`	BODY

	
cycle 207
82	▯`6891`	BODY
81	◈`117`	BODY

	
cycle 208
82	▯`6910`	BODY
81	◈`98`	BODY

	
cycle 209
82	▯`6909`	BODY
81	◈`99`	BODY

	
cycle 210
82	▯`6907`	BODY
85	#`457`	BODY
82	▯`6907`	BODY
81	◈`100`	BODY

	
cycle 211
82	▯`6906`	BODY
81	◈`101`	BODY

	
cycle 212
82	▯`6905`	BODY
81	◈`102`	BODY

	
cycle 213
82	▯`6901`	BODY
81	◈`106`	BODY

	
cycle 214
82	▯`6900`	BODY
81	◈`107`	BODY

	
cycle 215
82	▯`6899`	BODY
81	◈`108`	BODY
301	#`0`	BLOCK
457	D	BLOCK

	
cycle 216
82	▯`6898`	BODY
81	◈`109`	BODY

	
cycle 217
82	▯`6894`	BODY
81	◈`113`	BODY

	
cycle 218
82	▯`6893`	BODY
81	◈`114`	BODY

	
cycle 219
82	▯`6891`	BODY
83	#`302`	BODY
82	▯`6891`	BODY
81	◈`115`	BODY

	
cycle 220
82	▯`6889`	BODY
84	#`86`	BODY
82	▯`6889`	BODY
81	◈`116`	BODY

	
cycle 221
82	▯`6888`	BODY
81	◈`117`	BODY

	
cycle 222
82	▯`6907`	BODY
81	◈`98`	BODY

	
cycle 223
82	▯`6906`	BODY
81	◈`99`	BODY

	
cycle 224
82	▯`6904`	BODY
85	#`458`	BODY
82	▯`6904`	BODY
81	◈`100`	BODY

	
cycle 225
82	▯`6903`	BODY
81	◈`101`	BODY

	
cycle 226
82	▯`6902`	BODY
81	◈`102`	BODY

	
cycle 227
82	▯`6898`	BODY
81	◈`106`	BODY

	
cycle 228
82	▯`6897`	BODY
81	◈`107`	BODY

	
cycle 229
82	▯`6896`	BODY
81	◈`108`	BODY
302	#`0`	BLOCK
458	u	BLOCK

	
cycle 230
82	▯`6895`	BODY
81	◈`109`	BODY

	
cycle 231
82	▯`6891`	BODY
81	◈`113`	BODY

	
cycle 232
82	▯`6890`	BODY
81	◈`114`	BODY

	
cycle 233
82	▯`6888`	BODY
83	#`303`	BODY
82	▯`6888`	BODY
81	◈`115`	BODY

	
cycle 234
82	▯`6886`	BODY
84	#`87`	BODY
82	▯`6886`	BODY
81	◈`116`	BODY

	
cycle 235
82	▯`6885`	BODY
81	◈`117`	BODY

	
cycle 236
82	▯`6904`	BODY
81	◈`98`	BODY

	
cycle 237
82	▯`6903`	BODY
81	◈`99`	BODY

	
cycle 238
82	▯`6901`	BODY
85	#`459`	BODY
82	▯`6901`	BODY
81	◈`100`	BODY

	
cycle 239
82	▯`6900`	BODY
81	◈`101`	BODY

	
cycle 240
82	▯`6899`	BODY
81	◈`102`	BODY

	
cycle 241
82	▯`6895`	BODY
81	◈`106`	BODY

	
cycle 242
82	▯`6894`	BODY
81	◈`107`	BODY

	
cycle 243
82	▯`6893`	BODY
81	◈`108`	BODY
303	#`0`	BLOCK
459	c	BLOCK

	
cycle 244
82	▯`6892`	BODY
81	◈`109`	BODY

	
cycle 245
82	▯`6888`	BODY
81	◈`113`	BODY

	
cycle 246
82	▯`6887`	BODY
81	◈`114`	BODY

	
cycle 247
82	▯`6885`	BODY
83	#`304`	BODY
82	▯`6885`	BODY
81	◈`115`	BODY

	
cycle 248
82	▯`6883`	BODY
84	#`88`	BODY
82	▯`6883`	BODY
81	◈`116`	BODY

	
cycle 249
82	▯`6882`	BODY
81	◈`117`	BODY

	
cycle 250
82	▯`6901`	BODY
81	◈`98`	BODY

	
cycle 251
82	▯`6900`	BODY
81	◈`99`	BODY

	
cycle 252
82	▯`7033`	BODY
85	#`325`	BODY
82	▯`7033`	BODY
81	◈`100`	BODY

	
cycle 253
82	▯`7032`	BODY
81	◈`101`	BODY

	
cycle 254
82	▯`7031`	BODY
81	◈`102`	BODY
