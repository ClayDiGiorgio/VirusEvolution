body len = 13
header len = 3
body opener = "`"
body closer = "`"
OPCODE DATA

Flag Names: ['special', 'isRegister', 'isNonNull']

Flag Codes:
{   '000': {   'code': '0000',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f0b566b2840>,
               'name': 'uninitialized block',
               'symbol': '░',
               'type': 'uninitialized'},
    '001': {   'code': None,
               'default body': None,
               'execute?': True,
               'interpret body': <function Opcodes.<lambda> at 0x7f0b566b2bf8>,
               'name': 'instruction block',
               'symbol': None,
               'type': 'instruction'},
    '010': {   'code': 'REGn',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f0b566b2950>,
               'name': 'register with a null value',
               'symbol': '_',
               'type': 'register'},
    '011': {   'code': 'REG#',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f0b566b28c8>,
               'name': 'register',
               'symbol': '#',
               'type': 'register'},
    '100': {   'code': 'EXEn',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f0b566b2b70>,
               'name': 'dormant executor',
               'symbol': '◇',
               'type': 'executor'},
    '101': {   'code': 'EXEC',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f0b566b2ae8>,
               'name': 'executor',
               'symbol': '◈',
               'type': 'executor'},
    '110': {   'code': 'DMPn',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f0b566b2a60>,
               'name': 'dump register with a null value',
               'symbol': '█',
               'type': 'dump register'},
    '111': {   'code': 'DUMP',
               'default body': '1111111111111',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f0b566b29d8>,
               'name': 'dump register',
               'symbol': '▯',
               'type': 'dump register'}}


Instruction Codes:
[   {   'arg count': 0,
        'code': 'NOOP',
        'description': 'No operation',
        'function': <function noOp at 0x7f0b566b12f0>,
        'symbol': ' ',
        'type': 'noop'},
    {   'arg count': 0,
        'code': 'ARG0',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f0b566b12f0>,
        'symbol': '0',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG1',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f0b566b12f0>,
        'symbol': '1',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG2',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f0b566b12f0>,
        'symbol': '2',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG3',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f0b566b12f0>,
        'symbol': '3',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG4',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f0b566b12f0>,
        'symbol': '4',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG5',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f0b566b12f0>,
        'symbol': '5',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG6',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f0b566b12f0>,
        'symbol': '6',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG7',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f0b566b12f0>,
        'symbol': '7',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG8',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f0b566b12f0>,
        'symbol': '8',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG9',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f0b566b12f0>,
        'symbol': '9',
        'type': 'arg'},
    {   'arg count': 1,
        'code': 'JMPR',
        'description': 'Jump to the address in r0.',
        'function': <function jumpR at 0x7f0b566b1378>,
        'symbol': '%',
        'type': 'jump'},
    {   'arg count': 0,
        'code': 'JMPB',
        'description': 'Jump backwards to the first lock matching the '
                       'following key',
        'function': <function jumpB at 0x7f0b566b1400>,
        'symbol': '(',
        'type': 'jump'},
    {   'arg count': 0,
        'code': 'JMPF',
        'description': 'Jump forwards to the first lock matching the following '
                       'key',
        'function': <function jumpF at 0x7f0b566b1488>,
        'symbol': ')',
        'type': 'jump'},
    {   'arg count': 1,
        'code': 'ADRB',
        'description': 'Look backwards to the first lock matching the '
                       'following key, store its address in r0',
        'function': <function addressOfJumpB at 0x7f0b566b1510>,
        'symbol': '[',
        'type': 'lookaround'},
    {   'arg count': 1,
        'code': 'ADRF',
        'description': 'Look forwards to the first lock matching the following '
                       'key, store its address in r0',
        'function': <function addressOfJumpF at 0x7f0b566b1598>,
        'symbol': ']',
        'type': 'lookaround'},
    {   'arg count': 3,
        'code': 'SERB',
        'description': 'Starting from [r0], look backwards for the first '
                       'instruction matching the instruction at [r1], store '
                       'its address in r2',
        'function': <function addressOfInstructionB at 0x7f0b566b1620>,
        'symbol': '<',
        'type': 'lookaround'},
    {   'arg count': 3,
        'code': 'SERF',
        'description': 'Starting from [r0], look forwards for the first '
                       'instruction matching the instruction at [r1], store '
                       'its address in r2',
        'function': <function addressOfInstructionF at 0x7f0b566b16a8>,
        'symbol': '>',
        'type': 'lookaround'},
    {   'arg count': 1,
        'code': 'IFNZ',
        'description': 'if [r0] is not 0, execute the following instruction, '
                       'otherwise, skip to the next non-argument instruction',
        'function': <function skipIfZero at 0x7f0b566b1730>,
        'symbol': '?',
        'type': 'if'},
    {   'arg count': 1,
        'code': 'IFNN',
        'description': 'if [r0] is not null, execute the following '
                       'instruction, otherwise, skip to the next non-argument '
                       'instruction',
        'function': <function skipIfNull at 0x7f0b566b17b8>,
        'symbol': '‽',
        'type': 'if'},
    {   'arg count': 0,
        'code': 'IFDZ',
        'description': 'if the instruction at the address in r0 is the same as '
                       "the instruction at the address in r1 (or if they're "
                       'both registers, dump registers, or executors), execute '
                       'the next instruction, otherwise, skip to the next '
                       'non-argument instruction',
        'function': <function skipIfDumpIsZero at 0x7f0b566b1840>,
        'symbol': '¿',
        'type': 'if'},
    {   'arg count': 2,
        'code': 'IFBE',
        'description': 'if the instruction at the address in r0 is the same as '
                       "the instruction at the address in r1 (or if they're "
                       'both registers, dump registers, or executors), execute '
                       'the next instruction, otherwise, skip to the next '
                       'non-argument instruction',
        'function': <function skipUnlessEquiv at 0x7f0b566b18c8>,
        'symbol': '⸘',
        'type': 'if'},
    {   'arg count': 2,
        'code': 'IFEQ',
        'description': 'if [r0] == [r1], execute the next instruction, '
                       'otherwise, skip to the next non-argument instruction',
        'function': <function skipUnlessEqual at 0x7f0b566b1950>,
        'symbol': '=',
        'type': 'if'},
    {   'arg count': 3,
        'code': 'ADDr',
        'description': "Add registers' contents ([r0] = [r1] + [r2])",
        'function': <function add at 0x7f0b566b19d8>,
        'symbol': '+',
        'type': 'arithmetic'},
    {   'arg count': 3,
        'code': 'SUBr',
        'description': "Subtract registers' contents ([r0] = [r1] - [r2])",
        'function': <function subtract at 0x7f0b566b1a60>,
        'symbol': '-',
        'type': 'arithmetic'},
    {   'arg count': 3,
        'code': 'MULr',
        'description': "Multiply registers' contents ([r0] = [r1] * [r2])",
        'function': <function multiply at 0x7f0b566b1ae8>,
        'symbol': '*',
        'type': 'arithmetic'},
    {   'arg count': 3,
        'code': 'DIVr',
        'description': "Divide registers' contents ([r0] = [r1] ÷ [r2])",
        'function': <function divide at 0x7f0b566b1b70>,
        'symbol': '÷',
        'type': 'arithmetic'},
    {   'arg count': 1,
        'code': 'INCr',
        'description': "Increment register's contents ([r0]++)",
        'function': <function increment at 0x7f0b566b1e18>,
        'symbol': '^',
        'type': 'arithmetic'},
    {   'arg count': 1,
        'code': 'DECr',
        'description': "Decrement register's contents ([r0]--)",
        'function': <function decrement at 0x7f0b566b1ea0>,
        'symbol': 'v',
        'type': 'arithmetic'},
    {   'arg count': 1,
        'code': 'NOTr',
        'description': "Bitwise NOT register's contents ([r0] = ![r0])",
        'function': <function bitwiseInverse at 0x7f0b566b1f28>,
        'symbol': '!',
        'type': 'bitwise'},
    {   'arg count': 1,
        'code': 'SHFL',
        'description': "Bitwise left shift register's contents ([r0] = [r0] << "
                       '1)',
        'function': <function bitwiseShiftLeft at 0x7f0b566b2048>,
        'symbol': '«',
        'type': 'bitwise'},
    {   'arg count': 1,
        'code': 'SHFR',
        'description': "Bitwise right shift register's contents ([r0] = [r0] "
                       '>> 1)',
        'function': <function bitwiseShiftRight at 0x7f0b566b20d0>,
        'symbol': '»',
        'type': 'bitwise'},
    {   'arg count': 3,
        'code': 'ANDr',
        'description': "Bitwise AND register's contents ([r0] = [r1] & [r2])",
        'function': <function bitwiseAND at 0x7f0b566b1bf8>,
        'symbol': '&',
        'type': 'bitwise'},
    {   'arg count': 3,
        'code': 'ORr-',
        'description': "Bitwise OR register's contents ([r0] = [r1] | [r2])",
        'function': <function bitwiseOR at 0x7f0b566b1c80>,
        'symbol': '|',
        'type': 'bitwise'},
    {   'arg count': 3,
        'code': 'XORr',
        'description': "Bitwise XOR register's contents ([r0] = [r1] ^ [r2])",
        'function': <function bitwiseXOR at 0x7f0b566b1d08>,
        'symbol': '⊕',
        'type': 'bitwise'},
    {   'arg count': 1,
        'code': 'ZERO',
        'description': 'Set register contents to 0 ([r0] = 0)',
        'function': <function setToZero at 0x7f0b566b2158>,
        'symbol': 'z',
        'type': 'set'},
    {   'arg count': 1,
        'code': 'UNIT',
        'description': 'Set register contents to 1 ([r0] = 1)',
        'function': <function setToOne at 0x7f0b566b21e0>,
        'symbol': 'u',
        'type': 'set'},
    {   'arg count': 1,
        'code': 'RAND',
        'description': 'Sets [r0] to a random valid address.',
        'function': <function setToRand at 0x7f0b566b22f0>,
        'symbol': 'r',
        'type': 'set'},
    {   'arg count': 1,
        'code': 'NULL',
        'description': 'Sets [r0] to null.',
        'function': <function setToNull at 0x7f0b566b2268>,
        'symbol': 'n',
        'type': 'set'},
    {   'arg count': 2,
        'code': 'CPYr',
        'description': 'Copy [r0] into r1',
        'function': <function copy at 0x7f0b566b2400>,
        'symbol': '"',
        'type': 'clone/swap'},
    {   'arg count': 2,
        'code': 'SWPr',
        'description': 'Swap [r0] into r1 and [r1] into r0',
        'function': <function swap at 0x7f0b566b2488>,
        'symbol': 'x',
        'type': 'clone/swap'},
    {   'arg count': 1,
        'code': 'POPr',
        'description': 'Pop into r0 a value from the first stack found '
                       'immediately after the first matching lock found after '
                       'this executor',
        'function': <function pop at 0x7f0b566b2598>,
        'symbol': '↑',
        'type': 'stack'},
    {   'arg count': 1,
        'code': 'PSHr',
        'description': 'Push [r0] to the first stack found immediately after '
                       'the first matching lock found after this executor',
        'function': <function push at 0x7f0b566b2510>,
        'symbol': '↓',
        'type': 'stack'},
    {   'arg count': 0,
        'code': 'CLAM',
        'description': "A claim marker, used to stake an executor's territory; "
                       'the boundaries of an organism. Also functions as lock.',
        'function': <function noOp at 0x7f0b566b12f0>,
        'symbol': 'T',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'CLMk',
        'description': 'A claim marker key, matches to a claim marker.',
        'function': <function noOp at 0x7f0b566b12f0>,
        'symbol': 't',
        'type': 'key'},
    {   'arg count': 2,
        'code': 'MNTR',
        'description': 'Sets [r0] to the address most recently checked within '
                       "this executor's claim boundaries, and [r1] to the "
                       'address of the instruction that checked it. Both are '
                       'set to null if no checks have been recently made.',
        'function': <function monitor at 0x7f0b566b26a8>,
        'symbol': '~',
        'type': 'monitor'},
    {   'arg count': 2,
        'code': 'ADRS',
        'description': 'Swap the memory block at [r0] with the block at [r1]',
        'function': <function swapMemoryBlocks at 0x7f0b566b2620>,
        'symbol': '$',
        'type': 'memwrite'},
    {   'arg count': 1,
        'code': 'INIT',
        'description': 'Initializes the executor at the address contained in '
                       'r0. (Sets it to non-dormant and sets its instruction '
                       'pointer to itself.)',
        'function': <function initializeExecutor at 0x7f0b566b2730>,
        'symbol': ':',
        'type': 'init'},
    {   'arg count': 1,
        'code': 'DINT',
        'description': 'Denitializes the executor at the address contained in '
                       'r0. (Sets it to dormant.)',
        'function': <function denitializeExecutor at 0x7f0b566b27b8>,
        'symbol': '.',
        'type': 'deinit'},
    {   'arg count': 0,
        'code': 'KEYA',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f0b566b12f0>,
        'symbol': 'a',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYB',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f0b566b12f0>,
        'symbol': 'b',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYC',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f0b566b12f0>,
        'symbol': 'c',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYD',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f0b566b12f0>,
        'symbol': 'd',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYE',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f0b566b12f0>,
        'symbol': 'e',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYF',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f0b566b12f0>,
        'symbol': 'f',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYG',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f0b566b12f0>,
        'symbol': 'g',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYH',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f0b566b12f0>,
        'symbol': 'h',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYI',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f0b566b12f0>,
        'symbol': 'i',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYJ',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f0b566b12f0>,
        'symbol': 'j',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYK',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f0b566b12f0>,
        'symbol': 'k',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYL',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f0b566b12f0>,
        'symbol': 'l',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYM',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f0b566b12f0>,
        'symbol': 'm',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'LOKA',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f0b566b12f0>,
        'symbol': 'A',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKB',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f0b566b12f0>,
        'symbol': 'B',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKC',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f0b566b12f0>,
        'symbol': 'C',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKD',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f0b566b12f0>,
        'symbol': 'D',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKE',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f0b566b12f0>,
        'symbol': 'E',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKF',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f0b566b12f0>,
        'symbol': 'F',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKG',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f0b566b12f0>,
        'symbol': 'G',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKH',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f0b566b12f0>,
        'symbol': 'H',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKI',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f0b566b12f0>,
        'symbol': 'I',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKJ',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f0b566b12f0>,
        'symbol': 'J',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKK',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f0b566b12f0>,
        'symbol': 'K',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKL',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f0b566b12f0>,
        'symbol': 'L',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKM',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f0b566b12f0>,
        'symbol': 'M',
        'type': 'lock'}]


INITIAL SOUP
"-&0>%‽C↑↑e$9!*8xEj$fu 5z]gxtu(5H50-«r ¿◇B#5HrKAz<*]^>dhfv*bz»FC44)BmDf">b!⊕3▯mj
:743f18$xbz#cJ$n(JA ¿md17gL◇ecie⊕e~DT◈▯#####[t1]t3r"04B>‽2)c(tC$2=13)d^^1(bD^4:4
(tT#3x:31»ftv.$f#dHb‽&#m~↓÷70znK⊕|+»l~BI«A-m▯÷$JG3A▯&v#|u=]▯b[c5j1↑.Kvv)a⸘◇$*53~
n i¿▯‽ &!!u⊕=<↑<.tuzt◇▯0G¿56ujBEEi(|.586F▯~=J3hn*j⊕m~2)Dd:.4»=> bn?n8]im↑ ◇H%8d.
[C=»nKb↓⊕ g.KI7K0I5a?⊕!H2.▯bC&▯÷ejj#37«rF45706&^*CEnlLg0l]Gt|eCB÷7dx]Cr(⸘vj!|E"J
↑<↑↓&=jg!◇1÷9%bCfxuj"&)BtB1 %x~ 21d-r» (2L^M[↓J=Ex+<uvah>.uT7tE↑$A↑*AtrM:T>j▯5zr
x:a=h↓)DD)h⊕&jbl?eK%4&:▯ 6dh(«?.%vjg1avT)KE0Hz⊕nnmJxbxE2>hF1FzE~~xJ⸘«=rvkj7tGf4l
⸘8AfuH9v3((JeDr-):DJBMv?%5AI▯bC2tIC"¿⊕gB4z9794a:)%gzM⸘ld-⸘.H3^÷nr8?v-&ftT($+eL?I
j»km=97E&[cbu?[0<62lzv↓khv6..>~eC.IiI⊕%#e!+5¿n*»B^ |t uMEcA%v&>M=4de*BBM↓Fj#▯l|K
4"*7ru⸘aj0#8DA7gAx! 4◇T=t↑%em"~Hct%¿I‽!AE?.¿xi+dt‽g»Hff▯«)«D⸘CMz÷nBGLABv.K+b89¿a
 m<+.C 1JL)fBBHJ*n6u*~h¿x7(k«)vu|↑eA0=7x0jL~kgDh↑lI↑^a]M4%fj4%tK*F↑F⸘|$÷AM&t lzm
-6v«<B%[▯b"xG&⸘z‽|i◇cG)fi9n‽k⸘$>⸘G▯xgl^l<↑hE&(M2$c4:[i9Dd↓‽⊕2]c]3"a5n»)D↑TH¿T=*r
6>)EJn?c2^%C5<&=‽7%hF!>÷=6k-h⊕aif÷l"l25H

BODIES:
40	◇`None`
42	#`0`
77	▯`8191`
91	#`0`
107	◇`None`
117	◈`117`
118	▯`8191`
119	#`0`
120	#`0`
121	#`0`
122	#`0`
123	#`0`
163	#`0`
176	#`0`
182	#`0`
204	▯`8191`
211	▯`8191`
214	#`0`
219	▯`8191`
234	◇`None`
244	▯`8191`
261	◇`None`
262	▯`8191`
281	▯`8191`
314	◇`None`
346	▯`8191`
350	▯`8191`
355	#`0`
409	◇`None`
476	▯`8191`
503	▯`8191`
588	▯`8191`
679	#`0`
715	#`0`
716	▯`8191`
730	#`0`
741	◇`None`
775	▯`8191`
888	▯`8191`
899	◇`None`
914	▯`8191`

	
cycle 1
118	▯`8190`	BODY
117	◈`118`	BODY

	
cycle 2
118	▯`8189`	BODY
117	◈`119`	BODY

	
cycle 3
118	▯`8188`	BODY
119	#`0`	BODY
118	▯`8188`	BODY
117	◈`120`	BODY

	
cycle 4
118	▯`8187`	BODY
120	#`0`	BODY
118	▯`8187`	BODY
117	◈`121`	BODY

	
cycle 5
118	▯`8186`	BODY
121	#`0`	BODY
118	▯`8186`	BODY
117	◈`122`	BODY

	
cycle 6
118	▯`8185`	BODY
122	#`0`	BODY
118	▯`8185`	BODY
117	◈`123`	BODY

	
cycle 7
118	▯`8184`	BODY
123	#`0`	BODY
118	▯`8184`	BODY
117	◈`124`	BODY

	
cycle 8
118	▯`8067`	BODY
120	#`116`	BODY
118	▯`8067`	BODY
117	◈`125`	BODY

	
cycle 9
118	▯`8066`	BODY
117	◈`126`	BODY

	
cycle 10
118	▯`8065`	BODY
117	◈`127`	BODY

	
cycle 11
118	▯`7902`	BODY
122	#`162`	BODY
118	▯`7902`	BODY
117	◈`128`	BODY

	
cycle 12
118	▯`7901`	BODY
117	◈`129`	BODY

	
cycle 13
118	▯`7900`	BODY
117	◈`130`	BODY

	
cycle 14
118	▯`7723`	BODY
119	#`176`	BODY
118	▯`7723`	BODY
117	◈`131`	BODY

	
cycle 15
118	▯`7546`	BODY
123	#`176`	BODY
118	▯`7546`	BODY
117	◈`132`	BODY

	
cycle 16
118	▯`7545`	BODY
117	◈`133`	BODY

	
cycle 17
118	▯`7544`	BODY
117	◈`134`	BODY

	
cycle 18
118	▯`7543`	BODY
117	◈`135`	BODY

	
cycle 19
118	▯`7083`	BODY
121	#`459`	BODY
118	▯`7083`	BODY
117	◈`136`	BODY

	
cycle 20
118	▯`7082`	BODY
117	◈`137`	BODY

	
cycle 21
118	▯`7081`	BODY
117	◈`138`	BODY

	
cycle 22
118	▯`7077`	BODY
117	◈`142`	BODY

	
cycle 23
118	▯`7076`	BODY
117	◈`143`	BODY

	
cycle 24
118	▯`7075`	BODY
117	◈`144`	BODY
176	T	BLOCK
459	#`0`	BLOCK

	
cycle 25
118	▯`7074`	BODY
117	◈`145`	BODY

	
cycle 26
118	▯`7070`	BODY
117	◈`149`	BODY

	
cycle 27
118	▯`7069`	BODY
117	◈`150`	BODY

	
cycle 28
118	▯`7067`	BODY
119	#`177`	BODY
118	▯`7067`	BODY
117	◈`151`	BODY

	
cycle 29
118	▯`7065`	BODY
120	#`117`	BODY
118	▯`7065`	BODY
117	◈`152`	BODY

	
cycle 30
118	▯`7064`	BODY
117	◈`153`	BODY

	
cycle 31
118	▯`7083`	BODY
117	◈`134`	BODY

	
cycle 32
118	▯`7082`	BODY
117	◈`135`	BODY

	
cycle 33
118	▯`7306`	BODY
121	#`234`	BODY
118	▯`7306`	BODY
117	◈`136`	BODY

	
cycle 34
118	▯`7305`	BODY
117	◈`137`	BODY

	
cycle 35
118	▯`7304`	BODY
117	◈`138`	BODY

	
cycle 36
118	▯`7300`	BODY
117	◈`142`	BODY

	
cycle 37
118	▯`7299`	BODY
117	◈`143`	BODY

	
cycle 38
118	▯`7298`	BODY
117	◈`144`	BODY
177	◇`None`	BLOCK
234	d	BLOCK

	
cycle 39
118	▯`7297`	BODY
117	◈`145`	BODY

	
cycle 40
118	▯`7293`	BODY
117	◈`149`	BODY

	
cycle 41
118	▯`7292`	BODY
117	◈`150`	BODY

	
cycle 42
118	▯`7290`	BODY
119	#`178`	BODY
118	▯`7290`	BODY
117	◈`151`	BODY

	
cycle 43
118	▯`7288`	BODY
120	#`118`	BODY
118	▯`7288`	BODY
117	◈`152`	BODY

	
cycle 44
118	▯`7287`	BODY
117	◈`153`	BODY

	
cycle 45
118	▯`7306`	BODY
117	◈`134`	BODY

	
cycle 46
118	▯`7305`	BODY
117	◈`135`	BODY

	
cycle 47
118	▯`7334`	BODY
121	#`204`	BODY
118	▯`7334`	BODY
117	◈`136`	BODY

	
cycle 48
118	▯`7333`	BODY
117	◈`137`	BODY

	
cycle 49
118	▯`7332`	BODY
117	◈`138`	BODY

	
cycle 50
118	▯`7328`	BODY
117	◈`142`	BODY

	
cycle 51
118	▯`7327`	BODY
117	◈`143`	BODY

	
cycle 52
118	▯`7326`	BODY
117	◈`144`	BODY
178	▯`8191`	BLOCK
204	H	BLOCK

	
cycle 53
118	▯`7325`	BODY
117	◈`145`	BODY

	
cycle 54
118	▯`7321`	BODY
117	◈`149`	BODY

	
cycle 55
118	▯`7320`	BODY
117	◈`150`	BODY

	
cycle 56
118	▯`7318`	BODY
119	#`179`	BODY
118	▯`7318`	BODY
117	◈`151`	BODY

	
cycle 57
118	▯`7316`	BODY
120	#`119`	BODY
118	▯`7316`	BODY
117	◈`152`	BODY

	
cycle 58
118	▯`7315`	BODY
117	◈`153`	BODY

	
cycle 59
118	▯`7334`	BODY
117	◈`134`	BODY

	
cycle 60
118	▯`7333`	BODY
117	◈`135`	BODY

	
cycle 61
118	▯`7354`	BODY
121	#`182`	BODY
118	▯`7354`	BODY
117	◈`136`	BODY

	
cycle 62
118	▯`7353`	BODY
117	◈`137`	BODY

	
cycle 63
118	▯`7352`	BODY
117	◈`138`	BODY

	
cycle 64
118	▯`7348`	BODY
117	◈`142`	BODY

	
cycle 65
118	▯`7347`	BODY
117	◈`143`	BODY

	
cycle 66
118	▯`7346`	BODY
117	◈`144`	BODY
179	#`0`	BLOCK
182	b	BLOCK

	
cycle 67
118	▯`7345`	BODY
117	◈`145`	BODY

	
cycle 68
118	▯`7341`	BODY
117	◈`149`	BODY

	
cycle 69
118	▯`7340`	BODY
117	◈`150`	BODY

	
cycle 70
118	▯`7338`	BODY
119	#`180`	BODY
118	▯`7338`	BODY
117	◈`151`	BODY

	
cycle 71
118	▯`7336`	BODY
120	#`120`	BODY
118	▯`7336`	BODY
117	◈`152`	BODY

	
cycle 72
118	▯`7335`	BODY
117	◈`153`	BODY

	
cycle 73
118	▯`7354`	BODY
117	◈`134`	BODY

	
cycle 74
118	▯`7353`	BODY
117	◈`135`	BODY

	
cycle 75
118	▯`7320`	BODY
121	#`214`	BODY
118	▯`7320`	BODY
117	◈`136`	BODY

	
cycle 76
118	▯`7319`	BODY
117	◈`137`	BODY

	
cycle 77
118	▯`7318`	BODY
117	◈`138`	BODY

	
cycle 78
118	▯`7314`	BODY
117	◈`142`	BODY

	
cycle 79
118	▯`7313`	BODY
117	◈`143`	BODY

	
cycle 80
118	▯`7312`	BODY
117	◈`144`	BODY
180	#`0`	BLOCK
214	‽	BLOCK

	
cycle 81
118	▯`7311`	BODY
117	◈`145`	BODY

	
cycle 82
118	▯`7307`	BODY
117	◈`149`	BODY

	
cycle 83
118	▯`7306`	BODY
117	◈`150`	BODY

	
cycle 84
118	▯`7304`	BODY
119	#`181`	BODY
118	▯`7304`	BODY
117	◈`151`	BODY

	
cycle 85
118	▯`7302`	BODY
120	#`121`	BODY
118	▯`7302`	BODY
117	◈`152`	BODY

	
cycle 86
118	▯`7301`	BODY
117	◈`153`	BODY

	
cycle 87
118	▯`7320`	BODY
117	◈`134`	BODY

	
cycle 88
118	▯`7319`	BODY
117	◈`135`	BODY

	
cycle 89
118	▯`7177`	BODY
121	#`355`	BODY
118	▯`7177`	BODY
117	◈`136`	BODY

	
cycle 90
118	▯`7176`	BODY
117	◈`137`	BODY

	
cycle 91
118	▯`7175`	BODY
117	◈`138`	BODY

	
cycle 92
118	▯`7171`	BODY
117	◈`142`	BODY

	
cycle 93
118	▯`7170`	BODY
117	◈`143`	BODY

	
cycle 94
118	▯`7169`	BODY
117	◈`144`	BODY
181	#`0`	BLOCK
355	&	BLOCK

	
cycle 95
118	▯`7168`	BODY
117	◈`145`	BODY

	
cycle 96
118	▯`7164`	BODY
117	◈`149`	BODY

	
cycle 97
118	▯`7163`	BODY
117	◈`150`	BODY

	
cycle 98
118	▯`7161`	BODY
119	#`182`	BODY
118	▯`7161`	BODY
117	◈`151`	BODY

	
cycle 99
118	▯`7159`	BODY
120	#`122`	BODY
118	▯`7159`	BODY
117	◈`152`	BODY

	
cycle 100
118	▯`7158`	BODY
117	◈`153`	BODY

	
cycle 101
118	▯`7177`	BODY
117	◈`134`	BODY

	
cycle 102
118	▯`7176`	BODY
117	◈`135`	BODY

	
cycle 103
118	▯`7071`	BODY
121	#`459`	BODY
118	▯`7071`	BODY
117	◈`136`	BODY

	
cycle 104
118	▯`7070`	BODY
117	◈`137`	BODY
