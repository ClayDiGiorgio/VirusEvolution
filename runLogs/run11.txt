body len = 13
header len = 3
body opener = "`"
body closer = "`"
OPCODE DATA

Flag Names: ['special', 'isRegister', 'isNonNull']

Flag Codes:
{   '000': {   'code': '0000',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f7d60ce9840>,
               'name': 'uninitialized block',
               'symbol': '░',
               'type': 'uninitialized'},
    '001': {   'code': None,
               'default body': None,
               'execute?': True,
               'interpret body': <function Opcodes.<lambda> at 0x7f7d60ce9bf8>,
               'name': 'instruction block',
               'symbol': None,
               'type': 'instruction'},
    '010': {   'code': 'REGn',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f7d60ce9950>,
               'name': 'register with a null value',
               'symbol': '_',
               'type': 'register'},
    '011': {   'code': 'REG#',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f7d60ce98c8>,
               'name': 'register',
               'symbol': '#',
               'type': 'register'},
    '100': {   'code': 'EXEn',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f7d60ce9b70>,
               'name': 'dormant executor',
               'symbol': '◇',
               'type': 'executor'},
    '101': {   'code': 'EXEC',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f7d60ce9ae8>,
               'name': 'executor',
               'symbol': '◈',
               'type': 'executor'},
    '110': {   'code': 'DMPn',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f7d60ce9a60>,
               'name': 'dump register with a null value',
               'symbol': '█',
               'type': 'dump register'},
    '111': {   'code': 'DUMP',
               'default body': '1111111111111',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f7d60ce99d8>,
               'name': 'dump register',
               'symbol': '▯',
               'type': 'dump register'}}


Instruction Codes:
[   {   'arg count': 0,
        'code': 'NOOP',
        'description': 'No operation',
        'function': <function noOp at 0x7f7d60ce82f0>,
        'symbol': ' ',
        'type': 'noop'},
    {   'arg count': 0,
        'code': 'ARG0',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f7d60ce82f0>,
        'symbol': '0',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG1',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f7d60ce82f0>,
        'symbol': '1',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG2',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f7d60ce82f0>,
        'symbol': '2',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG3',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f7d60ce82f0>,
        'symbol': '3',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG4',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f7d60ce82f0>,
        'symbol': '4',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG5',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f7d60ce82f0>,
        'symbol': '5',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG6',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f7d60ce82f0>,
        'symbol': '6',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG7',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f7d60ce82f0>,
        'symbol': '7',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG8',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f7d60ce82f0>,
        'symbol': '8',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG9',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f7d60ce82f0>,
        'symbol': '9',
        'type': 'arg'},
    {   'arg count': 1,
        'code': 'JMPR',
        'description': 'Jump to the address in r0.',
        'function': <function jumpR at 0x7f7d60ce8378>,
        'symbol': '%',
        'type': 'jump'},
    {   'arg count': 0,
        'code': 'JMPB',
        'description': 'Jump backwards to the first lock matching the '
                       'following key',
        'function': <function jumpB at 0x7f7d60ce8400>,
        'symbol': '(',
        'type': 'jump'},
    {   'arg count': 0,
        'code': 'JMPF',
        'description': 'Jump forwards to the first lock matching the following '
                       'key',
        'function': <function jumpF at 0x7f7d60ce8488>,
        'symbol': ')',
        'type': 'jump'},
    {   'arg count': 1,
        'code': 'ADRB',
        'description': 'Look backwards to the first lock matching the '
                       'following key, store its address in r0',
        'function': <function addressOfJumpB at 0x7f7d60ce8510>,
        'symbol': '[',
        'type': 'lookaround'},
    {   'arg count': 1,
        'code': 'ADRF',
        'description': 'Look forwards to the first lock matching the following '
                       'key, store its address in r0',
        'function': <function addressOfJumpF at 0x7f7d60ce8598>,
        'symbol': ']',
        'type': 'lookaround'},
    {   'arg count': 3,
        'code': 'SERB',
        'description': 'Starting from [r0], look backwards for the first '
                       'instruction matching the instruction at [r1], store '
                       'its address in r2',
        'function': <function addressOfInstructionB at 0x7f7d60ce8620>,
        'symbol': '<',
        'type': 'lookaround'},
    {   'arg count': 3,
        'code': 'SERF',
        'description': 'Starting from [r0], look forwards for the first '
                       'instruction matching the instruction at [r1], store '
                       'its address in r2',
        'function': <function addressOfInstructionF at 0x7f7d60ce86a8>,
        'symbol': '>',
        'type': 'lookaround'},
    {   'arg count': 1,
        'code': 'IFNZ',
        'description': 'if [r0] is not 0, execute the following instruction, '
                       'otherwise, skip to the next non-argument instruction',
        'function': <function skipIfZero at 0x7f7d60ce8730>,
        'symbol': '?',
        'type': 'if'},
    {   'arg count': 1,
        'code': 'IFNN',
        'description': 'if [r0] is not null, execute the following '
                       'instruction, otherwise, skip to the next non-argument '
                       'instruction',
        'function': <function skipIfNull at 0x7f7d60ce87b8>,
        'symbol': '‽',
        'type': 'if'},
    {   'arg count': 0,
        'code': 'IFDZ',
        'description': 'if the instruction at the address in r0 is the same as '
                       "the instruction at the address in r1 (or if they're "
                       'both registers, dump registers, or executors), execute '
                       'the next instruction, otherwise, skip to the next '
                       'non-argument instruction',
        'function': <function skipIfDumpIsZero at 0x7f7d60ce8840>,
        'symbol': '¿',
        'type': 'if'},
    {   'arg count': 2,
        'code': 'IFBE',
        'description': 'if the instruction at the address in r0 is the same as '
                       "the instruction at the address in r1 (or if they're "
                       'both registers, dump registers, or executors), execute '
                       'the next instruction, otherwise, skip to the next '
                       'non-argument instruction',
        'function': <function skipUnlessEquiv at 0x7f7d60ce88c8>,
        'symbol': '⸘',
        'type': 'if'},
    {   'arg count': 2,
        'code': 'IFEQ',
        'description': 'if [r0] == [r1], execute the next instruction, '
                       'otherwise, skip to the next non-argument instruction',
        'function': <function skipUnlessEqual at 0x7f7d60ce8950>,
        'symbol': '=',
        'type': 'if'},
    {   'arg count': 3,
        'code': 'ADDr',
        'description': "Add registers' contents ([r0] = [r1] + [r2])",
        'function': <function add at 0x7f7d60ce89d8>,
        'symbol': '+',
        'type': 'arithmetic'},
    {   'arg count': 3,
        'code': 'SUBr',
        'description': "Subtract registers' contents ([r0] = [r1] - [r2])",
        'function': <function subtract at 0x7f7d60ce8a60>,
        'symbol': '-',
        'type': 'arithmetic'},
    {   'arg count': 3,
        'code': 'MULr',
        'description': "Multiply registers' contents ([r0] = [r1] * [r2])",
        'function': <function multiply at 0x7f7d60ce8ae8>,
        'symbol': '*',
        'type': 'arithmetic'},
    {   'arg count': 3,
        'code': 'DIVr',
        'description': "Divide registers' contents ([r0] = [r1] ÷ [r2])",
        'function': <function divide at 0x7f7d60ce8b70>,
        'symbol': '÷',
        'type': 'arithmetic'},
    {   'arg count': 1,
        'code': 'INCr',
        'description': "Increment register's contents ([r0]++)",
        'function': <function increment at 0x7f7d60ce8e18>,
        'symbol': '^',
        'type': 'arithmetic'},
    {   'arg count': 1,
        'code': 'DECr',
        'description': "Decrement register's contents ([r0]--)",
        'function': <function decrement at 0x7f7d60ce8ea0>,
        'symbol': 'v',
        'type': 'arithmetic'},
    {   'arg count': 1,
        'code': 'NOTr',
        'description': "Bitwise NOT register's contents ([r0] = ![r0])",
        'function': <function bitwiseInverse at 0x7f7d60ce8f28>,
        'symbol': '!',
        'type': 'bitwise'},
    {   'arg count': 1,
        'code': 'SHFL',
        'description': "Bitwise left shift register's contents ([r0] = [r0] << "
                       '1)',
        'function': <function bitwiseShiftLeft at 0x7f7d60ce9048>,
        'symbol': '«',
        'type': 'bitwise'},
    {   'arg count': 1,
        'code': 'SHFR',
        'description': "Bitwise right shift register's contents ([r0] = [r0] "
                       '>> 1)',
        'function': <function bitwiseShiftRight at 0x7f7d60ce90d0>,
        'symbol': '»',
        'type': 'bitwise'},
    {   'arg count': 3,
        'code': 'ANDr',
        'description': "Bitwise AND register's contents ([r0] = [r1] & [r2])",
        'function': <function bitwiseAND at 0x7f7d60ce8bf8>,
        'symbol': '&',
        'type': 'bitwise'},
    {   'arg count': 3,
        'code': 'ORr-',
        'description': "Bitwise OR register's contents ([r0] = [r1] | [r2])",
        'function': <function bitwiseOR at 0x7f7d60ce8c80>,
        'symbol': '|',
        'type': 'bitwise'},
    {   'arg count': 3,
        'code': 'XORr',
        'description': "Bitwise XOR register's contents ([r0] = [r1] ^ [r2])",
        'function': <function bitwiseXOR at 0x7f7d60ce8d08>,
        'symbol': '⊕',
        'type': 'bitwise'},
    {   'arg count': 1,
        'code': 'ZERO',
        'description': 'Set register contents to 0 ([r0] = 0)',
        'function': <function setToZero at 0x7f7d60ce9158>,
        'symbol': 'z',
        'type': 'set'},
    {   'arg count': 1,
        'code': 'UNIT',
        'description': 'Set register contents to 1 ([r0] = 1)',
        'function': <function setToOne at 0x7f7d60ce91e0>,
        'symbol': 'u',
        'type': 'set'},
    {   'arg count': 1,
        'code': 'RAND',
        'description': 'Sets [r0] to a random valid address.',
        'function': <function setToRand at 0x7f7d60ce92f0>,
        'symbol': 'r',
        'type': 'set'},
    {   'arg count': 1,
        'code': 'NULL',
        'description': 'Sets [r0] to null.',
        'function': <function setToNull at 0x7f7d60ce9268>,
        'symbol': 'n',
        'type': 'set'},
    {   'arg count': 2,
        'code': 'CPYr',
        'description': 'Copy [r0] into r1',
        'function': <function copy at 0x7f7d60ce9400>,
        'symbol': '"',
        'type': 'clone/swap'},
    {   'arg count': 2,
        'code': 'SWPr',
        'description': 'Swap [r0] into r1 and [r1] into r0',
        'function': <function swap at 0x7f7d60ce9488>,
        'symbol': 'x',
        'type': 'clone/swap'},
    {   'arg count': 1,
        'code': 'POPr',
        'description': 'Pop into r0 a value from the first stack found '
                       'immediately after the first matching lock found after '
                       'this executor',
        'function': <function pop at 0x7f7d60ce9598>,
        'symbol': '↑',
        'type': 'stack'},
    {   'arg count': 1,
        'code': 'PSHr',
        'description': 'Push [r0] to the first stack found immediately after '
                       'the first matching lock found after this executor',
        'function': <function push at 0x7f7d60ce9510>,
        'symbol': '↓',
        'type': 'stack'},
    {   'arg count': 0,
        'code': 'CLAM',
        'description': "A claim marker, used to stake an executor's territory; "
                       'the boundaries of an organism. Also functions as lock.',
        'function': <function noOp at 0x7f7d60ce82f0>,
        'symbol': 'T',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'CLMk',
        'description': 'A claim marker key, matches to a claim marker.',
        'function': <function noOp at 0x7f7d60ce82f0>,
        'symbol': 't',
        'type': 'key'},
    {   'arg count': 2,
        'code': 'MNTR',
        'description': 'Sets [r0] to the address most recently checked within '
                       "this executor's claim boundaries, and [r1] to the "
                       'address of the instruction that checked it. Both are '
                       'set to null if no checks have been recently made.',
        'function': <function monitor at 0x7f7d60ce96a8>,
        'symbol': '~',
        'type': 'monitor'},
    {   'arg count': 2,
        'code': 'ADRS',
        'description': 'Swap the memory block at [r0] with the block at [r1]',
        'function': <function swapMemoryBlocks at 0x7f7d60ce9620>,
        'symbol': '$',
        'type': 'memwrite'},
    {   'arg count': 1,
        'code': 'INIT',
        'description': 'Initializes the executor at the address contained in '
                       'r0. (Sets it to non-dormant and sets its instruction '
                       'pointer to itself.)',
        'function': <function initializeExecutor at 0x7f7d60ce9730>,
        'symbol': ':',
        'type': 'init'},
    {   'arg count': 1,
        'code': 'DINT',
        'description': 'Denitializes the executor at the address contained in '
                       'r0. (Sets it to dormant.)',
        'function': <function denitializeExecutor at 0x7f7d60ce97b8>,
        'symbol': '.',
        'type': 'deinit'},
    {   'arg count': 0,
        'code': 'KEYA',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f7d60ce82f0>,
        'symbol': 'a',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYB',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f7d60ce82f0>,
        'symbol': 'b',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYC',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f7d60ce82f0>,
        'symbol': 'c',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYD',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f7d60ce82f0>,
        'symbol': 'd',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYE',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f7d60ce82f0>,
        'symbol': 'e',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYF',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f7d60ce82f0>,
        'symbol': 'f',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYG',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f7d60ce82f0>,
        'symbol': 'g',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYH',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f7d60ce82f0>,
        'symbol': 'h',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYI',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f7d60ce82f0>,
        'symbol': 'i',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYJ',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f7d60ce82f0>,
        'symbol': 'j',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYK',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f7d60ce82f0>,
        'symbol': 'k',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYL',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f7d60ce82f0>,
        'symbol': 'l',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYM',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f7d60ce82f0>,
        'symbol': 'm',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'LOKA',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f7d60ce82f0>,
        'symbol': 'A',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKB',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f7d60ce82f0>,
        'symbol': 'B',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKC',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f7d60ce82f0>,
        'symbol': 'C',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKD',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f7d60ce82f0>,
        'symbol': 'D',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKE',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f7d60ce82f0>,
        'symbol': 'E',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKF',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f7d60ce82f0>,
        'symbol': 'F',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKG',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f7d60ce82f0>,
        'symbol': 'G',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKH',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f7d60ce82f0>,
        'symbol': 'H',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKI',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f7d60ce82f0>,
        'symbol': 'I',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKJ',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f7d60ce82f0>,
        'symbol': 'J',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKK',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f7d60ce82f0>,
        'symbol': 'K',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKL',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f7d60ce82f0>,
        'symbol': 'L',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKM',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f7d60ce82f0>,
        'symbol': 'M',
        'type': 'lock'}]


INITIAL SOUP
kJ+=:6Ech⊕&.fj~"↑=hIF¿↓F‽+«"u(>E⸘j%▯!kxl<(bM¿4kd|◇3b⸘¿]b. 6Fn4$fu⊕?LdM:fa¿a+)1|?
6◇~MIJ[=[&vTEg!«DE◇Mem↑vcA)#920^i)B=&jcrh⊕«1Jdf+6.z(ag«tLxt1TGIE$v*|«k*u«9g↓*↑]◇
M|=⊕&60⸘¿.h$d↓^⊕aA ↑A)↑-h5]|<6#d$gDIf zt)!C~⸘^53|5)1F⊕T◈▯#####[t1]t3r"04B>‽2)c(t
C$2=13)d^^1(bD^4:4(tT[4rm↓÷⊕AFM%»^B«e[u2+)L⊕BFc2 gmme¿?<◇%5vlTB10‽↓dti:2=⸘¿CG↑|9
=T62ee09BFv-h3F]"*«]5>.‽↑¿gmtL61g^Tvr)^0=ki◇↓6‽e⊕7|~>:K8k]I^35(ej6?T9^l9)hH↑](+«
8c?C⸘2*↓KD3&b↓Eu<v93Id‽H=!Tc477r]‽gc|j¿Dg#[gL5Gk#«8d[(u«$m2tB8Lx8x!jiKA«T$g⊕>*÷j
l#0+◇>÷19▯KLC<=]HkT?)⸘g?1⊕3I^v8B84Ak↓]A«z!E»?9$MF*B÷r&c⸘17u5I«▯^v(FeG5%kTm%61).]
Lu+▯BLTKd i[<r$7*E)¿◇Fz3MB5CK‽h$"↑j↑"◇J!÷¿IGG‽tDvH⊕) ~n8EDim+l+n2Bu8tTAG%‽v»r»i]
+BkJ÷«=$9(+5xu!L1vM2cB^◇7fT(|H>4hmJ[a9h9▯«Fin‽0«=zdk:u: [9~)5K3÷4H2B&⸘9|»~TJ?[M"
5ug>*x⸘FxdTz#k3K↓M⊕[#IE0gbu."⸘A^38?↓j~cz*aAbhc?4zT0rL44tr^↑6l↓9↑E-u»D[10"%gi[50&
<^<%"«bdIHE. ‽G0*.↓akt⊕+K54d&Be!(↓i⸘e«[:A+%▯▯n%f0E7~m6gj&#EC1^uff«◇9B&$)Cv0(ruTI
?:)d^)l8t7uLegFvmFH&%u~(7TB#8i[c5)⊕DG=Ikm*]↑#Dkrk*r|z:it⊕aBf1)J2dCgu9"[in90hF-Kf
L4¿]rD6g-L6B051Aj7g8!igG‽‽K0÷↑+Fic3Eu?M+

BODIES:
35	▯`8191`
49	◇`None`
81	◇`None`
98	◇`None`
107	#`0`
159	◇`None`
190	#`0`
215	◈`215`
216	▯`8191`
217	#`0`
218	#`0`
219	#`0`
220	#`0`
221	#`0`
296	◇`None`
363	◇`None`
441	#`0`
448	#`0`
481	#`0`
484	◇`None`
489	▯`8191`
542	▯`8191`
563	▯`8191`
580	◇`None`
597	◇`None`
663	◇`None`
680	▯`8191`
732	#`0`
740	#`0`
843	▯`8191`
844	▯`8191`
857	#`0`
866	◇`None`
907	#`0`
924	#`0`

	
cycle 1
216	▯`8190`	BODY
215	◈`216`	BODY

	
cycle 2
216	▯`8189`	BODY
215	◈`217`	BODY

	
cycle 3
216	▯`8188`	BODY
217	#`0`	BODY
216	▯`8188`	BODY
215	◈`218`	BODY

	
cycle 4
216	▯`8187`	BODY
218	#`0`	BODY
216	▯`8187`	BODY
215	◈`219`	BODY

	
cycle 5
216	▯`8186`	BODY
219	#`0`	BODY
216	▯`8186`	BODY
215	◈`220`	BODY

	
cycle 6
216	▯`8185`	BODY
220	#`0`	BODY
216	▯`8185`	BODY
215	◈`221`	BODY

	
cycle 7
216	▯`8184`	BODY
221	#`0`	BODY
216	▯`8184`	BODY
215	◈`222`	BODY

	
cycle 8
216	▯`7969`	BODY
218	#`214`	BODY
216	▯`7969`	BODY
215	◈`223`	BODY

	
cycle 9
216	▯`7968`	BODY
215	◈`224`	BODY

	
cycle 10
216	▯`7967`	BODY
215	◈`225`	BODY

	
cycle 11
216	▯`7706`	BODY
220	#`260`	BODY
216	▯`7706`	BODY
215	◈`226`	BODY

	
cycle 12
216	▯`7705`	BODY
215	◈`227`	BODY

	
cycle 13
216	▯`7704`	BODY
215	◈`228`	BODY

	
cycle 14
216	▯`7307`	BODY
217	#`396`	BODY
216	▯`7307`	BODY
215	◈`229`	BODY

	
cycle 15
216	▯`6910`	BODY
221	#`396`	BODY
216	▯`6910`	BODY
215	◈`230`	BODY

	
cycle 16
216	▯`6909`	BODY
215	◈`231`	BODY

	
cycle 17
216	▯`6908`	BODY
215	◈`232`	BODY

	
cycle 18
216	▯`6907`	BODY
215	◈`233`	BODY

	
cycle 19
216	▯`6480`	BODY
219	#`426`	BODY
216	▯`6480`	BODY
215	◈`234`	BODY

	
cycle 20
216	▯`6479`	BODY
215	◈`235`	BODY

	
cycle 21
216	▯`6478`	BODY
215	◈`236`	BODY

	
cycle 22
216	▯`6474`	BODY
215	◈`240`	BODY

	
cycle 23
216	▯`6473`	BODY
215	◈`241`	BODY

	
cycle 24
216	▯`6472`	BODY
215	◈`242`	BODY
396	T	BLOCK
426	]	BLOCK

	
cycle 25
216	▯`6471`	BODY
215	◈`243`	BODY

	
cycle 26
216	▯`6467`	BODY
215	◈`247`	BODY

	
cycle 27
216	▯`6466`	BODY
215	◈`248`	BODY

	
cycle 28
216	▯`6464`	BODY
217	#`397`	BODY
216	▯`6464`	BODY
215	◈`249`	BODY

	
cycle 29
216	▯`6462`	BODY
218	#`215`	BODY
216	▯`6462`	BODY
215	◈`250`	BODY

	
cycle 30
216	▯`6461`	BODY
215	◈`251`	BODY

	
cycle 31
216	▯`6480`	BODY
215	◈`232`	BODY

	
cycle 32
216	▯`6479`	BODY
215	◈`233`	BODY

	
cycle 33
216	▯`6420`	BODY
219	#`484`	BODY
216	▯`6420`	BODY
215	◈`234`	BODY

	
cycle 34
216	▯`6419`	BODY
215	◈`235`	BODY

	
cycle 35
216	▯`6418`	BODY
215	◈`236`	BODY

	
cycle 36
216	▯`6414`	BODY
215	◈`240`	BODY

	
cycle 37
216	▯`6413`	BODY
215	◈`241`	BODY

	
cycle 38
216	▯`6412`	BODY
215	◈`242`	BODY
397	◇`None`	BLOCK
484	(	BLOCK

	
cycle 39
216	▯`6411`	BODY
215	◈`243`	BODY

	
cycle 40
216	▯`6407`	BODY
215	◈`247`	BODY

	
cycle 41
216	▯`6406`	BODY
215	◈`248`	BODY

	
cycle 42
216	▯`6404`	BODY
217	#`398`	BODY
216	▯`6404`	BODY
215	◈`249`	BODY

	
cycle 43
216	▯`6402`	BODY
218	#`216`	BODY
216	▯`6402`	BODY
215	◈`250`	BODY

	
cycle 44
216	▯`6401`	BODY
215	◈`251`	BODY

	
cycle 45
216	▯`6420`	BODY
215	◈`232`	BODY

	
cycle 46
216	▯`6419`	BODY
215	◈`233`	BODY

	
cycle 47
216	▯`6413`	BODY
219	#`489`	BODY
216	▯`6413`	BODY
215	◈`234`	BODY

	
cycle 48
216	▯`6412`	BODY
215	◈`235`	BODY

	
cycle 49
216	▯`6411`	BODY
215	◈`236`	BODY

	
cycle 50
216	▯`6407`	BODY
215	◈`240`	BODY

	
cycle 51
216	▯`6406`	BODY
215	◈`241`	BODY

	
cycle 52
216	▯`6405`	BODY
215	◈`242`	BODY
398	▯`8191`	BLOCK
489	+	BLOCK

	
cycle 53
216	▯`6404`	BODY
215	◈`243`	BODY

	
cycle 54
216	▯`6400`	BODY
215	◈`247`	BODY

	
cycle 55
216	▯`6399`	BODY
215	◈`248`	BODY

	
cycle 56
216	▯`6397`	BODY
217	#`399`	BODY
216	▯`6397`	BODY
215	◈`249`	BODY

	
cycle 57
216	▯`6395`	BODY
218	#`217`	BODY
216	▯`6395`	BODY
215	◈`250`	BODY

	
cycle 58
216	▯`6394`	BODY
215	◈`251`	BODY

	
cycle 59
216	▯`6413`	BODY
215	◈`232`	BODY

	
cycle 60
216	▯`6412`	BODY
215	◈`233`	BODY

	
cycle 61
216	▯`6459`	BODY
219	#`441`	BODY
216	▯`6459`	BODY
215	◈`234`	BODY

	
cycle 62
216	▯`6458`	BODY
215	◈`235`	BODY

	
cycle 63
216	▯`6457`	BODY
215	◈`236`	BODY

	
cycle 64
216	▯`6453`	BODY
215	◈`240`	BODY

	
cycle 65
216	▯`6452`	BODY
215	◈`241`	BODY

	
cycle 66
216	▯`6451`	BODY
215	◈`242`	BODY
399	#`0`	BLOCK
441	«	BLOCK

	
cycle 67
216	▯`6450`	BODY
215	◈`243`	BODY

	
cycle 68
216	▯`6446`	BODY
215	◈`247`	BODY

	
cycle 69
216	▯`6445`	BODY
215	◈`248`	BODY

	
cycle 70
216	▯`6443`	BODY
217	#`400`	BODY
216	▯`6443`	BODY
215	◈`249`	BODY

	
cycle 71
216	▯`6441`	BODY
218	#`218`	BODY
216	▯`6441`	BODY
215	◈`250`	BODY

	
cycle 72
216	▯`6440`	BODY
215	◈`251`	BODY

	
cycle 73
216	▯`6459`	BODY
215	◈`232`	BODY

	
cycle 74
216	▯`6458`	BODY
215	◈`233`	BODY

	
cycle 75
216	▯`6450`	BODY
219	#`448`	BODY
216	▯`6450`	BODY
215	◈`234`	BODY

	
cycle 76
216	▯`6449`	BODY
215	◈`235`	BODY

	
cycle 77
216	▯`6448`	BODY
215	◈`236`	BODY

	
cycle 78
216	▯`6444`	BODY
215	◈`240`	BODY

	
cycle 79
216	▯`6443`	BODY
215	◈`241`	BODY

	
cycle 80
216	▯`6442`	BODY
215	◈`242`	BODY
400	#`0`	BLOCK
448	8	BLOCK

	
cycle 81
216	▯`6441`	BODY
215	◈`243`	BODY

	
cycle 82
216	▯`6437`	BODY
215	◈`247`	BODY

	
cycle 83
216	▯`6436`	BODY
215	◈`248`	BODY

	
cycle 84
216	▯`6434`	BODY
217	#`401`	BODY
216	▯`6434`	BODY
215	◈`249`	BODY

	
cycle 85
216	▯`6432`	BODY
218	#`219`	BODY
216	▯`6432`	BODY
215	◈`250`	BODY

	
cycle 86
216	▯`6431`	BODY
215	◈`251`	BODY

