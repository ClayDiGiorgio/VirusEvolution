body len = 13
header len = 3
body opener = "`"
body closer = "`"
OPCODE DATA

Flag Names: ['special', 'isRegister', 'isNonNull']

Flag Codes:
{   '000': {   'code': '0000',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7fb5e615f840>,
               'name': 'uninitialized block',
               'symbol': '░',
               'type': 'uninitialized'},
    '001': {   'code': None,
               'default body': None,
               'execute?': True,
               'interpret body': <function Opcodes.<lambda> at 0x7fb5e615fbf8>,
               'name': 'instruction block',
               'symbol': None,
               'type': 'instruction'},
    '010': {   'code': 'REGn',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7fb5e615f950>,
               'name': 'register with a null value',
               'symbol': '_',
               'type': 'register'},
    '011': {   'code': 'REG#',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7fb5e615f8c8>,
               'name': 'register',
               'symbol': '#',
               'type': 'register'},
    '100': {   'code': 'EXEn',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7fb5e615fb70>,
               'name': 'dormant executor',
               'symbol': '◇',
               'type': 'executor'},
    '101': {   'code': 'EXEC',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7fb5e615fae8>,
               'name': 'executor',
               'symbol': '◈',
               'type': 'executor'},
    '110': {   'code': 'DMPn',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7fb5e615fa60>,
               'name': 'dump register with a null value',
               'symbol': '█',
               'type': 'dump register'},
    '111': {   'code': 'DUMP',
               'default body': '1111111111111',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7fb5e615f9d8>,
               'name': 'dump register',
               'symbol': '▯',
               'type': 'dump register'}}


Instruction Codes:
[   {   'arg count': 0,
        'code': 'NOOP',
        'description': 'No operation',
        'function': <function noOp at 0x7fb5e615e2f0>,
        'symbol': ' ',
        'type': 'noop'},
    {   'arg count': 0,
        'code': 'ARG0',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7fb5e615e2f0>,
        'symbol': '0',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG1',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7fb5e615e2f0>,
        'symbol': '1',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG2',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7fb5e615e2f0>,
        'symbol': '2',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG3',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7fb5e615e2f0>,
        'symbol': '3',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG4',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7fb5e615e2f0>,
        'symbol': '4',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG5',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7fb5e615e2f0>,
        'symbol': '5',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG6',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7fb5e615e2f0>,
        'symbol': '6',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG7',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7fb5e615e2f0>,
        'symbol': '7',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG8',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7fb5e615e2f0>,
        'symbol': '8',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG9',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7fb5e615e2f0>,
        'symbol': '9',
        'type': 'arg'},
    {   'arg count': 1,
        'code': 'JMPR',
        'description': 'Jump to the address in r0.',
        'function': <function jumpR at 0x7fb5e615e378>,
        'symbol': '%',
        'type': 'jump'},
    {   'arg count': 0,
        'code': 'JMPB',
        'description': 'Jump backwards to the first lock matching the '
                       'following key',
        'function': <function jumpB at 0x7fb5e615e400>,
        'symbol': '(',
        'type': 'jump'},
    {   'arg count': 0,
        'code': 'JMPF',
        'description': 'Jump forwards to the first lock matching the following '
                       'key',
        'function': <function jumpF at 0x7fb5e615e488>,
        'symbol': ')',
        'type': 'jump'},
    {   'arg count': 1,
        'code': 'ADRB',
        'description': 'Look backwards to the first lock matching the '
                       'following key, store its address in r0',
        'function': <function addressOfJumpB at 0x7fb5e615e510>,
        'symbol': '[',
        'type': 'lookaround'},
    {   'arg count': 1,
        'code': 'ADRF',
        'description': 'Look forwards to the first lock matching the following '
                       'key, store its address in r0',
        'function': <function addressOfJumpF at 0x7fb5e615e598>,
        'symbol': ']',
        'type': 'lookaround'},
    {   'arg count': 3,
        'code': 'SERB',
        'description': 'Starting from [r0], look backwards for the first '
                       'instruction matching the instruction at [r1], store '
                       'its address in r2',
        'function': <function addressOfInstructionB at 0x7fb5e615e620>,
        'symbol': '<',
        'type': 'lookaround'},
    {   'arg count': 3,
        'code': 'SERF',
        'description': 'Starting from [r0], look forwards for the first '
                       'instruction matching the instruction at [r1], store '
                       'its address in r2',
        'function': <function addressOfInstructionF at 0x7fb5e615e6a8>,
        'symbol': '>',
        'type': 'lookaround'},
    {   'arg count': 1,
        'code': 'IFNZ',
        'description': 'if [r0] is not 0, execute the following instruction, '
                       'otherwise, skip to the next non-argument instruction',
        'function': <function skipIfZero at 0x7fb5e615e730>,
        'symbol': '?',
        'type': 'if'},
    {   'arg count': 1,
        'code': 'IFNN',
        'description': 'if [r0] is not null, execute the following '
                       'instruction, otherwise, skip to the next non-argument '
                       'instruction',
        'function': <function skipIfNull at 0x7fb5e615e7b8>,
        'symbol': '‽',
        'type': 'if'},
    {   'arg count': 0,
        'code': 'IFDZ',
        'description': 'if the instruction at the address in r0 is the same as '
                       "the instruction at the address in r1 (or if they're "
                       'both registers, dump registers, or executors), execute '
                       'the next instruction, otherwise, skip to the next '
                       'non-argument instruction',
        'function': <function skipIfDumpIsZero at 0x7fb5e615e840>,
        'symbol': '¿',
        'type': 'if'},
    {   'arg count': 2,
        'code': 'IFBE',
        'description': 'if the instruction at the address in r0 is the same as '
                       "the instruction at the address in r1 (or if they're "
                       'both registers, dump registers, or executors), execute '
                       'the next instruction, otherwise, skip to the next '
                       'non-argument instruction',
        'function': <function skipUnlessEquiv at 0x7fb5e615e8c8>,
        'symbol': '⸘',
        'type': 'if'},
    {   'arg count': 2,
        'code': 'IFEQ',
        'description': 'if [r0] == [r1], execute the next instruction, '
                       'otherwise, skip to the next non-argument instruction',
        'function': <function skipUnlessEqual at 0x7fb5e615e950>,
        'symbol': '=',
        'type': 'if'},
    {   'arg count': 3,
        'code': 'ADDr',
        'description': "Add registers' contents ([r0] = [r1] + [r2])",
        'function': <function add at 0x7fb5e615e9d8>,
        'symbol': '+',
        'type': 'arithmetic'},
    {   'arg count': 3,
        'code': 'SUBr',
        'description': "Subtract registers' contents ([r0] = [r1] - [r2])",
        'function': <function subtract at 0x7fb5e615ea60>,
        'symbol': '-',
        'type': 'arithmetic'},
    {   'arg count': 3,
        'code': 'MULr',
        'description': "Multiply registers' contents ([r0] = [r1] * [r2])",
        'function': <function multiply at 0x7fb5e615eae8>,
        'symbol': '*',
        'type': 'arithmetic'},
    {   'arg count': 3,
        'code': 'DIVr',
        'description': "Divide registers' contents ([r0] = [r1] ÷ [r2])",
        'function': <function divide at 0x7fb5e615eb70>,
        'symbol': '÷',
        'type': 'arithmetic'},
    {   'arg count': 1,
        'code': 'INCr',
        'description': "Increment register's contents ([r0]++)",
        'function': <function increment at 0x7fb5e615ee18>,
        'symbol': '^',
        'type': 'arithmetic'},
    {   'arg count': 1,
        'code': 'DECr',
        'description': "Decrement register's contents ([r0]--)",
        'function': <function decrement at 0x7fb5e615eea0>,
        'symbol': 'v',
        'type': 'arithmetic'},
    {   'arg count': 1,
        'code': 'NOTr',
        'description': "Bitwise NOT register's contents ([r0] = ![r0])",
        'function': <function bitwiseInverse at 0x7fb5e615ef28>,
        'symbol': '!',
        'type': 'bitwise'},
    {   'arg count': 1,
        'code': 'SHFL',
        'description': "Bitwise left shift register's contents ([r0] = [r0] << "
                       '1)',
        'function': <function bitwiseShiftLeft at 0x7fb5e615f048>,
        'symbol': '«',
        'type': 'bitwise'},
    {   'arg count': 1,
        'code': 'SHFR',
        'description': "Bitwise right shift register's contents ([r0] = [r0] "
                       '>> 1)',
        'function': <function bitwiseShiftRight at 0x7fb5e615f0d0>,
        'symbol': '»',
        'type': 'bitwise'},
    {   'arg count': 3,
        'code': 'ANDr',
        'description': "Bitwise AND register's contents ([r0] = [r1] & [r2])",
        'function': <function bitwiseAND at 0x7fb5e615ebf8>,
        'symbol': '&',
        'type': 'bitwise'},
    {   'arg count': 3,
        'code': 'ORr-',
        'description': "Bitwise OR register's contents ([r0] = [r1] | [r2])",
        'function': <function bitwiseOR at 0x7fb5e615ec80>,
        'symbol': '|',
        'type': 'bitwise'},
    {   'arg count': 3,
        'code': 'XORr',
        'description': "Bitwise XOR register's contents ([r0] = [r1] ^ [r2])",
        'function': <function bitwiseXOR at 0x7fb5e615ed08>,
        'symbol': '⊕',
        'type': 'bitwise'},
    {   'arg count': 1,
        'code': 'ZERO',
        'description': 'Set register contents to 0 ([r0] = 0)',
        'function': <function setToZero at 0x7fb5e615f158>,
        'symbol': 'z',
        'type': 'set'},
    {   'arg count': 1,
        'code': 'UNIT',
        'description': 'Set register contents to 1 ([r0] = 1)',
        'function': <function setToOne at 0x7fb5e615f1e0>,
        'symbol': 'u',
        'type': 'set'},
    {   'arg count': 1,
        'code': 'RAND',
        'description': 'Sets [r0] to a random valid address.',
        'function': <function setToRand at 0x7fb5e615f2f0>,
        'symbol': 'r',
        'type': 'set'},
    {   'arg count': 1,
        'code': 'NULL',
        'description': 'Sets [r0] to null.',
        'function': <function setToNull at 0x7fb5e615f268>,
        'symbol': 'n',
        'type': 'set'},
    {   'arg count': 2,
        'code': 'CPYr',
        'description': 'Copy [r0] into r1',
        'function': <function copy at 0x7fb5e615f400>,
        'symbol': '"',
        'type': 'clone/swap'},
    {   'arg count': 2,
        'code': 'SWPr',
        'description': 'Swap [r0] into r1 and [r1] into r0',
        'function': <function swap at 0x7fb5e615f488>,
        'symbol': 'x',
        'type': 'clone/swap'},
    {   'arg count': 1,
        'code': 'POPr',
        'description': 'Pop into r0 a value from the first stack found '
                       'immediately after the first matching lock found after '
                       'this executor',
        'function': <function pop at 0x7fb5e615f598>,
        'symbol': '↑',
        'type': 'stack'},
    {   'arg count': 1,
        'code': 'PSHr',
        'description': 'Push [r0] to the first stack found immediately after '
                       'the first matching lock found after this executor',
        'function': <function push at 0x7fb5e615f510>,
        'symbol': '↓',
        'type': 'stack'},
    {   'arg count': 0,
        'code': 'CLAM',
        'description': "A claim marker, used to stake an executor's territory; "
                       'the boundaries of an organism. Also functions as lock.',
        'function': <function noOp at 0x7fb5e615e2f0>,
        'symbol': 'T',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'CLMk',
        'description': 'A claim marker key, matches to a claim marker.',
        'function': <function noOp at 0x7fb5e615e2f0>,
        'symbol': 't',
        'type': 'key'},
    {   'arg count': 2,
        'code': 'MNTR',
        'description': 'Sets [r0] to the address most recently checked within '
                       "this executor's claim boundaries, and [r1] to the "
                       'address of the instruction that checked it. Both are '
                       'set to null if no checks have been recently made.',
        'function': <function monitor at 0x7fb5e615f6a8>,
        'symbol': '~',
        'type': 'monitor'},
    {   'arg count': 2,
        'code': 'ADRS',
        'description': 'Swap the memory block at [r0] with the block at [r1]',
        'function': <function swapMemoryBlocks at 0x7fb5e615f620>,
        'symbol': '$',
        'type': 'memwrite'},
    {   'arg count': 1,
        'code': 'INIT',
        'description': 'Initializes the executor at the address contained in '
                       'r0. (Sets it to non-dormant and sets its instruction '
                       'pointer to itself.)',
        'function': <function initializeExecutor at 0x7fb5e615f730>,
        'symbol': ':',
        'type': 'init'},
    {   'arg count': 1,
        'code': 'DINT',
        'description': 'Denitializes the executor at the address contained in '
                       'r0. (Sets it to dormant.)',
        'function': <function denitializeExecutor at 0x7fb5e615f7b8>,
        'symbol': '.',
        'type': 'deinit'},
    {   'arg count': 0,
        'code': 'KEYA',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7fb5e615e2f0>,
        'symbol': 'a',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYB',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7fb5e615e2f0>,
        'symbol': 'b',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYC',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7fb5e615e2f0>,
        'symbol': 'c',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYD',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7fb5e615e2f0>,
        'symbol': 'd',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYE',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7fb5e615e2f0>,
        'symbol': 'e',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYF',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7fb5e615e2f0>,
        'symbol': 'f',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYG',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7fb5e615e2f0>,
        'symbol': 'g',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYH',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7fb5e615e2f0>,
        'symbol': 'h',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYI',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7fb5e615e2f0>,
        'symbol': 'i',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYJ',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7fb5e615e2f0>,
        'symbol': 'j',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYK',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7fb5e615e2f0>,
        'symbol': 'k',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYL',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7fb5e615e2f0>,
        'symbol': 'l',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYM',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7fb5e615e2f0>,
        'symbol': 'm',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'LOKA',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7fb5e615e2f0>,
        'symbol': 'A',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKB',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7fb5e615e2f0>,
        'symbol': 'B',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKC',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7fb5e615e2f0>,
        'symbol': 'C',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKD',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7fb5e615e2f0>,
        'symbol': 'D',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKE',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7fb5e615e2f0>,
        'symbol': 'E',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKF',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7fb5e615e2f0>,
        'symbol': 'F',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKG',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7fb5e615e2f0>,
        'symbol': 'G',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKH',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7fb5e615e2f0>,
        'symbol': 'H',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKI',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7fb5e615e2f0>,
        'symbol': 'I',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKJ',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7fb5e615e2f0>,
        'symbol': 'J',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKK',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7fb5e615e2f0>,
        'symbol': 'K',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKL',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7fb5e615e2f0>,
        'symbol': 'L',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKM',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7fb5e615e2f0>,
        'symbol': 'M',
        'type': 'lock'}]


INITIAL SOUP
h<*fdD+.‽⸘lF↓E7mMx)9(3Jm #◇6L:9↓1$M>Jl>2xM>!I|(l^5B↑v>~⊕v#g◇%t$▯Ihr%Lc8"1¿r⊕Ta0>
«x.~.rH L⸘gFg↑7¿1mKn?]v↓?^7[drcMA1↓↓#-i=I61#I*◇vA«h0↑[▯«T◈▯#####[t1]t3r"04B>‽2)c
(tC$2=13)d^^1(bD^4:4(tT&!g|⊕K~mM⸘H5*+⸘!u)15◇8u↓5[8^⊕|H3a"(↓zr◇&veI"GJbrz7!3"‽I6k
I3◇>3lI!dGC~)B#HJJ6 DTD+Cg>!I$hBmH?~5uKrvT^5)6<G«-E↑+vxAMz9tGnd⸘)⸘!c]1eJ6h(.>H|d
u5Mx27EDKl-|L!%[↓C)jd«+e⊕HFJ+÷-a5L⊕e=8"fB9cr ~÷+8=Fi⊕:h.T¿D0)dfnj÷k f?7^>62↑mmI↓
i$-Fc]a▯8⊕he⸘.~e*Fd5en*aiAHtbem.zCF=F"]!u8jJ$5$▯»tLh)a⸘cFAiI9]7IC8fD▯Kr?+#LK):BH
b5>zfr3B8E¿"»4◇TM(**⸘n↓↑I↓↑$>«K#&5M‽$↓&‽*6u▯|f&LGMC=»JHr&h0=7j8~F4B◇0iu↑C05?#~÷l
|A>h(↑ g-A9-↑k*⸘| «G◇*4»↑6¿÷eLt»grt:‽↑+I:6c‽▯|⊕÷]*fn-‽^#$Lde)gi#3MbL?6i7|▯*I÷GAb
=▯*9*ur÷$!u!x0rCf>0+]r÷f[i&%f932T1[d643"h↓z(r↓9⊕⸘3*L:=fcG%B↓Li-▯m45B)<rMC6lLtdIx
E=:9i↑LI«$xE‽!tj¿aMckB9C%l$JEb*6*(6<‽↑Thm(!7(^÷e7‽7TC(5¿~)A8"*Gv▯<>»56. Fv$n>^+b
md#K:vc)7↓$#d▯0^uJ?|L«D%Db▯ncacL$t=tBl‽L)↓kieC[<<7.e2a↑÷9"dD««63eGG¿↓3"(7KThD%z4
t1H=÷z!!2:[|n"&#49j«⸘rl-^[+⸘6◇D^‽«rE[C«>=~1Jx¿]J"z↓*▯h-↓JL◇g÷*|:.iK64DKT"dia*TiM
u9«GA7(=8»i*d(⊕"«‽M8K]G~lx▯j!!CFrf^n-(gA

BODIES:
25	#`0`
26	◇`None`
57	#`0`
59	◇`None`
63	▯`8191`
116	#`0`
123	#`0`
126	◇`None`
134	▯`8191`
137	◈`137`
138	▯`8191`
139	#`0`
140	#`0`
141	#`0`
142	#`0`
143	#`0`
203	◇`None`
221	◇`None`
242	◇`None`
254	#`0`
407	▯`8191`
447	▯`8191`
468	▯`8191`
473	#`0`
494	◇`None`
511	#`0`
523	▯`8191`
547	◇`None`
556	#`0`
580	◇`None`
604	▯`8191`
615	#`0`
623	#`0`
633	▯`8191`
641	▯`8191`
703	▯`8191`
784	▯`8191`
802	#`0`
811	#`0`
813	▯`8191`
826	▯`8191`
895	#`0`
909	◇`None`
932	▯`8191`
938	◇`None`
986	▯`8191`

	
cycle 1
138	▯`8190`	BODY
137	◈`138`	BODY

	
cycle 2
138	▯`8189`	BODY
137	◈`139`	BODY

	
cycle 3
138	▯`8188`	BODY
139	#`0`	BODY
138	▯`8188`	BODY
137	◈`140`	BODY

	
cycle 4
138	▯`8187`	BODY
140	#`0`	BODY
138	▯`8187`	BODY
137	◈`141`	BODY

	
cycle 5
138	▯`8186`	BODY
141	#`0`	BODY
138	▯`8186`	BODY
137	◈`142`	BODY

	
cycle 6
138	▯`8185`	BODY
142	#`0`	BODY
138	▯`8185`	BODY
137	◈`143`	BODY

	
cycle 7
138	▯`8184`	BODY
143	#`0`	BODY
138	▯`8184`	BODY
137	◈`144`	BODY

	
cycle 8
138	▯`8047`	BODY
140	#`136`	BODY
138	▯`8047`	BODY
137	◈`145`	BODY

	
cycle 9
138	▯`8046`	BODY
137	◈`146`	BODY

	
cycle 10
138	▯`8045`	BODY
137	◈`147`	BODY

	
cycle 11
138	▯`7862`	BODY
142	#`182`	BODY
138	▯`7862`	BODY
137	◈`148`	BODY

	
cycle 12
138	▯`7861`	BODY
137	◈`149`	BODY

	
cycle 13
138	▯`7860`	BODY
137	◈`150`	BODY

	
cycle 14
138	▯`7450`	BODY
139	#`409`	BODY
138	▯`7450`	BODY
137	◈`151`	BODY

	
cycle 15
138	▯`7040`	BODY
143	#`409`	BODY
138	▯`7040`	BODY
137	◈`152`	BODY

	
cycle 16
138	▯`7039`	BODY
137	◈`153`	BODY

	
cycle 17
138	▯`7038`	BODY
137	◈`154`	BODY

	
cycle 18
138	▯`7037`	BODY
137	◈`155`	BODY

	
cycle 19
138	▯`6541`	BODY
141	#`495`	BODY
138	▯`6541`	BODY
137	◈`156`	BODY

	
cycle 20
138	▯`6540`	BODY
137	◈`157`	BODY

	
cycle 21
138	▯`6539`	BODY
137	◈`158`	BODY

	
cycle 22
138	▯`6535`	BODY
137	◈`162`	BODY

	
cycle 23
138	▯`6534`	BODY
137	◈`163`	BODY

	
cycle 24
138	▯`6533`	BODY
137	◈`164`	BODY
409	T	BLOCK
495	⊕	BLOCK

	
cycle 25
138	▯`6532`	BODY
137	◈`165`	BODY

	
cycle 26
138	▯`6528`	BODY
137	◈`169`	BODY

	
cycle 27
138	▯`6527`	BODY
137	◈`170`	BODY

	
cycle 28
138	▯`6525`	BODY
139	#`410`	BODY
138	▯`6525`	BODY
137	◈`171`	BODY

	
cycle 29
138	▯`6523`	BODY
140	#`137`	BODY
138	▯`6523`	BODY
137	◈`172`	BODY

	
cycle 30
138	▯`6522`	BODY
137	◈`173`	BODY

	
cycle 31
138	▯`6541`	BODY
137	◈`154`	BODY

	
cycle 32
138	▯`6540`	BODY
137	◈`155`	BODY

	
cycle 33
138	▯`6540`	BODY
141	#`494`	BODY
138	▯`6540`	BODY
137	◈`156`	BODY

	
cycle 34
138	▯`6539`	BODY
137	◈`157`	BODY

	
cycle 35
138	▯`6538`	BODY
137	◈`158`	BODY

	
cycle 36
138	▯`6534`	BODY
137	◈`162`	BODY

	
cycle 37
138	▯`6533`	BODY
137	◈`163`	BODY

	
cycle 38
138	▯`6532`	BODY
137	◈`164`	BODY
410	◇`None`	BLOCK
494	h	BLOCK

	
cycle 39
138	▯`6531`	BODY
137	◈`165`	BODY

	
cycle 40
138	▯`6527`	BODY
137	◈`169`	BODY

	
cycle 41
138	▯`6526`	BODY
137	◈`170`	BODY

	
cycle 42
138	▯`6524`	BODY
139	#`411`	BODY
138	▯`6524`	BODY
137	◈`171`	BODY

	
cycle 43
138	▯`6522`	BODY
140	#`138`	BODY
138	▯`6522`	BODY
137	◈`172`	BODY

	
cycle 44
138	▯`6521`	BODY
137	◈`173`	BODY

	
cycle 45
138	▯`6540`	BODY
137	◈`154`	BODY

	
cycle 46
138	▯`6539`	BODY
137	◈`155`	BODY

	
cycle 47
138	▯`6585`	BODY
141	#`447`	BODY
138	▯`6585`	BODY
137	◈`156`	BODY

	
cycle 48
138	▯`6584`	BODY
137	◈`157`	BODY

	
cycle 49
138	▯`6583`	BODY
137	◈`158`	BODY

	
cycle 50
138	▯`6579`	BODY
137	◈`162`	BODY

	
cycle 51
138	▯`6578`	BODY
137	◈`163`	BODY

	
cycle 52
138	▯`6577`	BODY
137	◈`164`	BODY
411	▯`8191`	BLOCK
447	e	BLOCK

	
cycle 53
138	▯`6576`	BODY
137	◈`165`	BODY

	
cycle 54
138	▯`6572`	BODY
137	◈`169`	BODY

	
cycle 55
138	▯`6571`	BODY
137	◈`170`	BODY

	
cycle 56
138	▯`6569`	BODY
139	#`412`	BODY
138	▯`6569`	BODY
137	◈`171`	BODY

	
cycle 57
138	▯`6567`	BODY
140	#`139`	BODY
138	▯`6567`	BODY
137	◈`172`	BODY

	
cycle 58
138	▯`6566`	BODY
137	◈`173`	BODY

	
cycle 59
138	▯`6585`	BODY
137	◈`154`	BODY

	
cycle 60
138	▯`6584`	BODY
137	◈`155`	BODY

	
cycle 61
138	▯`6557`	BODY
141	#`473`	BODY
138	▯`6557`	BODY
137	◈`156`	BODY

	
cycle 62
138	▯`6556`	BODY
137	◈`157`	BODY

	
cycle 63
138	▯`6555`	BODY
137	◈`158`	BODY

	
cycle 64
138	▯`6551`	BODY
137	◈`162`	BODY

	
cycle 65
138	▯`6550`	BODY
137	◈`163`	BODY

	
cycle 66
138	▯`6549`	BODY
137	◈`164`	BODY
412	#`0`	BLOCK
473	⸘	BLOCK

	
cycle 67
138	▯`6548`	BODY
137	◈`165`	BODY

	
cycle 68
138	▯`6544`	BODY
137	◈`169`	BODY

	
cycle 69
138	▯`6543`	BODY
137	◈`170`	BODY

	
cycle 70
138	▯`6541`	BODY
139	#`413`	BODY
138	▯`6541`	BODY
137	◈`171`	BODY

	
cycle 71
138	▯`6539`	BODY
140	#`140`	BODY
138	▯`6539`	BODY
137	◈`172`	BODY

	
cycle 72
138	▯`6538`	BODY
137	◈`173`	BODY

	
cycle 73
138	▯`6557`	BODY
137	◈`154`	BODY

	
cycle 74
138	▯`6556`	BODY
137	◈`155`	BODY

	
cycle 75
138	▯`6517`	BODY
141	#`511`	BODY
138	▯`6517`	BODY
137	◈`156`	BODY

	
cycle 76
138	▯`6516`	BODY
137	◈`157`	BODY

	
cycle 77
138	▯`6515`	BODY
137	◈`158`	BODY

	
cycle 78
138	▯`6511`	BODY
137	◈`162`	BODY

	
cycle 79
138	▯`6510`	BODY
137	◈`163`	BODY

	
cycle 80
138	▯`6509`	BODY
137	◈`164`	BODY
413	#`0`	BLOCK
511	.	BLOCK

	
cycle 81
138	▯`6508`	BODY
137	◈`165`	BODY

	
cycle 82
138	▯`6504`	BODY
137	◈`169`	BODY

	
cycle 83
138	▯`6503`	BODY
137	◈`170`	BODY

	
cycle 84
138	▯`6501`	BODY
139	#`414`	BODY
138	▯`6501`	BODY
137	◈`171`	BODY
