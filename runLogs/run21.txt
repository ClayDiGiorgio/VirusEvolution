body len = 13
header len = 3
body opener = "`"
body closer = "`"
OPCODE DATA

Flag Names: ['special', 'isRegister', 'isNonNull']

Flag Codes:
{   '000': {   'code': '0000',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f8d87dec840>,
               'name': 'uninitialized block',
               'symbol': '░',
               'type': 'uninitialized'},
    '001': {   'code': None,
               'default body': None,
               'execute?': True,
               'interpret body': <function Opcodes.<lambda> at 0x7f8d87decbf8>,
               'name': 'instruction block',
               'symbol': None,
               'type': 'instruction'},
    '010': {   'code': 'REGn',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f8d87dec950>,
               'name': 'register with a null value',
               'symbol': '_',
               'type': 'register'},
    '011': {   'code': 'REG#',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f8d87dec8c8>,
               'name': 'register',
               'symbol': '#',
               'type': 'register'},
    '100': {   'code': 'EXEn',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f8d87decb70>,
               'name': 'dormant executor',
               'symbol': '◇',
               'type': 'executor'},
    '101': {   'code': 'EXEC',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f8d87decae8>,
               'name': 'executor',
               'symbol': '◈',
               'type': 'executor'},
    '110': {   'code': 'DMPn',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f8d87deca60>,
               'name': 'dump register with a null value',
               'symbol': '█',
               'type': 'dump register'},
    '111': {   'code': 'DUMP',
               'default body': '1111111111111',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f8d87dec9d8>,
               'name': 'dump register',
               'symbol': '▯',
               'type': 'dump register'}}


Instruction Codes:
[   {   'arg count': 0,
        'code': 'NOOP',
        'description': 'No operation',
        'function': <function noOp at 0x7f8d87deb2f0>,
        'symbol': ' ',
        'type': 'noop'},
    {   'arg count': 0,
        'code': 'ARG0',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f8d87deb2f0>,
        'symbol': '0',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG1',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f8d87deb2f0>,
        'symbol': '1',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG2',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f8d87deb2f0>,
        'symbol': '2',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG3',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f8d87deb2f0>,
        'symbol': '3',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG4',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f8d87deb2f0>,
        'symbol': '4',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG5',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f8d87deb2f0>,
        'symbol': '5',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG6',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f8d87deb2f0>,
        'symbol': '6',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG7',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f8d87deb2f0>,
        'symbol': '7',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG8',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f8d87deb2f0>,
        'symbol': '8',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG9',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f8d87deb2f0>,
        'symbol': '9',
        'type': 'arg'},
    {   'arg count': 1,
        'code': 'JMPR',
        'description': 'Jump to the address in r0.',
        'function': <function jumpR at 0x7f8d87deb378>,
        'symbol': '%',
        'type': 'jump'},
    {   'arg count': 0,
        'code': 'JMPB',
        'description': 'Jump backwards to the first lock matching the '
                       'following key',
        'function': <function jumpB at 0x7f8d87deb400>,
        'symbol': '(',
        'type': 'jump'},
    {   'arg count': 0,
        'code': 'JMPF',
        'description': 'Jump forwards to the first lock matching the following '
                       'key',
        'function': <function jumpF at 0x7f8d87deb488>,
        'symbol': ')',
        'type': 'jump'},
    {   'arg count': 1,
        'code': 'ADRB',
        'description': 'Look backwards to the first lock matching the '
                       'following key, store its address in r0',
        'function': <function addressOfJumpB at 0x7f8d87deb510>,
        'symbol': '[',
        'type': 'lookaround'},
    {   'arg count': 1,
        'code': 'ADRF',
        'description': 'Look forwards to the first lock matching the following '
                       'key, store its address in r0',
        'function': <function addressOfJumpF at 0x7f8d87deb598>,
        'symbol': ']',
        'type': 'lookaround'},
    {   'arg count': 3,
        'code': 'SERB',
        'description': 'Starting from [r0], look backwards for the first '
                       'instruction matching the instruction at [r1], store '
                       'its address in r2',
        'function': <function addressOfInstructionB at 0x7f8d87deb620>,
        'symbol': '<',
        'type': 'lookaround'},
    {   'arg count': 3,
        'code': 'SERF',
        'description': 'Starting from [r0], look forwards for the first '
                       'instruction matching the instruction at [r1], store '
                       'its address in r2',
        'function': <function addressOfInstructionF at 0x7f8d87deb6a8>,
        'symbol': '>',
        'type': 'lookaround'},
    {   'arg count': 1,
        'code': 'IFNZ',
        'description': 'if [r0] is not 0, execute the following instruction, '
                       'otherwise, skip to the next non-argument instruction',
        'function': <function skipIfZero at 0x7f8d87deb730>,
        'symbol': '?',
        'type': 'if'},
    {   'arg count': 1,
        'code': 'IFNN',
        'description': 'if [r0] is not null, execute the following '
                       'instruction, otherwise, skip to the next non-argument '
                       'instruction',
        'function': <function skipIfNull at 0x7f8d87deb7b8>,
        'symbol': '‽',
        'type': 'if'},
    {   'arg count': 0,
        'code': 'IFDZ',
        'description': 'if the instruction at the address in r0 is the same as '
                       "the instruction at the address in r1 (or if they're "
                       'both registers, dump registers, or executors), execute '
                       'the next instruction, otherwise, skip to the next '
                       'non-argument instruction',
        'function': <function skipIfDumpIsZero at 0x7f8d87deb840>,
        'symbol': '¿',
        'type': 'if'},
    {   'arg count': 2,
        'code': 'IFBE',
        'description': 'if the instruction at the address in r0 is the same as '
                       "the instruction at the address in r1 (or if they're "
                       'both registers, dump registers, or executors), execute '
                       'the next instruction, otherwise, skip to the next '
                       'non-argument instruction',
        'function': <function skipUnlessEquiv at 0x7f8d87deb8c8>,
        'symbol': '⸘',
        'type': 'if'},
    {   'arg count': 2,
        'code': 'IFEQ',
        'description': 'if [r0] == [r1], execute the next instruction, '
                       'otherwise, skip to the next non-argument instruction',
        'function': <function skipUnlessEqual at 0x7f8d87deb950>,
        'symbol': '=',
        'type': 'if'},
    {   'arg count': 3,
        'code': 'ADDr',
        'description': "Add registers' contents ([r0] = [r1] + [r2])",
        'function': <function add at 0x7f8d87deb9d8>,
        'symbol': '+',
        'type': 'arithmetic'},
    {   'arg count': 3,
        'code': 'SUBr',
        'description': "Subtract registers' contents ([r0] = [r1] - [r2])",
        'function': <function subtract at 0x7f8d87deba60>,
        'symbol': '-',
        'type': 'arithmetic'},
    {   'arg count': 3,
        'code': 'MULr',
        'description': "Multiply registers' contents ([r0] = [r1] * [r2])",
        'function': <function multiply at 0x7f8d87debae8>,
        'symbol': '*',
        'type': 'arithmetic'},
    {   'arg count': 3,
        'code': 'DIVr',
        'description': "Divide registers' contents ([r0] = [r1] ÷ [r2])",
        'function': <function divide at 0x7f8d87debb70>,
        'symbol': '÷',
        'type': 'arithmetic'},
    {   'arg count': 1,
        'code': 'INCr',
        'description': "Increment register's contents ([r0]++)",
        'function': <function increment at 0x7f8d87debe18>,
        'symbol': '^',
        'type': 'arithmetic'},
    {   'arg count': 1,
        'code': 'DECr',
        'description': "Decrement register's contents ([r0]--)",
        'function': <function decrement at 0x7f8d87debea0>,
        'symbol': 'v',
        'type': 'arithmetic'},
    {   'arg count': 1,
        'code': 'NOTr',
        'description': "Bitwise NOT register's contents ([r0] = ![r0])",
        'function': <function bitwiseInverse at 0x7f8d87debf28>,
        'symbol': '!',
        'type': 'bitwise'},
    {   'arg count': 1,
        'code': 'SHFL',
        'description': "Bitwise left shift register's contents ([r0] = [r0] << "
                       '1)',
        'function': <function bitwiseShiftLeft at 0x7f8d87dec048>,
        'symbol': '«',
        'type': 'bitwise'},
    {   'arg count': 1,
        'code': 'SHFR',
        'description': "Bitwise right shift register's contents ([r0] = [r0] "
                       '>> 1)',
        'function': <function bitwiseShiftRight at 0x7f8d87dec0d0>,
        'symbol': '»',
        'type': 'bitwise'},
    {   'arg count': 3,
        'code': 'ANDr',
        'description': "Bitwise AND register's contents ([r0] = [r1] & [r2])",
        'function': <function bitwiseAND at 0x7f8d87debbf8>,
        'symbol': '&',
        'type': 'bitwise'},
    {   'arg count': 3,
        'code': 'ORr-',
        'description': "Bitwise OR register's contents ([r0] = [r1] | [r2])",
        'function': <function bitwiseOR at 0x7f8d87debc80>,
        'symbol': '|',
        'type': 'bitwise'},
    {   'arg count': 3,
        'code': 'XORr',
        'description': "Bitwise XOR register's contents ([r0] = [r1] ^ [r2])",
        'function': <function bitwiseXOR at 0x7f8d87debd08>,
        'symbol': '⊕',
        'type': 'bitwise'},
    {   'arg count': 1,
        'code': 'ZERO',
        'description': 'Set register contents to 0 ([r0] = 0)',
        'function': <function setToZero at 0x7f8d87dec158>,
        'symbol': 'z',
        'type': 'set'},
    {   'arg count': 1,
        'code': 'UNIT',
        'description': 'Set register contents to 1 ([r0] = 1)',
        'function': <function setToOne at 0x7f8d87dec1e0>,
        'symbol': 'u',
        'type': 'set'},
    {   'arg count': 1,
        'code': 'RAND',
        'description': 'Sets [r0] to a random valid address.',
        'function': <function setToRand at 0x7f8d87dec2f0>,
        'symbol': 'r',
        'type': 'set'},
    {   'arg count': 1,
        'code': 'NULL',
        'description': 'Sets [r0] to null.',
        'function': <function setToNull at 0x7f8d87dec268>,
        'symbol': 'n',
        'type': 'set'},
    {   'arg count': 2,
        'code': 'CPYr',
        'description': 'Copy [r0] into r1',
        'function': <function copy at 0x7f8d87dec400>,
        'symbol': '"',
        'type': 'clone/swap'},
    {   'arg count': 2,
        'code': 'SWPr',
        'description': 'Swap [r0] into r1 and [r1] into r0',
        'function': <function swap at 0x7f8d87dec488>,
        'symbol': 'x',
        'type': 'clone/swap'},
    {   'arg count': 1,
        'code': 'POPr',
        'description': 'Pop into r0 a value from the first stack found '
                       'immediately after the first matching lock found after '
                       'this executor',
        'function': <function pop at 0x7f8d87dec598>,
        'symbol': '↑',
        'type': 'stack'},
    {   'arg count': 1,
        'code': 'PSHr',
        'description': 'Push [r0] to the first stack found immediately after '
                       'the first matching lock found after this executor',
        'function': <function push at 0x7f8d87dec510>,
        'symbol': '↓',
        'type': 'stack'},
    {   'arg count': 0,
        'code': 'CLAM',
        'description': "A claim marker, used to stake an executor's territory; "
                       'the boundaries of an organism. Also functions as lock.',
        'function': <function noOp at 0x7f8d87deb2f0>,
        'symbol': 'T',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'CLMk',
        'description': 'A claim marker key, matches to a claim marker.',
        'function': <function noOp at 0x7f8d87deb2f0>,
        'symbol': 't',
        'type': 'key'},
    {   'arg count': 2,
        'code': 'MNTR',
        'description': 'Sets [r0] to the address most recently checked within '
                       "this executor's claim boundaries, and [r1] to the "
                       'address of the instruction that checked it. Both are '
                       'set to null if no checks have been recently made.',
        'function': <function monitor at 0x7f8d87dec6a8>,
        'symbol': '~',
        'type': 'monitor'},
    {   'arg count': 2,
        'code': 'ADRS',
        'description': 'Swap the memory block at [r0] with the block at [r1]',
        'function': <function swapMemoryBlocks at 0x7f8d87dec620>,
        'symbol': '$',
        'type': 'memwrite'},
    {   'arg count': 1,
        'code': 'INIT',
        'description': 'Initializes the executor at the address contained in '
                       'r0. (Sets it to non-dormant and sets its instruction '
                       'pointer to itself.)',
        'function': <function initializeExecutor at 0x7f8d87dec730>,
        'symbol': ':',
        'type': 'init'},
    {   'arg count': 1,
        'code': 'DINT',
        'description': 'Denitializes the executor at the address contained in '
                       'r0. (Sets it to dormant.)',
        'function': <function denitializeExecutor at 0x7f8d87dec7b8>,
        'symbol': '.',
        'type': 'deinit'},
    {   'arg count': 0,
        'code': 'KEYA',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f8d87deb2f0>,
        'symbol': 'a',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYB',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f8d87deb2f0>,
        'symbol': 'b',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYC',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f8d87deb2f0>,
        'symbol': 'c',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYD',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f8d87deb2f0>,
        'symbol': 'd',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYE',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f8d87deb2f0>,
        'symbol': 'e',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYF',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f8d87deb2f0>,
        'symbol': 'f',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYG',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f8d87deb2f0>,
        'symbol': 'g',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYH',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f8d87deb2f0>,
        'symbol': 'h',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYI',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f8d87deb2f0>,
        'symbol': 'i',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYJ',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f8d87deb2f0>,
        'symbol': 'j',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYK',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f8d87deb2f0>,
        'symbol': 'k',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYL',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f8d87deb2f0>,
        'symbol': 'l',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYM',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f8d87deb2f0>,
        'symbol': 'm',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'LOKA',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f8d87deb2f0>,
        'symbol': 'A',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKB',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f8d87deb2f0>,
        'symbol': 'B',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKC',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f8d87deb2f0>,
        'symbol': 'C',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKD',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f8d87deb2f0>,
        'symbol': 'D',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKE',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f8d87deb2f0>,
        'symbol': 'E',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKF',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f8d87deb2f0>,
        'symbol': 'F',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKG',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f8d87deb2f0>,
        'symbol': 'G',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKH',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f8d87deb2f0>,
        'symbol': 'H',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKI',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f8d87deb2f0>,
        'symbol': 'I',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKJ',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f8d87deb2f0>,
        'symbol': 'J',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKK',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f8d87deb2f0>,
        'symbol': 'K',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKL',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f8d87deb2f0>,
        'symbol': 'L',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKM',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f8d87deb2f0>,
        'symbol': 'M',
        'type': 'lock'}]


INITIAL SOUP
5↑G^tr1a<49e0"-b)(5t|▯=(l÷¿¿↑*n+iKh2vCI«"ha%JC▯:↑B"<⸘e8~^▯.I1g!gF7Cg$*"◇$le?&v6^
*÷?*9»m▯l8i81!K⸘Hh<E(vFn+i*⸘!)↓=÷H:4-I(iE(2*8=÷c◇^c[i3B7g"ElexgT◈▯#####[t1]t3r"0
4B>‽2)c(tC$2=13)d^^1(bD^4:4(tTJ-*n‽.G8H5vB(k<rCM#2?»¿B↑⊕~7u&38zag"◇↓A↑)g!¿a5+60÷
M«.26#[▯n:3^]=nm?|Lxgx5u>6cGva+3▯#!↓-%06A*nI5g↑◇k▯5◇u+Li"zTe1c.⊕◇t⸘f|⸘JzE5Tm&0#5
LcD Adt*DcG?79gxL(7‽z0k#dEat¿~BM¿(36>÷lnCF«7a1d& 1?»»1ixmhjxDzck÷GD0MuF=%$x-÷~:=
8.-#<7)IkI1^eur67"«)D[d"%+1F÷~fhr~!hKm=0⸘⊕|c2»hK1Ih)66#Bx»^!%#k-‽Br¿!"↑cf1&↑-9+c
H8>30G"4jT)↓÷bxh^Lu.E=‽0Fh⸘÷[%A«"T5cE ht>Lb.~+Dn↓^Ba=k4«]^v98]"÷F◇"v8K-~bb⊕u+<DB
⸘xFK!%|b4FLE»)&x<:n9e)k|M0↓&(IbbJz^k!-D.h4lL(⊕«CFA39v◇CgJitreLdeJ1i(#55e:eid«Mv$
&lC«-)Jh^tn|Tt2«¿«3j%vI7CIGLC]1E#1E0-F▯^5C▯ha8urrf4TFTG3H↓F1÷+Cx3*)7%↑AB⸘"=H"A2e
|«Teu(]xKtLi3⊕⊕l▯bKx~xJ&dkG)T^BTm<[.]Mz<¿~8^$T÷j0⊕?Tl⸘T8e?v~l&]mT÷7»JE↑]4vi◇↓ME 
]$<‽¿u4$~l&>dM?LDrx⊕im~mJ?&‽8‽¿⊕<d»2CHdx>Kd5T◇n⊕&‽["÷H▯I↓0k)*8.kH5km27⊕EifMjeI0G
+xal-B6bJef2M?:).IrJTj7«D?-"|$9kJnD¿e6hiM[46‽8▯g↑[$E-u*J66[]%<x7<Tj1fH^g»u↑a»F%↓
+J.c8<g&&iK|:G<]A◇↓%B8+ciGB>J4D G‽▯vT)-z

BODIES:
21	▯`8191`
46	▯`8191`
57	▯`8191`
71	◇`None`
87	▯`8191`
128	◇`None`
144	◈`144`
145	▯`8191`
146	#`0`
147	#`0`
148	#`0`
149	#`0`
150	#`0`
208	#`0`
226	◇`None`
245	#`0`
247	▯`8191`
272	▯`8191`
273	#`0`
287	◇`None`
289	▯`8191`
291	◇`None`
304	◇`None`
318	#`0`
343	#`0`
403	#`0`
454	#`0`
461	#`0`
545	◇`None`
613	◇`None`
628	#`0`
672	#`0`
678	▯`8191`
682	▯`8191`
736	▯`8191`
795	◇`None`
845	◇`None`
854	▯`8191`
926	▯`8191`
977	◇`None`
994	▯`8191`

	
cycle 1
145	▯`8190`	BODY
144	◈`145`	BODY

	
cycle 2
145	▯`8189`	BODY
144	◈`146`	BODY

	
cycle 3
145	▯`8188`	BODY
146	#`0`	BODY
145	▯`8188`	BODY
144	◈`147`	BODY

	
cycle 4
145	▯`8187`	BODY
147	#`0`	BODY
145	▯`8187`	BODY
144	◈`148`	BODY

	
cycle 5
145	▯`8186`	BODY
148	#`0`	BODY
145	▯`8186`	BODY
144	◈`149`	BODY

	
cycle 6
145	▯`8185`	BODY
149	#`0`	BODY
145	▯`8185`	BODY
144	◈`150`	BODY

	
cycle 7
145	▯`8184`	BODY
150	#`0`	BODY
145	▯`8184`	BODY
144	◈`151`	BODY

	
cycle 8
145	▯`8040`	BODY
147	#`143`	BODY
145	▯`8040`	BODY
144	◈`152`	BODY

	
cycle 9
145	▯`8039`	BODY
144	◈`153`	BODY

	
cycle 10
145	▯`8038`	BODY
144	◈`154`	BODY

	
cycle 11
145	▯`7848`	BODY
149	#`189`	BODY
145	▯`7848`	BODY
144	◈`155`	BODY

	
cycle 12
145	▯`7847`	BODY
144	◈`156`	BODY

	
cycle 13
145	▯`7846`	BODY
144	◈`157`	BODY

	
cycle 14
145	▯`6863`	BODY
146	#`982`	BODY
145	▯`6863`	BODY
144	◈`158`	BODY

	
cycle 15
145	▯`5880`	BODY
150	#`982`	BODY
145	▯`5880`	BODY
144	◈`159`	BODY

	
cycle 16
145	▯`5879`	BODY
144	◈`160`	BODY

	
cycle 17
145	▯`5878`	BODY
144	◈`161`	BODY

	
cycle 18
145	▯`5877`	BODY
144	◈`162`	BODY

	
cycle 19
145	▯`4880`	BODY
148	#`996`	BODY
145	▯`4880`	BODY
144	◈`163`	BODY

	
cycle 20
145	▯`4879`	BODY
144	◈`164`	BODY

	
cycle 21
145	▯`4878`	BODY
144	◈`165`	BODY

	
cycle 22
145	▯`4874`	BODY
144	◈`169`	BODY

	
cycle 23
145	▯`4873`	BODY
144	◈`170`	BODY

	
cycle 24
145	▯`4872`	BODY
144	◈`171`	BODY
982	T	BLOCK
996	+	BLOCK

	
cycle 25
145	▯`4871`	BODY
144	◈`172`	BODY

	
cycle 26
145	▯`4867`	BODY
144	◈`176`	BODY

	
cycle 27
145	▯`4866`	BODY
144	◈`177`	BODY

	
cycle 28
145	▯`4864`	BODY
146	#`983`	BODY
145	▯`4864`	BODY
144	◈`178`	BODY

	
cycle 29
145	▯`4862`	BODY
147	#`144`	BODY
145	▯`4862`	BODY
144	◈`179`	BODY

	
cycle 30
145	▯`4861`	BODY
144	◈`180`	BODY

	
cycle 31
145	▯`4880`	BODY
144	◈`161`	BODY

	
cycle 32
145	▯`4879`	BODY
144	◈`162`	BODY

	
cycle 33
145	▯`5874`	BODY
145	▯`5874`	BODY
144	◈`163`	BODY
148	_`None`	BLOCK

	
cycle 34
145	▯`5871`	BODY
144	◈`166`	BODY

	
cycle 35
145	▯`5870`	BODY
144	◈`167`	BODY

	
cycle 36
145	▯`5894`	BODY
144	◈`143`	BODY

	
cycle 37
145	▯`5893`	BODY
144	◈`144`	BODY

	
cycle 38
145	▯`5892`	BODY
144	◈`145`	BODY

	
cycle 39
145	▯`5891`	BODY
144	◈`146`	BODY

	
cycle 40
145	▯`6873`	BODY
146	#`0`	BODY
145	▯`6873`	BODY
144	◈`147`	BODY

	
cycle 41
145	▯`7016`	BODY
147	#`0`	BODY
145	▯`7016`	BODY
144	◈`148`	BODY

	
cycle 42
145	▯`7015`	BODY
145	▯`7015`	BODY
144	◈`149`	BODY
148	#`0`	BLOCK

	
cycle 43
145	▯`7203`	BODY
149	#`0`	BODY
145	▯`7203`	BODY
144	◈`150`	BODY

	
cycle 44
145	▯`8184`	BODY
150	#`0`	BODY
145	▯`8184`	BODY
144	◈`151`	BODY

	
cycle 45
145	▯`8040`	BODY
147	#`143`	BODY
145	▯`8040`	BODY
144	◈`152`	BODY

	
cycle 46
145	▯`8039`	BODY
144	◈`153`	BODY

	
cycle 47
145	▯`8038`	BODY
144	◈`154`	BODY

	
cycle 48
145	▯`7848`	BODY
149	#`189`	BODY
145	▯`7848`	BODY
144	◈`155`	BODY

	
cycle 49
145	▯`7847`	BODY
144	◈`156`	BODY

	
cycle 50
145	▯`7846`	BODY
144	◈`157`	BODY

	
cycle 51
145	▯`7163`	BODY
146	#`682`	BODY
145	▯`7163`	BODY
144	◈`158`	BODY

	
cycle 52
145	▯`6480`	BODY
150	#`682`	BODY
145	▯`6480`	BODY
144	◈`159`	BODY

	
cycle 53
145	▯`6479`	BODY
144	◈`160`	BODY

	
cycle 54
145	▯`6478`	BODY
144	◈`161`	BODY

	
cycle 55
145	▯`6477`	BODY
144	◈`162`	BODY

	
cycle 56
145	▯`5785`	BODY
148	#`691`	BODY
145	▯`5785`	BODY
144	◈`163`	BODY

	
cycle 57
145	▯`5784`	BODY
144	◈`164`	BODY

	
cycle 58
145	▯`5783`	BODY
144	◈`165`	BODY

	
cycle 59
145	▯`5779`	BODY
144	◈`169`	BODY

	
cycle 60
145	▯`5778`	BODY
144	◈`170`	BODY

	
cycle 61
145	▯`5777`	BODY
144	◈`171`	BODY
682	T	BLOCK
691	▯`8191`	BLOCK

	
cycle 62
145	▯`5776`	BODY
144	◈`172`	BODY

	
cycle 63
145	▯`5772`	BODY
144	◈`176`	BODY

	
cycle 64
145	▯`5771`	BODY
144	◈`177`	BODY

	
cycle 65
145	▯`5769`	BODY
146	#`683`	BODY
145	▯`5769`	BODY
144	◈`178`	BODY

	
cycle 66
145	▯`5767`	BODY
147	#`144`	BODY
145	▯`5767`	BODY
144	◈`179`	BODY

	
cycle 67
145	▯`5766`	BODY
144	◈`180`	BODY

	
cycle 68
145	▯`5785`	BODY
144	◈`161`	BODY

	
cycle 69
145	▯`5784`	BODY
144	◈`162`	BODY

	
cycle 70
145	▯`5679`	BODY
148	#`795`	BODY
145	▯`5679`	BODY
144	◈`163`	BODY

	
cycle 71
145	▯`5678`	BODY
144	◈`164`	BODY

	
cycle 72
145	▯`5677`	BODY
144	◈`165`	BODY

	
cycle 73
145	▯`5673`	BODY
144	◈`169`	BODY

	
cycle 74
145	▯`5672`	BODY
144	◈`170`	BODY

	
cycle 75
145	▯`5671`	BODY
144	◈`171`	BODY
683	◇`None`	BLOCK
795	h	BLOCK

	
cycle 76
145	▯`5670`	BODY
144	◈`172`	BODY

	
cycle 77
145	▯`5666`	BODY
144	◈`176`	BODY

	
cycle 78
145	▯`5665`	BODY
144	◈`177`	BODY

	
cycle 79
145	▯`5663`	BODY
146	#`684`	BODY
145	▯`5663`	BODY
144	◈`178`	BODY

	
cycle 80
145	▯`5661`	BODY
147	#`145`	BODY
145	▯`5661`	BODY
144	◈`179`	BODY

	
cycle 81
145	▯`5660`	BODY
144	◈`180`	BODY

	
cycle 82
145	▯`5679`	BODY
144	◈`161`	BODY

	
cycle 83
145	▯`5678`	BODY
144	◈`162`	BODY

	
cycle 84
145	▯`5781`	BODY
148	#`691`	BODY
145	▯`5781`	BODY
144	◈`163`	BODY

	
cycle 85
145	▯`5780`	BODY
144	◈`164`	BODY

	
cycle 86
145	▯`5779`	BODY
144	◈`165`	BODY

	
cycle 87
145	▯`5775`	BODY
144	◈`169`	BODY

	
cycle 88
145	▯`5774`	BODY
144	◈`170`	BODY

	
cycle 89
145	▯`5773`	BODY
144	◈`171`	BODY
684	▯`8191`	BLOCK
691	a	BLOCK

	
cycle 90
145	▯`5772`	BODY
144	◈`172`	BODY

	
cycle 91
145	▯`5768`	BODY
144	◈`176`	BODY

	
cycle 92
145	▯`5767`	BODY
144	◈`177`	BODY

	
cycle 93
145	▯`5765`	BODY
146	#`685`	BODY
145	▯`5765`	BODY
144	◈`178`	BODY

	
cycle 94
145	▯`5763`	BODY
147	#`146`	BODY
145	▯`5763`	BODY
144	◈`179`	BODY

	
cycle 95
145	▯`5762`	BODY
144	◈`180`	BODY

	
cycle 96
145	▯`5781`	BODY
144	◈`161`	BODY

	
cycle 97
145	▯`5780`	BODY
144	◈`162`	BODY

	
cycle 98
145	▯`6470`	BODY
145	▯`6470`	BODY
144	◈`163`	BODY
148	_`None`	BLOCK

	
cycle 99
145	▯`6467`	BODY
144	◈`166`	BODY

	
cycle 100
145	▯`6466`	BODY
144	◈`167`	BODY

	
cycle 101
145	▯`6490`	BODY
144	◈`143`	BODY

	
cycle 102
145	▯`6489`	BODY
144	◈`144`	BODY

	
cycle 103
145	▯`6488`	BODY
144	◈`145`	BODY

	
cycle 104
145	▯`6487`	BODY
144	◈`146`	BODY

	
cycle 105
145	▯`7171`	BODY
146	#`0`	BODY
145	▯`7171`	BODY
144	◈`147`	BODY

	
cycle 106
145	▯`7316`	BODY
147	#`0`	BODY
145	▯`7316`	BODY
144	◈`148`	BODY

	
cycle 107
145	▯`7315`	BODY
145	▯`7315`	BODY
144	◈`149`	BODY
148	#`0`	BLOCK

	
cycle 108
145	▯`7503`	BODY
149	#`0`	BODY
145	▯`7503`	BODY
144	◈`150`	BODY

	
cycle 109
145	▯`8184`	BODY
150	#`0`	BODY
145	▯`8184`	BODY
144	◈`151`	BODY

	
cycle 110
145	▯`8040`	BODY
147	#`143`	BODY
145	▯`8040`	BODY
144	◈`152`	BODY

	
cycle 111
145	▯`8039`	BODY
144	◈`153`	BODY

	
cycle 112
145	▯`8038`	BODY
144	◈`154`	BODY

	
cycle 113
145	▯`7848`	BODY
149	#`189`	BODY
145	▯`7848`	BODY
144	◈`155`	BODY

	
cycle 114
145	▯`7847`	BODY
144	◈`156`	BODY

	
cycle 115
145	▯`7846`	BODY
144	◈`157`	BODY

	
cycle 116
145	▯`7444`	BODY
146	#`401`	BODY
145	▯`7444`	BODY
144	◈`158`	BODY

	
cycle 117
145	▯`7042`	BODY
150	#`401`	BODY
145	▯`7042`	BODY
144	◈`159`	BODY

	
cycle 118
145	▯`7041`	BODY
144	◈`160`	BODY

	
cycle 119
145	▯`7040`	BODY
144	◈`161`	BODY

	
cycle 120
145	▯`7039`	BODY
144	◈`162`	BODY

	
cycle 121
145	▯`6549`	BODY
148	#`489`	BODY
145	▯`6549`	BODY
144	◈`163`	BODY

	
cycle 122
145	▯`6548`	BODY
144	◈`164`	BODY

	
cycle 123
145	▯`6547`	BODY
144	◈`165`	BODY

	
cycle 124
145	▯`6543`	BODY
144	◈`169`	BODY

	
cycle 125
145	▯`6542`	BODY
144	◈`170`	BODY

	
cycle 126
145	▯`6541`	BODY
144	◈`171`	BODY
401	T	BLOCK
489	.	BLOCK

	
cycle 127
145	▯`6540`	BODY
144	◈`172`	BODY

	
cycle 128
145	▯`6536`	BODY
144	◈`176`	BODY

	
cycle 129
145	▯`6535`	BODY
144	◈`177`	BODY

	
cycle 130
145	▯`6533`	BODY
146	#`402`	BODY
145	▯`6533`	BODY
144	◈`178`	BODY

	
cycle 131
145	▯`6531`	BODY
147	#`144`	BODY
145	▯`6531`	BODY
144	◈`179`	BODY

	
cycle 132
145	▯`6530`	BODY
144	◈`180`	BODY

	
cycle 133
145	▯`6549`	BODY
144	◈`161`	BODY
