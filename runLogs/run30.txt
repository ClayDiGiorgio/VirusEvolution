body len = 13
header len = 3
body opener = "`"
body closer = "`"
OPCODE DATA

Flag Names: ['special', 'isRegister', 'isNonNull']

Flag Codes:
{   '000': {   'code': '0000',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f2b87f3f7b8>,
               'name': 'uninitialized block',
               'symbol': '░',
               'type': 'uninitialized'},
    '001': {   'code': None,
               'default body': None,
               'execute?': True,
               'interpret body': <function Opcodes.<lambda> at 0x7f2b87f3fb70>,
               'name': 'instruction block',
               'symbol': None,
               'type': 'instruction'},
    '010': {   'code': 'REGn',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f2b87f3f8c8>,
               'name': 'register with a null value',
               'symbol': '_',
               'type': 'register'},
    '011': {   'code': 'REG#',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f2b87f3f840>,
               'name': 'register',
               'symbol': '#',
               'type': 'register'},
    '100': {   'code': 'EXEn',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f2b87f3fae8>,
               'name': 'dormant executor',
               'symbol': '◇',
               'type': 'executor'},
    '101': {   'code': 'EXEC',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f2b87f3fa60>,
               'name': 'executor',
               'symbol': '◈',
               'type': 'executor'},
    '110': {   'code': 'DMPn',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f2b87f3f9d8>,
               'name': 'dump register with a null value',
               'symbol': '█',
               'type': 'dump register'},
    '111': {   'code': 'DUMP',
               'default body': '1111111111111',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f2b87f3f950>,
               'name': 'dump register',
               'symbol': '▯',
               'type': 'dump register'}}


Instruction Codes:
[   {   'arg count': 0,
        'code': 'NOOP',
        'description': 'No operation',
        'function': <function noOp at 0x7f2b87f3e268>,
        'symbol': ' ',
        'type': 'noop'},
    {   'arg count': 0,
        'code': 'ARG0',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f2b87f3e268>,
        'symbol': '0',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG1',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f2b87f3e268>,
        'symbol': '1',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG2',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f2b87f3e268>,
        'symbol': '2',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG3',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f2b87f3e268>,
        'symbol': '3',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG4',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f2b87f3e268>,
        'symbol': '4',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG5',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f2b87f3e268>,
        'symbol': '5',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG6',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f2b87f3e268>,
        'symbol': '6',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG7',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f2b87f3e268>,
        'symbol': '7',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG8',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f2b87f3e268>,
        'symbol': '8',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG9',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f2b87f3e268>,
        'symbol': '9',
        'type': 'arg'},
    {   'arg count': 1,
        'code': 'JMPR',
        'description': 'Jump to the address in r0.',
        'function': <function jumpR at 0x7f2b87f3e2f0>,
        'symbol': '%',
        'type': 'jump'},
    {   'arg count': 0,
        'code': 'JMPB',
        'description': 'Jump backwards to the first lock matching the '
                       'following key',
        'function': <function jumpB at 0x7f2b87f3e378>,
        'symbol': '(',
        'type': 'jump'},
    {   'arg count': 0,
        'code': 'JMPF',
        'description': 'Jump forwards to the first lock matching the following '
                       'key',
        'function': <function jumpF at 0x7f2b87f3e400>,
        'symbol': ')',
        'type': 'jump'},
    {   'arg count': 1,
        'code': 'ADRB',
        'description': 'Look backwards to the first lock matching the '
                       'following key, store its address in r0',
        'function': <function addressOfJumpB at 0x7f2b87f3e488>,
        'symbol': '[',
        'type': 'lookaround'},
    {   'arg count': 1,
        'code': 'ADRF',
        'description': 'Look forwards to the first lock matching the following '
                       'key, store its address in r0',
        'function': <function addressOfJumpF at 0x7f2b87f3e510>,
        'symbol': ']',
        'type': 'lookaround'},
    {   'arg count': 3,
        'code': 'SERB',
        'description': 'Starting from [r0], look backwards for the first '
                       'instruction matching the instruction at [r1], store '
                       'its address in r2',
        'function': <function addressOfInstructionB at 0x7f2b87f3e598>,
        'symbol': '<',
        'type': 'lookaround'},
    {   'arg count': 3,
        'code': 'SERF',
        'description': 'Starting from [r0], look forwards for the first '
                       'instruction matching the instruction at [r1], store '
                       'its address in r2',
        'function': <function addressOfInstructionF at 0x7f2b87f3e620>,
        'symbol': '>',
        'type': 'lookaround'},
    {   'arg count': 1,
        'code': 'IFNZ',
        'description': 'if [r0] is not 0, execute the following instruction, '
                       'otherwise, skip to the next non-argument instruction',
        'function': <function skipIfZero at 0x7f2b87f3e6a8>,
        'symbol': '?',
        'type': 'if'},
    {   'arg count': 1,
        'code': 'IFNN',
        'description': 'if [r0] is not null, execute the following '
                       'instruction, otherwise, skip to the next non-argument '
                       'instruction',
        'function': <function skipIfNull at 0x7f2b87f3e730>,
        'symbol': '‽',
        'type': 'if'},
    {   'arg count': 0,
        'code': 'IFDZ',
        'description': 'if the instruction at the address in r0 is the same as '
                       "the instruction at the address in r1 (or if they're "
                       'both registers, dump registers, or executors), execute '
                       'the next instruction, otherwise, skip to the next '
                       'non-argument instruction',
        'function': <function skipIfDumpIsZero at 0x7f2b87f3e7b8>,
        'symbol': '¿',
        'type': 'if'},
    {   'arg count': 2,
        'code': 'IFBE',
        'description': 'if the instruction at the address in r0 is the same as '
                       "the instruction at the address in r1 (or if they're "
                       'both registers, dump registers, or executors), execute '
                       'the next instruction, otherwise, skip to the next '
                       'non-argument instruction',
        'function': <function skipUnlessEquiv at 0x7f2b87f3e840>,
        'symbol': '⸘',
        'type': 'if'},
    {   'arg count': 2,
        'code': 'IFEQ',
        'description': 'if [r0] == [r1], execute the next instruction, '
                       'otherwise, skip to the next non-argument instruction',
        'function': <function skipUnlessEqual at 0x7f2b87f3e8c8>,
        'symbol': '=',
        'type': 'if'},
    {   'arg count': 3,
        'code': 'ADDr',
        'description': "Add registers' contents ([r0] = [r1] + [r2])",
        'function': <function add at 0x7f2b87f3e950>,
        'symbol': '+',
        'type': 'arithmetic'},
    {   'arg count': 3,
        'code': 'SUBr',
        'description': "Subtract registers' contents ([r0] = [r1] - [r2])",
        'function': <function subtract at 0x7f2b87f3e9d8>,
        'symbol': '-',
        'type': 'arithmetic'},
    {   'arg count': 3,
        'code': 'MULr',
        'description': "Multiply registers' contents ([r0] = [r1] * [r2])",
        'function': <function multiply at 0x7f2b87f3ea60>,
        'symbol': '*',
        'type': 'arithmetic'},
    {   'arg count': 3,
        'code': 'DIVr',
        'description': "Divide registers' contents ([r0] = [r1] ÷ [r2])",
        'function': <function divide at 0x7f2b87f3eae8>,
        'symbol': '÷',
        'type': 'arithmetic'},
    {   'arg count': 1,
        'code': 'INCr',
        'description': "Increment register's contents ([r0]++)",
        'function': <function increment at 0x7f2b87f3ed90>,
        'symbol': '^',
        'type': 'arithmetic'},
    {   'arg count': 1,
        'code': 'DECr',
        'description': "Decrement register's contents ([r0]--)",
        'function': <function decrement at 0x7f2b87f3ee18>,
        'symbol': 'v',
        'type': 'arithmetic'},
    {   'arg count': 1,
        'code': 'NOTr',
        'description': "Bitwise NOT register's contents ([r0] = ![r0])",
        'function': <function bitwiseInverse at 0x7f2b87f3eea0>,
        'symbol': '!',
        'type': 'bitwise'},
    {   'arg count': 1,
        'code': 'SHFL',
        'description': "Bitwise left shift register's contents ([r0] = [r0] << "
                       '1)',
        'function': <function bitwiseShiftLeft at 0x7f2b87f3ef28>,
        'symbol': '«',
        'type': 'bitwise'},
    {   'arg count': 1,
        'code': 'SHFR',
        'description': "Bitwise right shift register's contents ([r0] = [r0] "
                       '>> 1)',
        'function': <function bitwiseShiftRight at 0x7f2b87f3f048>,
        'symbol': '»',
        'type': 'bitwise'},
    {   'arg count': 3,
        'code': 'ANDr',
        'description': "Bitwise AND register's contents ([r0] = [r1] & [r2])",
        'function': <function bitwiseAND at 0x7f2b87f3eb70>,
        'symbol': '&',
        'type': 'bitwise'},
    {   'arg count': 3,
        'code': 'ORr-',
        'description': "Bitwise OR register's contents ([r0] = [r1] | [r2])",
        'function': <function bitwiseOR at 0x7f2b87f3ebf8>,
        'symbol': '|',
        'type': 'bitwise'},
    {   'arg count': 3,
        'code': 'XORr',
        'description': "Bitwise XOR register's contents ([r0] = [r1] ^ [r2])",
        'function': <function bitwiseXOR at 0x7f2b87f3ec80>,
        'symbol': '⊕',
        'type': 'bitwise'},
    {   'arg count': 1,
        'code': 'ZERO',
        'description': 'Set register contents to 0 ([r0] = 0)',
        'function': <function setToZero at 0x7f2b87f3f0d0>,
        'symbol': 'z',
        'type': 'set'},
    {   'arg count': 1,
        'code': 'UNIT',
        'description': 'Set register contents to 1 ([r0] = 1)',
        'function': <function setToOne at 0x7f2b87f3f158>,
        'symbol': 'u',
        'type': 'set'},
    {   'arg count': 1,
        'code': 'RAND',
        'description': 'Sets [r0] to a random valid address.',
        'function': <function setToRand at 0x7f2b87f3f268>,
        'symbol': 'r',
        'type': 'set'},
    {   'arg count': 1,
        'code': 'NULL',
        'description': 'Sets [r0] to null.',
        'function': <function setToNull at 0x7f2b87f3f1e0>,
        'symbol': 'n',
        'type': 'set'},
    {   'arg count': 2,
        'code': 'CPYr',
        'description': 'Copy [r0] into r1',
        'function': <function copy at 0x7f2b87f3f378>,
        'symbol': '"',
        'type': 'clone/swap'},
    {   'arg count': 2,
        'code': 'SWPr',
        'description': 'Swap [r0] into r1 and [r1] into r0',
        'function': <function swap at 0x7f2b87f3f400>,
        'symbol': 'x',
        'type': 'clone/swap'},
    {   'arg count': 1,
        'code': 'POPr',
        'description': 'Pop into r0 a value from the first stack found '
                       'immediately after the first matching lock found after '
                       'this executor',
        'function': <function pop at 0x7f2b87f3f510>,
        'symbol': '↑',
        'type': 'stack'},
    {   'arg count': 1,
        'code': 'PSHr',
        'description': 'Push [r0] to the first stack found immediately after '
                       'the first matching lock found after this executor',
        'function': <function push at 0x7f2b87f3f488>,
        'symbol': '↓',
        'type': 'stack'},
    {   'arg count': 0,
        'code': 'CLAM',
        'description': "A claim marker, used to stake an executor's territory; "
                       'the boundaries of an organism. Also functions as lock.',
        'function': <function noOp at 0x7f2b87f3e268>,
        'symbol': 'T',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'CLMk',
        'description': 'A claim marker key, matches to a claim marker.',
        'function': <function noOp at 0x7f2b87f3e268>,
        'symbol': 't',
        'type': 'key'},
    {   'arg count': 2,
        'code': 'MNTR',
        'description': 'Sets [r0] to the address most recently checked within '
                       "this executor's claim boundaries, and [r1] to the "
                       'address of the instruction that checked it. Both are '
                       'set to null if no checks have been recently made.',
        'function': <function monitor at 0x7f2b87f3f620>,
        'symbol': '~',
        'type': 'monitor'},
    {   'arg count': 2,
        'code': 'ADRS',
        'description': 'Swap the memory block at [r0] with the block at [r1]',
        'function': <function swapMemoryBlocks at 0x7f2b87f3f598>,
        'symbol': '$',
        'type': 'memwrite'},
    {   'arg count': 1,
        'code': 'INIT',
        'description': 'Initializes the executor at the address contained in '
                       'r0. (Sets it to non-dormant and sets its instruction '
                       'pointer to itself.)',
        'function': <function initializeExecutor at 0x7f2b87f3f6a8>,
        'symbol': ':',
        'type': 'init'},
    {   'arg count': 1,
        'code': 'DINT',
        'description': 'Denitializes the executor at the address contained in '
                       'r0. (Sets it to dormant.)',
        'function': <function denitializeExecutor at 0x7f2b87f3f730>,
        'symbol': '.',
        'type': 'deinit'},
    {   'arg count': 0,
        'code': 'KEYA',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f2b87f3e268>,
        'symbol': 'a',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYB',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f2b87f3e268>,
        'symbol': 'b',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYC',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f2b87f3e268>,
        'symbol': 'c',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYD',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f2b87f3e268>,
        'symbol': 'd',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYE',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f2b87f3e268>,
        'symbol': 'e',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYF',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f2b87f3e268>,
        'symbol': 'f',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYG',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f2b87f3e268>,
        'symbol': 'g',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYH',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f2b87f3e268>,
        'symbol': 'h',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYI',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f2b87f3e268>,
        'symbol': 'i',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYJ',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f2b87f3e268>,
        'symbol': 'j',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYK',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f2b87f3e268>,
        'symbol': 'k',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYL',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f2b87f3e268>,
        'symbol': 'l',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYM',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f2b87f3e268>,
        'symbol': 'm',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'LOKA',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f2b87f3e268>,
        'symbol': 'A',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKB',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f2b87f3e268>,
        'symbol': 'B',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKC',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f2b87f3e268>,
        'symbol': 'C',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKD',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f2b87f3e268>,
        'symbol': 'D',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKE',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f2b87f3e268>,
        'symbol': 'E',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKF',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f2b87f3e268>,
        'symbol': 'F',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKG',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f2b87f3e268>,
        'symbol': 'G',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKH',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f2b87f3e268>,
        'symbol': 'H',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKI',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f2b87f3e268>,
        'symbol': 'I',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKJ',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f2b87f3e268>,
        'symbol': 'J',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKK',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f2b87f3e268>,
        'symbol': 'K',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKL',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f2b87f3e268>,
        'symbol': 'L',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKM',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f2b87f3e268>,
        'symbol': 'M',
        'type': 'lock'}]


INITIAL SOUP
hlE z239x7▯nb^0Az⸘[»5z¿ =&«H‽#]3g=<⊕÷l^.]m↑1rAFhu)¿=¿M>e>mg>+CDGl1.T=CfzIH<)dG‽?
7El-]H"]+zu[nLi↑)&=m>|^h2l336.▯A5~5⊕jtv(]GF[|Mg)F[|8:«b5iij▯)9~l~◇%JF◇▯C1⊕2mM÷÷n
»÷»uG.D!^2f&T+6=z+63↑⊕E%1G6> i~H+↓ul#+↑B&T9=?J:IGrfr▯⸘<#|↓?8tz=M*M#LJbJuu>$(2»T◈
▯#####[t1]t3r"04B>‽2)c(tC$2=13)d^^1(bD^4:4(tT.8Dbar9[i6+x")i"*5*6t(uC(!IHI65&3I)
‽nm.x0)-^<D#)↑‽"tb↓1¿2<E0:^I>▯⊕H=↓GF<+[4r5K^>2I4!↑bf+9«Btx(tTGc↓4.~trG◇K÷↓r].H⸘g
^fr↑d"T%i+r6[k⊕&Ia%["a%6eBk[gt! rd9<6n◇)9÷DI&«6-FT8vA>(ux$5.«uC[ ⸘z#⸘1ngakH3]J%⸘
Ex»«|1K4J^+3DkCet0>5▯F«»6%#4⸘DEg:Mv>⊕DkJ[+^⊕Iz1«n)"a^↓(◇?⊕?9b!⸘<6«KatG↓B9G◇e⊕↓0b
u+‽^I^<d?!%i#?8T+:t66)B:~)A-a⸘2:T↑t[g&(1nc|EB<↑CE⊕6rx*(↑v5⊕cCi6xc#«L$le0▯!~l▯! *
g‽ntc.↑?÷↑]4t!86ufE▯#CaE0h[dk+Ckjb-$f|D2bl▯^*L5%(?bB%m"‽4vJ.*!(cjL↓8:2↑ah^«vh¿"(
kAg#e!a2n¿3a&j 8¿zI8([nz^lu(dH¿#↑#%n$A%e?"KGn-◇04$4<*ku=^05t(9=t↑$÷»h»j61u*▯«cv(
3▯«h7◇◇↑GE~hF▯u«6$»a~ji*÷%◇?[rnf^)bnuf&ij⊕rC)1⸘kB*-‽«-nhdh◇AT↓«Th%i!cF<[9.)"eM>A
nm<:fL"d"6d1a2c2⸘.?-t(l =+56|+⊕‽h-76>GM"+C<]3iG÷u?j↑9T⊕Lau$vv=‽-9»j<.t^#kG6<<&z6
v]H3‽⊕&6↓f-d▯!)C)÷«m5«md8M(vl5b‽039M«c#*

BODIES:
10	▯`8191`
29	#`0`
110	▯`8191`
139	▯`8191`
145	◇`None`
149	◇`None`
150	▯`8191`
196	#`0`
212	▯`8191`
215	#`0`
226	#`0`
239	◈`239`
240	▯`8191`
241	#`0`
242	#`0`
243	#`0`
244	#`0`
245	#`0`
331	#`0`
349	▯`8191`
390	◇`None`
438	◇`None`
467	#`0`
500	▯`8191`
506	#`0`
535	◇`None`
554	◇`None`
572	#`0`
625	#`0`
632	▯`8191`
636	▯`8191`
659	▯`8191`
660	#`0`
682	▯`8191`
723	#`0`
751	#`0`
753	#`0`
766	◇`None`
795	▯`8191`
801	▯`8191`
805	◇`None`
806	◇`None`
813	▯`8191`
826	◇`None`
858	◇`None`
951	#`0`
972	▯`8191`
998	#`0`

	
cycle 1
240	▯`8190`	BODY
239	◈`240`	BODY

	
cycle 2
240	▯`8189`	BODY
239	◈`241`	BODY

	
cycle 3
240	▯`8188`	BODY
241	#`0`	BODY
240	▯`8188`	BODY
239	◈`242`	BODY

	
cycle 4
240	▯`8187`	BODY
242	#`0`	BODY
240	▯`8187`	BODY
239	◈`243`	BODY

	
cycle 5
240	▯`8186`	BODY
243	#`0`	BODY
240	▯`8186`	BODY
239	◈`244`	BODY

	
cycle 6
240	▯`8185`	BODY
244	#`0`	BODY
240	▯`8185`	BODY
239	◈`245`	BODY

	
cycle 7
240	▯`8184`	BODY
245	#`0`	BODY
240	▯`8184`	BODY
239	◈`246`	BODY

	
cycle 8
240	▯`7945`	BODY
242	#`238`	BODY
240	▯`7945`	BODY
239	◈`247`	BODY

	
cycle 9
240	▯`7944`	BODY
239	◈`248`	BODY

	
cycle 10
240	▯`7943`	BODY
239	◈`249`	BODY

	
cycle 11
240	▯`7658`	BODY
244	#`284`	BODY
240	▯`7658`	BODY
239	◈`250`	BODY

	
cycle 12
240	▯`7657`	BODY
239	◈`251`	BODY

	
cycle 13
240	▯`7656`	BODY
239	◈`252`	BODY

	
cycle 14
240	▯`6719`	BODY
241	#`936`	BODY
240	▯`6719`	BODY
239	◈`253`	BODY

	
cycle 15
240	▯`5782`	BODY
245	#`936`	BODY
240	▯`5782`	BODY
239	◈`254`	BODY

	
cycle 16
240	▯`5781`	BODY
239	◈`255`	BODY

	
cycle 17
240	▯`5780`	BODY
239	◈`256`	BODY

	
cycle 18
240	▯`5779`	BODY
239	◈`257`	BODY

	
cycle 19
240	▯`5778`	BODY
240	▯`5778`	BODY
239	◈`258`	BODY
243	_`None`	BLOCK

	
cycle 20
240	▯`5775`	BODY
239	◈`261`	BODY

	
cycle 21
240	▯`5774`	BODY
239	◈`262`	BODY

	
cycle 22
240	▯`5798`	BODY
239	◈`238`	BODY

	
cycle 23
240	▯`5797`	BODY
239	◈`239`	BODY

	
cycle 24
240	▯`5796`	BODY
239	◈`240`	BODY

	
cycle 25
240	▯`5795`	BODY
239	◈`241`	BODY

	
cycle 26
240	▯`6730`	BODY
241	#`0`	BODY
240	▯`6730`	BODY
239	◈`242`	BODY

	
cycle 27
240	▯`6967`	BODY
242	#`0`	BODY
240	▯`6967`	BODY
239	◈`243`	BODY

	
cycle 28
240	▯`6966`	BODY
240	▯`6966`	BODY
239	◈`244`	BODY
243	#`0`	BLOCK

	
cycle 29
240	▯`7249`	BODY
244	#`0`	BODY
240	▯`7249`	BODY
239	◈`245`	BODY

	
cycle 30
240	▯`8184`	BODY
245	#`0`	BODY
240	▯`8184`	BODY
239	◈`246`	BODY

	
cycle 31
240	▯`7945`	BODY
242	#`238`	BODY
240	▯`7945`	BODY
239	◈`247`	BODY

	
cycle 32
240	▯`7944`	BODY
239	◈`248`	BODY

	
cycle 33
240	▯`7943`	BODY
239	◈`249`	BODY

	
cycle 34
240	▯`7658`	BODY
244	#`284`	BODY
240	▯`7658`	BODY
239	◈`250`	BODY

	
cycle 35
240	▯`7657`	BODY
239	◈`251`	BODY

	
cycle 36
240	▯`7656`	BODY
239	◈`252`	BODY

	
cycle 37
240	▯`6927`	BODY
241	#`728`	BODY
240	▯`6927`	BODY
239	◈`253`	BODY

	
cycle 38
240	▯`6198`	BODY
245	#`728`	BODY
240	▯`6198`	BODY
239	◈`254`	BODY
