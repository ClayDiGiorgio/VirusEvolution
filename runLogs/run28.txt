body len = 13
header len = 3
body opener = "`"
body closer = "`"
OPCODE DATA

Flag Names: ['special', 'isRegister', 'isNonNull']

Flag Codes:
{   '000': {   'code': '0000',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f48ba2fe7b8>,
               'name': 'uninitialized block',
               'symbol': '░',
               'type': 'uninitialized'},
    '001': {   'code': None,
               'default body': None,
               'execute?': True,
               'interpret body': <function Opcodes.<lambda> at 0x7f48ba2feb70>,
               'name': 'instruction block',
               'symbol': None,
               'type': 'instruction'},
    '010': {   'code': 'REGn',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f48ba2fe8c8>,
               'name': 'register with a null value',
               'symbol': '_',
               'type': 'register'},
    '011': {   'code': 'REG#',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f48ba2fe840>,
               'name': 'register',
               'symbol': '#',
               'type': 'register'},
    '100': {   'code': 'EXEn',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f48ba2feae8>,
               'name': 'dormant executor',
               'symbol': '◇',
               'type': 'executor'},
    '101': {   'code': 'EXEC',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f48ba2fea60>,
               'name': 'executor',
               'symbol': '◈',
               'type': 'executor'},
    '110': {   'code': 'DMPn',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f48ba2fe9d8>,
               'name': 'dump register with a null value',
               'symbol': '█',
               'type': 'dump register'},
    '111': {   'code': 'DUMP',
               'default body': '1111111111111',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f48ba2fe950>,
               'name': 'dump register',
               'symbol': '▯',
               'type': 'dump register'}}


Instruction Codes:
[   {   'arg count': 0,
        'code': 'NOOP',
        'description': 'No operation',
        'function': <function noOp at 0x7f48ba2fd268>,
        'symbol': ' ',
        'type': 'noop'},
    {   'arg count': 0,
        'code': 'ARG0',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f48ba2fd268>,
        'symbol': '0',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG1',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f48ba2fd268>,
        'symbol': '1',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG2',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f48ba2fd268>,
        'symbol': '2',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG3',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f48ba2fd268>,
        'symbol': '3',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG4',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f48ba2fd268>,
        'symbol': '4',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG5',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f48ba2fd268>,
        'symbol': '5',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG6',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f48ba2fd268>,
        'symbol': '6',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG7',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f48ba2fd268>,
        'symbol': '7',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG8',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f48ba2fd268>,
        'symbol': '8',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG9',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f48ba2fd268>,
        'symbol': '9',
        'type': 'arg'},
    {   'arg count': 1,
        'code': 'JMPR',
        'description': 'Jump to the address in r0.',
        'function': <function jumpR at 0x7f48ba2fd2f0>,
        'symbol': '%',
        'type': 'jump'},
    {   'arg count': 0,
        'code': 'JMPB',
        'description': 'Jump backwards to the first lock matching the '
                       'following key',
        'function': <function jumpB at 0x7f48ba2fd378>,
        'symbol': '(',
        'type': 'jump'},
    {   'arg count': 0,
        'code': 'JMPF',
        'description': 'Jump forwards to the first lock matching the following '
                       'key',
        'function': <function jumpF at 0x7f48ba2fd400>,
        'symbol': ')',
        'type': 'jump'},
    {   'arg count': 1,
        'code': 'ADRB',
        'description': 'Look backwards to the first lock matching the '
                       'following key, store its address in r0',
        'function': <function addressOfJumpB at 0x7f48ba2fd488>,
        'symbol': '[',
        'type': 'lookaround'},
    {   'arg count': 1,
        'code': 'ADRF',
        'description': 'Look forwards to the first lock matching the following '
                       'key, store its address in r0',
        'function': <function addressOfJumpF at 0x7f48ba2fd510>,
        'symbol': ']',
        'type': 'lookaround'},
    {   'arg count': 3,
        'code': 'SERB',
        'description': 'Starting from [r0], look backwards for the first '
                       'instruction matching the instruction at [r1], store '
                       'its address in r2',
        'function': <function addressOfInstructionB at 0x7f48ba2fd598>,
        'symbol': '<',
        'type': 'lookaround'},
    {   'arg count': 3,
        'code': 'SERF',
        'description': 'Starting from [r0], look forwards for the first '
                       'instruction matching the instruction at [r1], store '
                       'its address in r2',
        'function': <function addressOfInstructionF at 0x7f48ba2fd620>,
        'symbol': '>',
        'type': 'lookaround'},
    {   'arg count': 1,
        'code': 'IFNZ',
        'description': 'if [r0] is not 0, execute the following instruction, '
                       'otherwise, skip to the next non-argument instruction',
        'function': <function skipIfZero at 0x7f48ba2fd6a8>,
        'symbol': '?',
        'type': 'if'},
    {   'arg count': 1,
        'code': 'IFNN',
        'description': 'if [r0] is not null, execute the following '
                       'instruction, otherwise, skip to the next non-argument '
                       'instruction',
        'function': <function skipIfNull at 0x7f48ba2fd730>,
        'symbol': '‽',
        'type': 'if'},
    {   'arg count': 0,
        'code': 'IFDZ',
        'description': 'if the instruction at the address in r0 is the same as '
                       "the instruction at the address in r1 (or if they're "
                       'both registers, dump registers, or executors), execute '
                       'the next instruction, otherwise, skip to the next '
                       'non-argument instruction',
        'function': <function skipIfDumpIsZero at 0x7f48ba2fd7b8>,
        'symbol': '¿',
        'type': 'if'},
    {   'arg count': 2,
        'code': 'IFBE',
        'description': 'if the instruction at the address in r0 is the same as '
                       "the instruction at the address in r1 (or if they're "
                       'both registers, dump registers, or executors), execute '
                       'the next instruction, otherwise, skip to the next '
                       'non-argument instruction',
        'function': <function skipUnlessEquiv at 0x7f48ba2fd840>,
        'symbol': '⸘',
        'type': 'if'},
    {   'arg count': 2,
        'code': 'IFEQ',
        'description': 'if [r0] == [r1], execute the next instruction, '
                       'otherwise, skip to the next non-argument instruction',
        'function': <function skipUnlessEqual at 0x7f48ba2fd8c8>,
        'symbol': '=',
        'type': 'if'},
    {   'arg count': 3,
        'code': 'ADDr',
        'description': "Add registers' contents ([r0] = [r1] + [r2])",
        'function': <function add at 0x7f48ba2fd950>,
        'symbol': '+',
        'type': 'arithmetic'},
    {   'arg count': 3,
        'code': 'SUBr',
        'description': "Subtract registers' contents ([r0] = [r1] - [r2])",
        'function': <function subtract at 0x7f48ba2fd9d8>,
        'symbol': '-',
        'type': 'arithmetic'},
    {   'arg count': 3,
        'code': 'MULr',
        'description': "Multiply registers' contents ([r0] = [r1] * [r2])",
        'function': <function multiply at 0x7f48ba2fda60>,
        'symbol': '*',
        'type': 'arithmetic'},
    {   'arg count': 3,
        'code': 'DIVr',
        'description': "Divide registers' contents ([r0] = [r1] ÷ [r2])",
        'function': <function divide at 0x7f48ba2fdae8>,
        'symbol': '÷',
        'type': 'arithmetic'},
    {   'arg count': 1,
        'code': 'INCr',
        'description': "Increment register's contents ([r0]++)",
        'function': <function increment at 0x7f48ba2fdd90>,
        'symbol': '^',
        'type': 'arithmetic'},
    {   'arg count': 1,
        'code': 'DECr',
        'description': "Decrement register's contents ([r0]--)",
        'function': <function decrement at 0x7f48ba2fde18>,
        'symbol': 'v',
        'type': 'arithmetic'},
    {   'arg count': 1,
        'code': 'NOTr',
        'description': "Bitwise NOT register's contents ([r0] = ![r0])",
        'function': <function bitwiseInverse at 0x7f48ba2fdea0>,
        'symbol': '!',
        'type': 'bitwise'},
    {   'arg count': 1,
        'code': 'SHFL',
        'description': "Bitwise left shift register's contents ([r0] = [r0] << "
                       '1)',
        'function': <function bitwiseShiftLeft at 0x7f48ba2fdf28>,
        'symbol': '«',
        'type': 'bitwise'},
    {   'arg count': 1,
        'code': 'SHFR',
        'description': "Bitwise right shift register's contents ([r0] = [r0] "
                       '>> 1)',
        'function': <function bitwiseShiftRight at 0x7f48ba2fe048>,
        'symbol': '»',
        'type': 'bitwise'},
    {   'arg count': 3,
        'code': 'ANDr',
        'description': "Bitwise AND register's contents ([r0] = [r1] & [r2])",
        'function': <function bitwiseAND at 0x7f48ba2fdb70>,
        'symbol': '&',
        'type': 'bitwise'},
    {   'arg count': 3,
        'code': 'ORr-',
        'description': "Bitwise OR register's contents ([r0] = [r1] | [r2])",
        'function': <function bitwiseOR at 0x7f48ba2fdbf8>,
        'symbol': '|',
        'type': 'bitwise'},
    {   'arg count': 3,
        'code': 'XORr',
        'description': "Bitwise XOR register's contents ([r0] = [r1] ^ [r2])",
        'function': <function bitwiseXOR at 0x7f48ba2fdc80>,
        'symbol': '⊕',
        'type': 'bitwise'},
    {   'arg count': 1,
        'code': 'ZERO',
        'description': 'Set register contents to 0 ([r0] = 0)',
        'function': <function setToZero at 0x7f48ba2fe0d0>,
        'symbol': 'z',
        'type': 'set'},
    {   'arg count': 1,
        'code': 'UNIT',
        'description': 'Set register contents to 1 ([r0] = 1)',
        'function': <function setToOne at 0x7f48ba2fe158>,
        'symbol': 'u',
        'type': 'set'},
    {   'arg count': 1,
        'code': 'RAND',
        'description': 'Sets [r0] to a random valid address.',
        'function': <function setToRand at 0x7f48ba2fe268>,
        'symbol': 'r',
        'type': 'set'},
    {   'arg count': 1,
        'code': 'NULL',
        'description': 'Sets [r0] to null.',
        'function': <function setToNull at 0x7f48ba2fe1e0>,
        'symbol': 'n',
        'type': 'set'},
    {   'arg count': 2,
        'code': 'CPYr',
        'description': 'Copy [r0] into r1',
        'function': <function copy at 0x7f48ba2fe378>,
        'symbol': '"',
        'type': 'clone/swap'},
    {   'arg count': 2,
        'code': 'SWPr',
        'description': 'Swap [r0] into r1 and [r1] into r0',
        'function': <function swap at 0x7f48ba2fe400>,
        'symbol': 'x',
        'type': 'clone/swap'},
    {   'arg count': 1,
        'code': 'POPr',
        'description': 'Pop into r0 a value from the first stack found '
                       'immediately after the first matching lock found after '
                       'this executor',
        'function': <function pop at 0x7f48ba2fe510>,
        'symbol': '↑',
        'type': 'stack'},
    {   'arg count': 1,
        'code': 'PSHr',
        'description': 'Push [r0] to the first stack found immediately after '
                       'the first matching lock found after this executor',
        'function': <function push at 0x7f48ba2fe488>,
        'symbol': '↓',
        'type': 'stack'},
    {   'arg count': 0,
        'code': 'CLAM',
        'description': "A claim marker, used to stake an executor's territory; "
                       'the boundaries of an organism. Also functions as lock.',
        'function': <function noOp at 0x7f48ba2fd268>,
        'symbol': 'T',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'CLMk',
        'description': 'A claim marker key, matches to a claim marker.',
        'function': <function noOp at 0x7f48ba2fd268>,
        'symbol': 't',
        'type': 'key'},
    {   'arg count': 2,
        'code': 'MNTR',
        'description': 'Sets [r0] to the address most recently checked within '
                       "this executor's claim boundaries, and [r1] to the "
                       'address of the instruction that checked it. Both are '
                       'set to null if no checks have been recently made.',
        'function': <function monitor at 0x7f48ba2fe620>,
        'symbol': '~',
        'type': 'monitor'},
    {   'arg count': 2,
        'code': 'ADRS',
        'description': 'Swap the memory block at [r0] with the block at [r1]',
        'function': <function swapMemoryBlocks at 0x7f48ba2fe598>,
        'symbol': '$',
        'type': 'memwrite'},
    {   'arg count': 1,
        'code': 'INIT',
        'description': 'Initializes the executor at the address contained in '
                       'r0. (Sets it to non-dormant and sets its instruction '
                       'pointer to itself.)',
        'function': <function initializeExecutor at 0x7f48ba2fe6a8>,
        'symbol': ':',
        'type': 'init'},
    {   'arg count': 1,
        'code': 'DINT',
        'description': 'Denitializes the executor at the address contained in '
                       'r0. (Sets it to dormant.)',
        'function': <function denitializeExecutor at 0x7f48ba2fe730>,
        'symbol': '.',
        'type': 'deinit'},
    {   'arg count': 0,
        'code': 'KEYA',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f48ba2fd268>,
        'symbol': 'a',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYB',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f48ba2fd268>,
        'symbol': 'b',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYC',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f48ba2fd268>,
        'symbol': 'c',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYD',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f48ba2fd268>,
        'symbol': 'd',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYE',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f48ba2fd268>,
        'symbol': 'e',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYF',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f48ba2fd268>,
        'symbol': 'f',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYG',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f48ba2fd268>,
        'symbol': 'g',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYH',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f48ba2fd268>,
        'symbol': 'h',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYI',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f48ba2fd268>,
        'symbol': 'i',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYJ',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f48ba2fd268>,
        'symbol': 'j',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYK',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f48ba2fd268>,
        'symbol': 'k',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYL',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f48ba2fd268>,
        'symbol': 'l',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYM',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f48ba2fd268>,
        'symbol': 'm',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'LOKA',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f48ba2fd268>,
        'symbol': 'A',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKB',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f48ba2fd268>,
        'symbol': 'B',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKC',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f48ba2fd268>,
        'symbol': 'C',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKD',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f48ba2fd268>,
        'symbol': 'D',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKE',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f48ba2fd268>,
        'symbol': 'E',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKF',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f48ba2fd268>,
        'symbol': 'F',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKG',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f48ba2fd268>,
        'symbol': 'G',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKH',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f48ba2fd268>,
        'symbol': 'H',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKI',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f48ba2fd268>,
        'symbol': 'I',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKJ',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f48ba2fd268>,
        'symbol': 'J',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKK',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f48ba2fd268>,
        'symbol': 'K',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKL',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f48ba2fd268>,
        'symbol': 'L',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKM',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f48ba2fd268>,
        'symbol': 'M',
        'type': 'lock'}]


INITIAL SOUP
»(u!"2i+%+[v7[*B?BG÷ u#CrlzBT◈▯#####[t1]t3r"04B>‽2)c(tC$2=13)d^^1(bD^4:4(tTb ‽ge
5<Hhe#L^TmiAThG‽6g^*÷t↑cxL[↓d◇<6»÷~ 9m6D|iv.◇~▯CL]:r:ht$*[TMG↑$GgbJx2▯eh▯F7rt?8-
g+a9‽⸘: ^j)[Fl0ctltCD⊕)⸘uM-#K567+4dl5÷=B#||tlH]⊕Cd⸘)⊕#xK0(m$⸘vI÷KBB◇a5?IvGvl]*n+
B»M0g[:KI#*JHA7MTb"$Eb27I÷v&^GEL*⊕t 1b*4~!FArd11 (I.*v#M3a+J:‽[(~C.]xz.Fe. 3▯↑kv
+Jf2:zEebd÷-k⊕KM2◇?#&[6JDcHr««B##H 0$↑7↓im%I=Fm?◇b⊕»=Ag÷[D4L7jI+f.2n(3J⸘=~+a6.u8
d^8ub0»07+082MG7Cgj◇C0.:l&n(⸘6E*)aA6a1vM÷$4↑9.2↓F(?DM|k^-70M»FL↑Lk<J◇Mdk1nME5[G 
ua.n# DK(+r>▯⸘8In22][DEhjk.t4&-:⸘%9(rdBCM0nf÷)⸘[]=[l..M<◇&e4nK!d"G)>4-"t -<HT0i)
eK »!-zkc%L6((2cD+j>f#>mBjiv4ImjKcD=‽¿FF7L&«3lJ«hB^k◇dK5827^~8?B»<v◇T]c(«e‽.-1]I
&?¿3#$◇uKTC:⸘ln⸘ABh&vCc huGkkT&>l«EF*÷¿= 9gB"M~E|^D↓.> 8▯K9^3 »E÷«meDv"$*AE¿+◇«T
9=GMBx:]l▯E<◇⊕I7m9LEG2fc[^‽<Bk!JmD▯Ie»0)▯)5v"«⸘9f]AKmvKAv?‽f5»&*d‽:▯"‽.j9GutC÷Td
|EG-6<⸘▯«?5A?4↓=&6‽2»ig[8j+8g=B¿8 DG⊕4aLM+E>39M%kE▯▯k)x0gi)8ia800t^FD[#E‽3÷]->e:
t⸘F n0)j0:i-j*▯L<]*n.J5&↑F▯x~b:%[BjILI%‽K5⸘&"=+Buf1e=»AB7C-%&%4M MDBJ(l5 KE*D0G=
6nFt#[B47laMvn!Hx÷v~↑«A[)↓z◇"-+EG⊕↓id"*5

BODIES:
22	#`0`
29	◈`29`
30	▯`8191`
31	#`0`
32	#`0`
33	#`0`
34	#`0`
35	#`0`
85	#`0`
109	◇`None`
124	◇`None`
126	▯`8191`
149	▯`8191`
152	▯`8191`
187	#`0`
200	#`0`
213	#`0`
227	◇`None`
249	#`0`
294	#`0`
316	▯`8191`
337	◇`None`
339	#`0`
351	#`0`
352	#`0`
368	◇`None`
419	◇`None`
468	◇`None`
484	#`0`
492	▯`8191`
536	◇`None`
581	#`0`
612	◇`None`
627	◇`None`
644	#`0`
646	◇`None`
696	▯`8191`
717	◇`None`
729	▯`8191`
732	◇`None`
754	▯`8191`
760	▯`8191`
787	▯`8191`
807	▯`8191`
850	▯`8191`
851	▯`8191`
870	#`0`
894	▯`8191`
906	▯`8191`
964	#`0`
987	◇`None`

	
cycle 1
30	▯`8190`	BODY
29	◈`30`	BODY

	
cycle 2
30	▯`8189`	BODY
29	◈`31`	BODY

	
cycle 3
30	▯`8188`	BODY
31	#`0`	BODY
30	▯`8188`	BODY
29	◈`32`	BODY

	
cycle 4
30	▯`8187`	BODY
32	#`0`	BODY
30	▯`8187`	BODY
29	◈`33`	BODY

	
cycle 5
30	▯`8186`	BODY
33	#`0`	BODY
30	▯`8186`	BODY
29	◈`34`	BODY

	
cycle 6
30	▯`8185`	BODY
34	#`0`	BODY
30	▯`8185`	BODY
29	◈`35`	BODY

	
cycle 7
30	▯`8184`	BODY
35	#`0`	BODY
30	▯`8184`	BODY
29	◈`36`	BODY

	
cycle 8
30	▯`8155`	BODY
32	#`28`	BODY
30	▯`8155`	BODY
29	◈`37`	BODY

	
cycle 9
30	▯`8154`	BODY
29	◈`38`	BODY

	
cycle 10
30	▯`8153`	BODY
29	◈`39`	BODY

	
cycle 11
30	▯`8078`	BODY
34	#`74`	BODY
30	▯`8078`	BODY
29	◈`40`	BODY

	
cycle 12
30	▯`8077`	BODY
29	◈`41`	BODY

	
cycle 13
30	▯`8076`	BODY
29	◈`42`	BODY

	
cycle 14
30	▯`7222`	BODY
31	#`853`	BODY
30	▯`7222`	BODY
29	◈`43`	BODY

	
cycle 15
30	▯`6368`	BODY
35	#`853`	BODY
30	▯`6368`	BODY
29	◈`44`	BODY

	
cycle 16
30	▯`6367`	BODY
29	◈`45`	BODY

	
cycle 17
30	▯`6366`	BODY
29	◈`46`	BODY

	
cycle 18
30	▯`6365`	BODY
29	◈`47`	BODY

	
cycle 19
30	▯`6364`	BODY
30	▯`6364`	BODY
29	◈`48`	BODY
33	_`None`	BLOCK

	
cycle 20
30	▯`6361`	BODY
29	◈`51`	BODY

	
cycle 21
30	▯`6360`	BODY
29	◈`52`	BODY

	
cycle 22
30	▯`6384`	BODY
29	◈`28`	BODY

	
cycle 23
30	▯`6383`	BODY
29	◈`29`	BODY

	
cycle 24
30	▯`6382`	BODY
29	◈`30`	BODY

	
cycle 25
30	▯`6381`	BODY
29	◈`31`	BODY

	
cycle 26
30	▯`7233`	BODY
31	#`0`	BODY
30	▯`7233`	BODY
29	◈`32`	BODY

	
cycle 27
30	▯`7260`	BODY
32	#`0`	BODY
30	▯`7260`	BODY
29	◈`33`	BODY

	
cycle 28
30	▯`7259`	BODY
30	▯`7259`	BODY
29	◈`34`	BODY
33	#`0`	BLOCK

	
cycle 29
30	▯`7332`	BODY
34	#`0`	BODY
30	▯`7332`	BODY
29	◈`35`	BODY

	
cycle 30
30	▯`8184`	BODY
35	#`0`	BODY
30	▯`8184`	BODY
29	◈`36`	BODY

	
cycle 31
30	▯`8155`	BODY
32	#`28`	BODY
30	▯`8155`	BODY
29	◈`37`	BODY

	
cycle 32
30	▯`8154`	BODY
29	◈`38`	BODY

	
cycle 33
30	▯`8153`	BODY
29	◈`39`	BODY

	
cycle 34
30	▯`8078`	BODY
34	#`74`	BODY
30	▯`8078`	BODY
29	◈`40`	BODY

	
cycle 35
30	▯`8077`	BODY
29	◈`41`	BODY

	
cycle 36
30	▯`8076`	BODY
29	◈`42`	BODY

	
cycle 37
30	▯`8020`	BODY
31	#`55`	BODY
30	▯`8020`	BODY
29	◈`43`	BODY

	
cycle 38
30	▯`7964`	BODY
35	#`55`	BODY
30	▯`7964`	BODY
29	◈`44`	BODY

	
cycle 39
30	▯`7963`	BODY
29	◈`45`	BODY

	
cycle 40
30	▯`7962`	BODY
29	◈`46`	BODY

	
cycle 41
30	▯`7961`	BODY
29	◈`47`	BODY

	
cycle 42
30	▯`7886`	BODY
33	#`74`	BODY
30	▯`7886`	BODY
29	◈`48`	BODY

	
cycle 43
30	▯`7885`	BODY
29	◈`49`	BODY

	
cycle 44
30	▯`7884`	BODY
29	◈`50`	BODY

	
cycle 45
30	▯`7880`	BODY
29	◈`54`	BODY

	
cycle 46
30	▯`7879`	BODY
29	◈`55`	BODY

	
cycle 47
30	▯`7878`	BODY
29	◈`56`	BODY
55	T	BLOCK
74	$	BLOCK

	
cycle 48
30	▯`7877`	BODY
29	◈`57`	BODY

	
cycle 49
30	▯`7873`	BODY
29	◈`61`	BODY

	
cycle 50
30	▯`7872`	BODY
29	◈`62`	BODY

	
cycle 51
30	▯`7870`	BODY
31	#`56`	BODY
30	▯`7870`	BODY
29	◈`63`	BODY

	
cycle 52
30	▯`7868`	BODY
32	#`29`	BODY
30	▯`7868`	BODY
29	◈`64`	BODY

	
cycle 53
30	▯`7867`	BODY
29	◈`65`	BODY

	
cycle 54
30	▯`7886`	BODY
29	◈`46`	BODY

	
cycle 55
30	▯`7885`	BODY
29	◈`47`	BODY

	
cycle 56
30	▯`7849`	BODY
33	#`109`	BODY
30	▯`7849`	BODY
29	◈`48`	BODY

	
cycle 57
30	▯`7848`	BODY
29	◈`49`	BODY

	
cycle 58
30	▯`7847`	BODY
29	◈`50`	BODY

	
cycle 59
30	▯`7843`	BODY
29	◈`54`	BODY

	
cycle 60
30	▯`7842`	BODY
29	◈`55`	BODY

	
cycle 61
30	▯`7841`	BODY
29	◈`56`	BODY

	
cycle 62
30	▯`7840`	BODY
29	◈`57`	BODY

	
cycle 63
30	▯`7836`	BODY
29	◈`61`	BODY

	
cycle 64
30	▯`7835`	BODY
29	◈`62`	BODY

	
cycle 65
30	▯`7833`	BODY
31	#`57`	BODY
30	▯`7833`	BODY
29	◈`63`	BODY

	
cycle 66
30	▯`7831`	BODY
32	#`30`	BODY
30	▯`7831`	BODY
29	◈`64`	BODY

	
cycle 67
30	▯`7830`	BODY
29	◈`65`	BODY

	
cycle 68
30	▯`7849`	BODY
29	◈`46`	BODY

	
cycle 69
30	▯`7848`	BODY
29	◈`47`	BODY

	
cycle 70
30	▯`7830`	BODY
33	#`126`	BODY
30	▯`7830`	BODY
29	◈`48`	BODY

	
cycle 71
30	▯`7829`	BODY
29	◈`49`	BODY

	
cycle 72
30	▯`7828`	BODY
29	◈`50`	BODY

	
cycle 73
30	▯`7824`	BODY
29	◈`54`	BODY

	
cycle 74
30	▯`7823`	BODY
29	◈`55`	BODY

	
cycle 75
30	▯`7822`	BODY
29	◈`56`	BODY

	
cycle 76
30	▯`7821`	BODY
29	◈`57`	BODY

	
cycle 77
30	▯`7817`	BODY
29	◈`61`	BODY

	
cycle 78
30	▯`7816`	BODY
29	◈`62`	BODY

	
cycle 79
30	▯`7814`	BODY
31	#`58`	BODY
30	▯`7814`	BODY
29	◈`63`	BODY

	
cycle 80
30	▯`7812`	BODY
32	#`31`	BODY
30	▯`7812`	BODY
29	◈`64`	BODY

	
cycle 81
30	▯`7811`	BODY
29	◈`65`	BODY

	
cycle 82
30	▯`7830`	BODY
29	◈`46`	BODY

	
cycle 83
30	▯`7829`	BODY
29	◈`47`	BODY

	
cycle 84
30	▯`7869`	BODY
33	#`85`	BODY
30	▯`7869`	BODY
29	◈`48`	BODY

	
cycle 85
30	▯`7868`	BODY
29	◈`49`	BODY

	
cycle 86
30	▯`7867`	BODY
29	◈`50`	BODY

	
cycle 87
30	▯`7863`	BODY
29	◈`54`	BODY

	
cycle 88
30	▯`7862`	BODY
29	◈`55`	BODY

	
cycle 89
30	▯`7861`	BODY
29	◈`56`	BODY

	
cycle 90
30	▯`7860`	BODY
29	◈`57`	BODY

	
cycle 91
30	▯`7856`	BODY
29	◈`61`	BODY

	
cycle 92
30	▯`7855`	BODY
29	◈`62`	BODY

	
cycle 93
30	▯`7853`	BODY
31	#`59`	BODY
30	▯`7853`	BODY
29	◈`63`	BODY

	
cycle 94
30	▯`7851`	BODY
32	#`32`	BODY
30	▯`7851`	BODY
29	◈`64`	BODY

	
cycle 95
30	▯`7850`	BODY
29	◈`65`	BODY

	
cycle 96
30	▯`7869`	BODY
29	◈`46`	BODY

	
cycle 97
30	▯`7868`	BODY
29	◈`47`	BODY

	
cycle 98
30	▯`7867`	BODY
33	#`85`	BODY
30	▯`7867`	BODY
29	◈`48`	BODY

	
cycle 99
30	▯`7866`	BODY
29	◈`49`	BODY

	
cycle 100
30	▯`7865`	BODY
29	◈`50`	BODY

	
cycle 101
30	▯`7861`	BODY
29	◈`54`	BODY

	
cycle 102
30	▯`7860`	BODY
29	◈`55`	BODY

	
cycle 103
30	▯`7859`	BODY
29	◈`56`	BODY

	
cycle 104
30	▯`7858`	BODY
29	◈`57`	BODY

	
cycle 105
30	▯`7854`	BODY
29	◈`61`	BODY

	
cycle 106
30	▯`7853`	BODY
29	◈`62`	BODY

	
cycle 107
30	▯`7851`	BODY
31	#`60`	BODY
30	▯`7851`	BODY
29	◈`63`	BODY
