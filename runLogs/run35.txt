body len = 13
header len = 3
body opener = "`"
body closer = "`"
OPCODE DATA

Flag Names: ['special', 'isRegister', 'isNonNull']

Flag Codes:
{   '000': {   'code': '0000',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f87b7918840>,
               'name': 'uninitialized block',
               'symbol': '░',
               'type': 'uninitialized'},
    '001': {   'code': None,
               'default body': None,
               'execute?': True,
               'interpret body': <function Opcodes.<lambda> at 0x7f87b7918bf8>,
               'name': 'instruction block',
               'symbol': None,
               'type': 'instruction'},
    '010': {   'code': 'REGn',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f87b7918950>,
               'name': 'register with a null value',
               'symbol': '_',
               'type': 'register'},
    '011': {   'code': 'REG#',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f87b79188c8>,
               'name': 'register',
               'symbol': '#',
               'type': 'register'},
    '100': {   'code': 'EXEn',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f87b7918b70>,
               'name': 'dormant executor',
               'symbol': '◇',
               'type': 'executor'},
    '101': {   'code': 'EXEC',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f87b7918ae8>,
               'name': 'executor',
               'symbol': '◈',
               'type': 'executor'},
    '110': {   'code': 'DMPn',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f87b7918a60>,
               'name': 'dump register with a null value',
               'symbol': '█',
               'type': 'dump register'},
    '111': {   'code': 'DUMP',
               'default body': '1111111111111',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f87b79189d8>,
               'name': 'dump register',
               'symbol': '▯',
               'type': 'dump register'}}


Instruction Codes:
[   {   'arg count': 0,
        'code': 'NOOP',
        'description': 'No operation',
        'function': <function noOp at 0x7f87b79172f0>,
        'symbol': ' ',
        'type': 'noop'},
    {   'arg count': 0,
        'code': 'ARG0',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f87b79172f0>,
        'symbol': '0',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG1',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f87b79172f0>,
        'symbol': '1',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG2',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f87b79172f0>,
        'symbol': '2',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG3',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f87b79172f0>,
        'symbol': '3',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG4',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f87b79172f0>,
        'symbol': '4',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG5',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f87b79172f0>,
        'symbol': '5',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG6',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f87b79172f0>,
        'symbol': '6',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG7',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f87b79172f0>,
        'symbol': '7',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG8',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f87b79172f0>,
        'symbol': '8',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG9',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f87b79172f0>,
        'symbol': '9',
        'type': 'arg'},
    {   'arg count': 1,
        'code': 'JMPR',
        'description': 'Jump to the address in r0.',
        'function': <function jumpR at 0x7f87b7917378>,
        'symbol': '%',
        'type': 'jump'},
    {   'arg count': 0,
        'code': 'JMPB',
        'description': 'Jump backwards to the first lock matching the '
                       'following key',
        'function': <function jumpB at 0x7f87b7917400>,
        'symbol': '(',
        'type': 'jump'},
    {   'arg count': 0,
        'code': 'JMPF',
        'description': 'Jump forwards to the first lock matching the following '
                       'key',
        'function': <function jumpF at 0x7f87b7917488>,
        'symbol': ')',
        'type': 'jump'},
    {   'arg count': 1,
        'code': 'ADRB',
        'description': 'Look backwards to the first lock matching the '
                       'following key, store its address in r0',
        'function': <function addressOfJumpB at 0x7f87b7917510>,
        'symbol': '[',
        'type': 'lookaround'},
    {   'arg count': 1,
        'code': 'ADRF',
        'description': 'Look forwards to the first lock matching the following '
                       'key, store its address in r0',
        'function': <function addressOfJumpF at 0x7f87b7917598>,
        'symbol': ']',
        'type': 'lookaround'},
    {   'arg count': 3,
        'code': 'SERB',
        'description': 'Starting from [r0], look backwards for the first '
                       'instruction matching the instruction at [r1], store '
                       'its address in r2',
        'function': <function addressOfInstructionB at 0x7f87b7917620>,
        'symbol': '<',
        'type': 'lookaround'},
    {   'arg count': 3,
        'code': 'SERF',
        'description': 'Starting from [r0], look forwards for the first '
                       'instruction matching the instruction at [r1], store '
                       'its address in r2',
        'function': <function addressOfInstructionF at 0x7f87b79176a8>,
        'symbol': '>',
        'type': 'lookaround'},
    {   'arg count': 1,
        'code': 'IFNZ',
        'description': 'if [r0] is not 0, execute the following instruction, '
                       'otherwise, skip to the next non-argument instruction',
        'function': <function skipIfZero at 0x7f87b7917730>,
        'symbol': '?',
        'type': 'if'},
    {   'arg count': 1,
        'code': 'IFNN',
        'description': 'if [r0] is not null, execute the following '
                       'instruction, otherwise, skip to the next non-argument '
                       'instruction',
        'function': <function skipIfNull at 0x7f87b79177b8>,
        'symbol': '‽',
        'type': 'if'},
    {   'arg count': 0,
        'code': 'IFDZ',
        'description': 'if the instruction at the address in r0 is the same as '
                       "the instruction at the address in r1 (or if they're "
                       'both registers, dump registers, or executors), execute '
                       'the next instruction, otherwise, skip to the next '
                       'non-argument instruction',
        'function': <function skipIfDumpIsZero at 0x7f87b7917840>,
        'symbol': '¿',
        'type': 'if'},
    {   'arg count': 2,
        'code': 'IFBE',
        'description': 'if the instruction at the address in r0 is the same as '
                       "the instruction at the address in r1 (or if they're "
                       'both registers, dump registers, or executors), execute '
                       'the next instruction, otherwise, skip to the next '
                       'non-argument instruction',
        'function': <function skipUnlessEquiv at 0x7f87b79178c8>,
        'symbol': '⸘',
        'type': 'if'},
    {   'arg count': 2,
        'code': 'IFEQ',
        'description': 'if [r0] == [r1], execute the next instruction, '
                       'otherwise, skip to the next non-argument instruction',
        'function': <function skipUnlessEqual at 0x7f87b7917950>,
        'symbol': '=',
        'type': 'if'},
    {   'arg count': 3,
        'code': 'ADDr',
        'description': "Add registers' contents ([r0] = [r1] + [r2])",
        'function': <function add at 0x7f87b79179d8>,
        'symbol': '+',
        'type': 'arithmetic'},
    {   'arg count': 3,
        'code': 'SUBr',
        'description': "Subtract registers' contents ([r0] = [r1] - [r2])",
        'function': <function subtract at 0x7f87b7917a60>,
        'symbol': '-',
        'type': 'arithmetic'},
    {   'arg count': 3,
        'code': 'MULr',
        'description': "Multiply registers' contents ([r0] = [r1] * [r2])",
        'function': <function multiply at 0x7f87b7917ae8>,
        'symbol': '*',
        'type': 'arithmetic'},
    {   'arg count': 3,
        'code': 'DIVr',
        'description': "Divide registers' contents ([r0] = [r1] ÷ [r2])",
        'function': <function divide at 0x7f87b7917b70>,
        'symbol': '÷',
        'type': 'arithmetic'},
    {   'arg count': 1,
        'code': 'INCr',
        'description': "Increment register's contents ([r0]++)",
        'function': <function increment at 0x7f87b7917e18>,
        'symbol': '^',
        'type': 'arithmetic'},
    {   'arg count': 1,
        'code': 'DECr',
        'description': "Decrement register's contents ([r0]--)",
        'function': <function decrement at 0x7f87b7917ea0>,
        'symbol': 'v',
        'type': 'arithmetic'},
    {   'arg count': 1,
        'code': 'NOTr',
        'description': "Bitwise NOT register's contents ([r0] = ![r0])",
        'function': <function bitwiseInverse at 0x7f87b7917f28>,
        'symbol': '!',
        'type': 'bitwise'},
    {   'arg count': 1,
        'code': 'SHFL',
        'description': "Bitwise left shift register's contents ([r0] = [r0] << "
                       '1)',
        'function': <function bitwiseShiftLeft at 0x7f87b7918048>,
        'symbol': '«',
        'type': 'bitwise'},
    {   'arg count': 1,
        'code': 'SHFR',
        'description': "Bitwise right shift register's contents ([r0] = [r0] "
                       '>> 1)',
        'function': <function bitwiseShiftRight at 0x7f87b79180d0>,
        'symbol': '»',
        'type': 'bitwise'},
    {   'arg count': 3,
        'code': 'ANDr',
        'description': "Bitwise AND register's contents ([r0] = [r1] & [r2])",
        'function': <function bitwiseAND at 0x7f87b7917bf8>,
        'symbol': '&',
        'type': 'bitwise'},
    {   'arg count': 3,
        'code': 'ORr-',
        'description': "Bitwise OR register's contents ([r0] = [r1] | [r2])",
        'function': <function bitwiseOR at 0x7f87b7917c80>,
        'symbol': '|',
        'type': 'bitwise'},
    {   'arg count': 3,
        'code': 'XORr',
        'description': "Bitwise XOR register's contents ([r0] = [r1] ^ [r2])",
        'function': <function bitwiseXOR at 0x7f87b7917d08>,
        'symbol': '⊕',
        'type': 'bitwise'},
    {   'arg count': 1,
        'code': 'ZERO',
        'description': 'Set register contents to 0 ([r0] = 0)',
        'function': <function setToZero at 0x7f87b7918158>,
        'symbol': 'z',
        'type': 'set'},
    {   'arg count': 1,
        'code': 'UNIT',
        'description': 'Set register contents to 1 ([r0] = 1)',
        'function': <function setToOne at 0x7f87b79181e0>,
        'symbol': 'u',
        'type': 'set'},
    {   'arg count': 1,
        'code': 'RAND',
        'description': 'Sets [r0] to a random valid address.',
        'function': <function setToRand at 0x7f87b79182f0>,
        'symbol': 'r',
        'type': 'set'},
    {   'arg count': 1,
        'code': 'NULL',
        'description': 'Sets [r0] to null.',
        'function': <function setToNull at 0x7f87b7918268>,
        'symbol': 'n',
        'type': 'set'},
    {   'arg count': 2,
        'code': 'CPYr',
        'description': 'Copy [r0] into r1',
        'function': <function copy at 0x7f87b7918400>,
        'symbol': '"',
        'type': 'clone/swap'},
    {   'arg count': 2,
        'code': 'SWPr',
        'description': 'Swap [r0] into r1 and [r1] into r0',
        'function': <function swap at 0x7f87b7918488>,
        'symbol': 'x',
        'type': 'clone/swap'},
    {   'arg count': 1,
        'code': 'POPr',
        'description': 'Pop into r0 a value from the first stack found '
                       'immediately after the first matching lock found after '
                       'this executor',
        'function': <function pop at 0x7f87b7918598>,
        'symbol': '↑',
        'type': 'stack'},
    {   'arg count': 1,
        'code': 'PSHr',
        'description': 'Push [r0] to the first stack found immediately after '
                       'the first matching lock found after this executor',
        'function': <function push at 0x7f87b7918510>,
        'symbol': '↓',
        'type': 'stack'},
    {   'arg count': 0,
        'code': 'CLAM',
        'description': "A claim marker, used to stake an executor's territory; "
                       'the boundaries of an organism. Also functions as lock.',
        'function': <function noOp at 0x7f87b79172f0>,
        'symbol': 'T',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'CLMk',
        'description': 'A claim marker key, matches to a claim marker.',
        'function': <function noOp at 0x7f87b79172f0>,
        'symbol': 't',
        'type': 'key'},
    {   'arg count': 2,
        'code': 'MNTR',
        'description': 'Sets [r0] to the address most recently checked within '
                       "this executor's claim boundaries, and [r1] to the "
                       'address of the instruction that checked it. Both are '
                       'set to null if no checks have been recently made.',
        'function': <function monitor at 0x7f87b79186a8>,
        'symbol': '~',
        'type': 'monitor'},
    {   'arg count': 2,
        'code': 'ADRS',
        'description': 'Swap the memory block at [r0] with the block at [r1]',
        'function': <function swapMemoryBlocks at 0x7f87b7918620>,
        'symbol': '$',
        'type': 'memwrite'},
    {   'arg count': 1,
        'code': 'INIT',
        'description': 'Initializes the executor at the address contained in '
                       'r0. (Sets it to non-dormant and sets its instruction '
                       'pointer to itself.)',
        'function': <function initializeExecutor at 0x7f87b7918730>,
        'symbol': ':',
        'type': 'init'},
    {   'arg count': 1,
        'code': 'DINT',
        'description': 'Denitializes the executor at the address contained in '
                       'r0. (Sets it to dormant.)',
        'function': <function denitializeExecutor at 0x7f87b79187b8>,
        'symbol': '.',
        'type': 'deinit'},
    {   'arg count': 0,
        'code': 'KEYA',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f87b79172f0>,
        'symbol': 'a',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYB',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f87b79172f0>,
        'symbol': 'b',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYC',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f87b79172f0>,
        'symbol': 'c',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYD',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f87b79172f0>,
        'symbol': 'd',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYE',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f87b79172f0>,
        'symbol': 'e',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYF',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f87b79172f0>,
        'symbol': 'f',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYG',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f87b79172f0>,
        'symbol': 'g',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYH',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f87b79172f0>,
        'symbol': 'h',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYI',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f87b79172f0>,
        'symbol': 'i',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYJ',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f87b79172f0>,
        'symbol': 'j',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYK',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f87b79172f0>,
        'symbol': 'k',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYL',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f87b79172f0>,
        'symbol': 'l',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYM',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f87b79172f0>,
        'symbol': 'm',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'LOKA',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f87b79172f0>,
        'symbol': 'A',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKB',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f87b79172f0>,
        'symbol': 'B',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKC',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f87b79172f0>,
        'symbol': 'C',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKD',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f87b79172f0>,
        'symbol': 'D',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKE',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f87b79172f0>,
        'symbol': 'E',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKF',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f87b79172f0>,
        'symbol': 'F',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKG',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f87b79172f0>,
        'symbol': 'G',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKH',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f87b79172f0>,
        'symbol': 'H',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKI',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f87b79172f0>,
        'symbol': 'I',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKJ',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f87b79172f0>,
        'symbol': 'J',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKK',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f87b79172f0>,
        'symbol': 'K',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKL',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f87b79172f0>,
        'symbol': 'L',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKM',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f87b79172f0>,
        'symbol': 'M',
        'type': 'lock'}]


INITIAL SOUP
?i÷cbG&~5gLH8&.J~8H.↓!¿<+:D3uv◇kEi83%= 6↓8K2.d‽f:>|K¿-"x&↓nBjjunK▯n÷m^m&↑4G~%¿]A
K .#+^‽f aL-16L=km[⸘EK$zx9:nM$¿#▯crhz÷I3u62k&DKK.T«f:r÷T◈▯#####[t1]t3r"04B>‽2)c(
tC$2=13)d^^1(bD^4:4(tTf◇<lmHk&C‽.x1#B1[◇]")I"+?4¿#>⊕EFh5ri0+.g↑JkBj‽<Ix21J7◇K-E4
T◇e[Bcvx◇ ^<↑#h&»:x¿th-.z4>)d$c31-«4)↓h~z9><=uT+TlhDHF]K(n0xx▯mCAIC4#(~iz8c÷9(1%
u4:-▯¿dh7!H*«a>8G▯%)⸘%)IC◇]u)zd(z+▯m|3fC?nf>m÷li=F>B⊕▯n‽x▯:¿+-0⊕G0Ecru"aLEh?h>IJ
«BG|^a0÷↑↓<bA◇:8⸘1t&9Jmi"u$gLE<]dzH↑jm2]a?d◇↑H↑‽1I[&.-K&7ff⸘&z|⊕!td~◇Il^hlc2~1i«
DHL>>‽&?vtjaD:(⊕-8▯)9>%6"kB#.u▯+&fBCh6=c(Am295zFj8]8«):0807*◇b!$a4A?«#⊕4⊕^|h~%>¿
HB2b285⸘&n!7BM[)0«f!A0A^.|hM&¿fT)zD%l-⸘m?5L*6Dhhi¿bvL⊕gCb5a&CE$» IE"<<(k?%L.Ke7D
~alnxv<[>|4L#m▯hnM^k9DA[⸘&TBCueE4Jhr-e▯↓▯?-5|lJACu.rC!÷8T*1IbfkiC¿4kj»C1c< =%%◇&
 Bn1b1rJ[E⸘>2mBE↓|<Tk70r◇mrH4J=z»2↑"‽«i-#A+am9z»5%dh H↑G <AG^Jt4v|]g0t^J$|^Lv.u5
e⊕nt«"iI%▯Tc7⸘CDJnj]]a↑)DMB")7e4J7j⸘↑dF*cGicF"*|i÷:4uj*H↓288&»ctB↓L|zrCL 1B$dgD+
Lz"↑F*>v[u5<:bz⸘n7=j]Mk]Ga=Eg)d*D⸘e:vdx↑Jg5i=+E-uB%-md"$(Jz4jr◇7:⸘4Ie#j8#!i÷ bmA
JH]A‽kH7.»u¿÷») 2↓)◇]48:JCB«]aug2Jt(↓c¿÷

BODIES:
30	◇`None`
65	▯`8191`
83	#`0`
111	#`0`
112	▯`8191`
136	◈`136`
137	▯`8191`
138	#`0`
139	#`0`
140	#`0`
141	#`0`
142	#`0`
183	◇`None`
195	#`0`
199	◇`None`
209	#`0`
235	◇`None`
241	◇`None`
248	◇`None`
253	#`0`
301	▯`8191`
308	#`0`
324	▯`8191`
337	▯`8191`
345	◇`None`
354	▯`8191`
373	▯`8191`
377	▯`8191`
413	◇`None`
443	◇`None`
468	◇`None`
498	▯`8191`
507	#`0`
510	▯`8191`
540	◇`None`
549	#`0`
652	#`0`
654	▯`8191`
678	▯`8191`
680	▯`8191`
718	◇`None`
744	◇`None`
760	#`0`
809	▯`8191`
942	◇`None`
949	#`0`
952	#`0`
979	◇`None`

	
cycle 1
137	▯`8190`	BODY
136	◈`137`	BODY

	
cycle 2
137	▯`8189`	BODY
136	◈`138`	BODY

	
cycle 3
137	▯`8188`	BODY
138	#`0`	BODY
137	▯`8188`	BODY
136	◈`139`	BODY

	
cycle 4
137	▯`8187`	BODY
139	#`0`	BODY
137	▯`8187`	BODY
136	◈`140`	BODY

	
cycle 5
137	▯`8186`	BODY
140	#`0`	BODY
137	▯`8186`	BODY
136	◈`141`	BODY

	
cycle 6
137	▯`8185`	BODY
141	#`0`	BODY
137	▯`8185`	BODY
136	◈`142`	BODY

	
cycle 7
137	▯`8184`	BODY
142	#`0`	BODY
137	▯`8184`	BODY
136	◈`143`	BODY

	
cycle 8
137	▯`8048`	BODY
139	#`135`	BODY
137	▯`8048`	BODY
136	◈`144`	BODY

	
cycle 9
137	▯`8047`	BODY
136	◈`145`	BODY

	
cycle 10
137	▯`8046`	BODY
136	◈`146`	BODY

	
cycle 11
137	▯`7864`	BODY
141	#`181`	BODY
137	▯`7864`	BODY
136	◈`147`	BODY

	
cycle 12
137	▯`7863`	BODY
136	◈`148`	BODY

	
cycle 13
137	▯`7862`	BODY
136	◈`149`	BODY

	
cycle 14
137	▯`7043`	BODY
138	#`818`	BODY
137	▯`7043`	BODY
136	◈`150`	BODY

	
cycle 15
137	▯`6224`	BODY
142	#`818`	BODY
137	▯`6224`	BODY
136	◈`151`	BODY

	
cycle 16
137	▯`6223`	BODY
136	◈`152`	BODY

	
cycle 17
137	▯`6222`	BODY
136	◈`153`	BODY

	
cycle 18
137	▯`6221`	BODY
136	◈`154`	BODY

	
cycle 19
137	▯`6220`	BODY
137	▯`6220`	BODY
136	◈`155`	BODY
140	_`None`	BLOCK

	
cycle 20
137	▯`6217`	BODY
136	◈`158`	BODY

	
cycle 21
137	▯`6216`	BODY
136	◈`159`	BODY

	
cycle 22
137	▯`6240`	BODY
136	◈`135`	BODY

	
cycle 23
137	▯`6239`	BODY
136	◈`136`	BODY

	
cycle 24
137	▯`6238`	BODY
136	◈`137`	BODY

	
cycle 25
137	▯`6237`	BODY
136	◈`138`	BODY

	
cycle 26
137	▯`7054`	BODY
138	#`0`	BODY
137	▯`7054`	BODY
136	◈`139`	BODY

	
cycle 27
137	▯`7188`	BODY
139	#`0`	BODY
137	▯`7188`	BODY
136	◈`140`	BODY

	
cycle 28
137	▯`7187`	BODY
137	▯`7187`	BODY
136	◈`141`	BODY
140	#`0`	BLOCK

	
cycle 29
137	▯`7367`	BODY
141	#`0`	BODY
137	▯`7367`	BODY
136	◈`142`	BODY

	
cycle 30
137	▯`8184`	BODY
142	#`0`	BODY
137	▯`8184`	BODY
136	◈`143`	BODY

	
cycle 31
137	▯`8048`	BODY
139	#`135`	BODY
137	▯`8048`	BODY
136	◈`144`	BODY

	
cycle 32
137	▯`8047`	BODY
136	◈`145`	BODY

	
cycle 33
137	▯`8046`	BODY
136	◈`146`	BODY

	
cycle 34
137	▯`7864`	BODY
141	#`181`	BODY
137	▯`7864`	BODY
136	◈`147`	BODY

	
cycle 35
137	▯`7863`	BODY
136	◈`148`	BODY

	
cycle 36
137	▯`7862`	BODY
136	◈`149`	BODY

	
cycle 37
137	▯`7794`	BODY
138	#`67`	BODY
137	▯`7794`	BODY
136	◈`150`	BODY

	
cycle 38
137	▯`7726`	BODY
142	#`67`	BODY
137	▯`7726`	BODY
136	◈`151`	BODY

	
cycle 39
137	▯`7725`	BODY
136	◈`152`	BODY

	
cycle 40
137	▯`7724`	BODY
136	◈`153`	BODY

	
cycle 41
137	▯`7723`	BODY
136	◈`154`	BODY

	
cycle 42
137	▯`7593`	BODY
140	#`129`	BODY
137	▯`7593`	BODY
136	◈`155`	BODY

	
cycle 43
137	▯`7592`	BODY
136	◈`156`	BODY

	
cycle 44
137	▯`7591`	BODY
136	◈`157`	BODY

	
cycle 45
137	▯`7587`	BODY
136	◈`161`	BODY

	
cycle 46
137	▯`7586`	BODY
136	◈`162`	BODY

	
cycle 47
137	▯`7585`	BODY
136	◈`163`	BODY
67	T	BLOCK
129	÷	BLOCK

	
cycle 48
137	▯`7584`	BODY
136	◈`164`	BODY

	
cycle 49
137	▯`7580`	BODY
136	◈`168`	BODY

	
cycle 50
137	▯`7579`	BODY
136	◈`169`	BODY

	
cycle 51
137	▯`7577`	BODY
138	#`68`	BODY
137	▯`7577`	BODY
136	◈`170`	BODY

	
cycle 52
137	▯`7575`	BODY
139	#`136`	BODY
137	▯`7575`	BODY
136	◈`171`	BODY

	
cycle 53
137	▯`7574`	BODY
136	◈`172`	BODY

	
cycle 54
137	▯`7593`	BODY
136	◈`153`	BODY

	
cycle 55
137	▯`7592`	BODY
136	◈`154`	BODY

	
cycle 56
137	▯`7584`	BODY
140	#`136`	BODY
137	▯`7584`	BODY
136	◈`155`	BODY

	
cycle 57
137	▯`7583`	BODY
136	◈`156`	BODY

	
cycle 58
137	▯`7582`	BODY
136	◈`157`	BODY

	
cycle 59
137	▯`7578`	BODY
136	◈`161`	BODY

	
cycle 60
137	▯`7577`	BODY
136	◈`162`	BODY

	
cycle 61
68	◈`162`	BLOCK
136	◇`None`	BLOCK
136	◇`None`	BLOCK
