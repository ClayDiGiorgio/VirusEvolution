body len = 13
header len = 3
body opener = "`"
body closer = "`"
OPCODE DATA

Flag Names: ['special', 'isRegister', 'isNonNull']

Flag Codes:
{   '000': {   'code': '0000',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7fe3b001c840>,
               'name': 'uninitialized block',
               'symbol': '░',
               'type': 'uninitialized'},
    '001': {   'code': None,
               'default body': None,
               'execute?': True,
               'interpret body': <function Opcodes.<lambda> at 0x7fe3b001cbf8>,
               'name': 'instruction block',
               'symbol': None,
               'type': 'instruction'},
    '010': {   'code': 'REGn',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7fe3b001c950>,
               'name': 'register with a null value',
               'symbol': '_',
               'type': 'register'},
    '011': {   'code': 'REG#',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7fe3b001c8c8>,
               'name': 'register',
               'symbol': '#',
               'type': 'register'},
    '100': {   'code': 'EXEn',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7fe3b001cb70>,
               'name': 'dormant executor',
               'symbol': '◇',
               'type': 'executor'},
    '101': {   'code': 'EXEC',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7fe3b001cae8>,
               'name': 'executor',
               'symbol': '◈',
               'type': 'executor'},
    '110': {   'code': 'DMPn',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7fe3b001ca60>,
               'name': 'dump register with a null value',
               'symbol': '█',
               'type': 'dump register'},
    '111': {   'code': 'DUMP',
               'default body': '1111111111111',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7fe3b001c9d8>,
               'name': 'dump register',
               'symbol': '▯',
               'type': 'dump register'}}


Instruction Codes:
[   {   'arg count': 0,
        'code': 'NOOP',
        'description': 'No operation',
        'function': <function noOp at 0x7fe3b001b2f0>,
        'symbol': ' ',
        'type': 'noop'},
    {   'arg count': 0,
        'code': 'ARG0',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7fe3b001b2f0>,
        'symbol': '0',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG1',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7fe3b001b2f0>,
        'symbol': '1',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG2',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7fe3b001b2f0>,
        'symbol': '2',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG3',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7fe3b001b2f0>,
        'symbol': '3',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG4',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7fe3b001b2f0>,
        'symbol': '4',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG5',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7fe3b001b2f0>,
        'symbol': '5',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG6',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7fe3b001b2f0>,
        'symbol': '6',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG7',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7fe3b001b2f0>,
        'symbol': '7',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG8',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7fe3b001b2f0>,
        'symbol': '8',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG9',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7fe3b001b2f0>,
        'symbol': '9',
        'type': 'arg'},
    {   'arg count': 1,
        'code': 'JMPR',
        'description': 'Jump to the address in r0.',
        'function': <function jumpR at 0x7fe3b001b378>,
        'symbol': '%',
        'type': 'jump'},
    {   'arg count': 0,
        'code': 'JMPB',
        'description': 'Jump backwards to the first lock matching the '
                       'following key',
        'function': <function jumpB at 0x7fe3b001b400>,
        'symbol': '(',
        'type': 'jump'},
    {   'arg count': 0,
        'code': 'JMPF',
        'description': 'Jump forwards to the first lock matching the following '
                       'key',
        'function': <function jumpF at 0x7fe3b001b488>,
        'symbol': ')',
        'type': 'jump'},
    {   'arg count': 1,
        'code': 'ADRB',
        'description': 'Look backwards to the first lock matching the '
                       'following key, store its address in r0',
        'function': <function addressOfJumpB at 0x7fe3b001b510>,
        'symbol': '[',
        'type': 'lookaround'},
    {   'arg count': 1,
        'code': 'ADRF',
        'description': 'Look forwards to the first lock matching the following '
                       'key, store its address in r0',
        'function': <function addressOfJumpF at 0x7fe3b001b598>,
        'symbol': ']',
        'type': 'lookaround'},
    {   'arg count': 3,
        'code': 'SERB',
        'description': 'Starting from [r0], look backwards for the first '
                       'instruction matching the instruction at [r1], store '
                       'its address in r2',
        'function': <function addressOfInstructionB at 0x7fe3b001b620>,
        'symbol': '<',
        'type': 'lookaround'},
    {   'arg count': 3,
        'code': 'SERF',
        'description': 'Starting from [r0], look forwards for the first '
                       'instruction matching the instruction at [r1], store '
                       'its address in r2',
        'function': <function addressOfInstructionF at 0x7fe3b001b6a8>,
        'symbol': '>',
        'type': 'lookaround'},
    {   'arg count': 1,
        'code': 'IFNZ',
        'description': 'if [r0] is not 0, execute the following instruction, '
                       'otherwise, skip to the next non-argument instruction',
        'function': <function skipIfZero at 0x7fe3b001b730>,
        'symbol': '?',
        'type': 'if'},
    {   'arg count': 1,
        'code': 'IFNN',
        'description': 'if [r0] is not null, execute the following '
                       'instruction, otherwise, skip to the next non-argument '
                       'instruction',
        'function': <function skipIfNull at 0x7fe3b001b7b8>,
        'symbol': '‽',
        'type': 'if'},
    {   'arg count': 0,
        'code': 'IFDZ',
        'description': 'if the instruction at the address in r0 is the same as '
                       "the instruction at the address in r1 (or if they're "
                       'both registers, dump registers, or executors), execute '
                       'the next instruction, otherwise, skip to the next '
                       'non-argument instruction',
        'function': <function skipIfDumpIsZero at 0x7fe3b001b840>,
        'symbol': '¿',
        'type': 'if'},
    {   'arg count': 2,
        'code': 'IFBE',
        'description': 'if the instruction at the address in r0 is the same as '
                       "the instruction at the address in r1 (or if they're "
                       'both registers, dump registers, or executors), execute '
                       'the next instruction, otherwise, skip to the next '
                       'non-argument instruction',
        'function': <function skipUnlessEquiv at 0x7fe3b001b8c8>,
        'symbol': '⸘',
        'type': 'if'},
    {   'arg count': 2,
        'code': 'IFEQ',
        'description': 'if [r0] == [r1], execute the next instruction, '
                       'otherwise, skip to the next non-argument instruction',
        'function': <function skipUnlessEqual at 0x7fe3b001b950>,
        'symbol': '=',
        'type': 'if'},
    {   'arg count': 3,
        'code': 'ADDr',
        'description': "Add registers' contents ([r0] = [r1] + [r2])",
        'function': <function add at 0x7fe3b001b9d8>,
        'symbol': '+',
        'type': 'arithmetic'},
    {   'arg count': 3,
        'code': 'SUBr',
        'description': "Subtract registers' contents ([r0] = [r1] - [r2])",
        'function': <function subtract at 0x7fe3b001ba60>,
        'symbol': '-',
        'type': 'arithmetic'},
    {   'arg count': 3,
        'code': 'MULr',
        'description': "Multiply registers' contents ([r0] = [r1] * [r2])",
        'function': <function multiply at 0x7fe3b001bae8>,
        'symbol': '*',
        'type': 'arithmetic'},
    {   'arg count': 3,
        'code': 'DIVr',
        'description': "Divide registers' contents ([r0] = [r1] ÷ [r2])",
        'function': <function divide at 0x7fe3b001bb70>,
        'symbol': '÷',
        'type': 'arithmetic'},
    {   'arg count': 1,
        'code': 'INCr',
        'description': "Increment register's contents ([r0]++)",
        'function': <function increment at 0x7fe3b001be18>,
        'symbol': '^',
        'type': 'arithmetic'},
    {   'arg count': 1,
        'code': 'DECr',
        'description': "Decrement register's contents ([r0]--)",
        'function': <function decrement at 0x7fe3b001bea0>,
        'symbol': 'v',
        'type': 'arithmetic'},
    {   'arg count': 1,
        'code': 'NOTr',
        'description': "Bitwise NOT register's contents ([r0] = ![r0])",
        'function': <function bitwiseInverse at 0x7fe3b001bf28>,
        'symbol': '!',
        'type': 'bitwise'},
    {   'arg count': 1,
        'code': 'SHFL',
        'description': "Bitwise left shift register's contents ([r0] = [r0] << "
                       '1)',
        'function': <function bitwiseShiftLeft at 0x7fe3b001c048>,
        'symbol': '«',
        'type': 'bitwise'},
    {   'arg count': 1,
        'code': 'SHFR',
        'description': "Bitwise right shift register's contents ([r0] = [r0] "
                       '>> 1)',
        'function': <function bitwiseShiftRight at 0x7fe3b001c0d0>,
        'symbol': '»',
        'type': 'bitwise'},
    {   'arg count': 3,
        'code': 'ANDr',
        'description': "Bitwise AND register's contents ([r0] = [r1] & [r2])",
        'function': <function bitwiseAND at 0x7fe3b001bbf8>,
        'symbol': '&',
        'type': 'bitwise'},
    {   'arg count': 3,
        'code': 'ORr-',
        'description': "Bitwise OR register's contents ([r0] = [r1] | [r2])",
        'function': <function bitwiseOR at 0x7fe3b001bc80>,
        'symbol': '|',
        'type': 'bitwise'},
    {   'arg count': 3,
        'code': 'XORr',
        'description': "Bitwise XOR register's contents ([r0] = [r1] ^ [r2])",
        'function': <function bitwiseXOR at 0x7fe3b001bd08>,
        'symbol': '⊕',
        'type': 'bitwise'},
    {   'arg count': 1,
        'code': 'ZERO',
        'description': 'Set register contents to 0 ([r0] = 0)',
        'function': <function setToZero at 0x7fe3b001c158>,
        'symbol': 'z',
        'type': 'set'},
    {   'arg count': 1,
        'code': 'UNIT',
        'description': 'Set register contents to 1 ([r0] = 1)',
        'function': <function setToOne at 0x7fe3b001c1e0>,
        'symbol': 'u',
        'type': 'set'},
    {   'arg count': 1,
        'code': 'RAND',
        'description': 'Sets [r0] to a random valid address.',
        'function': <function setToRand at 0x7fe3b001c2f0>,
        'symbol': 'r',
        'type': 'set'},
    {   'arg count': 1,
        'code': 'NULL',
        'description': 'Sets [r0] to null.',
        'function': <function setToNull at 0x7fe3b001c268>,
        'symbol': 'n',
        'type': 'set'},
    {   'arg count': 2,
        'code': 'CPYr',
        'description': 'Copy [r0] into r1',
        'function': <function copy at 0x7fe3b001c400>,
        'symbol': '"',
        'type': 'clone/swap'},
    {   'arg count': 2,
        'code': 'SWPr',
        'description': 'Swap [r0] into r1 and [r1] into r0',
        'function': <function swap at 0x7fe3b001c488>,
        'symbol': 'x',
        'type': 'clone/swap'},
    {   'arg count': 1,
        'code': 'POPr',
        'description': 'Pop into r0 a value from the first stack found '
                       'immediately after the first matching lock found after '
                       'this executor',
        'function': <function pop at 0x7fe3b001c598>,
        'symbol': '↑',
        'type': 'stack'},
    {   'arg count': 1,
        'code': 'PSHr',
        'description': 'Push [r0] to the first stack found immediately after '
                       'the first matching lock found after this executor',
        'function': <function push at 0x7fe3b001c510>,
        'symbol': '↓',
        'type': 'stack'},
    {   'arg count': 0,
        'code': 'CLAM',
        'description': "A claim marker, used to stake an executor's territory; "
                       'the boundaries of an organism. Also functions as lock.',
        'function': <function noOp at 0x7fe3b001b2f0>,
        'symbol': 'T',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'CLMk',
        'description': 'A claim marker key, matches to a claim marker.',
        'function': <function noOp at 0x7fe3b001b2f0>,
        'symbol': 't',
        'type': 'key'},
    {   'arg count': 2,
        'code': 'MNTR',
        'description': 'Sets [r0] to the address most recently checked within '
                       "this executor's claim boundaries, and [r1] to the "
                       'address of the instruction that checked it. Both are '
                       'set to null if no checks have been recently made.',
        'function': <function monitor at 0x7fe3b001c6a8>,
        'symbol': '~',
        'type': 'monitor'},
    {   'arg count': 2,
        'code': 'ADRS',
        'description': 'Swap the memory block at [r0] with the block at [r1]',
        'function': <function swapMemoryBlocks at 0x7fe3b001c620>,
        'symbol': '$',
        'type': 'memwrite'},
    {   'arg count': 1,
        'code': 'INIT',
        'description': 'Initializes the executor at the address contained in '
                       'r0. (Sets it to non-dormant and sets its instruction '
                       'pointer to itself.)',
        'function': <function initializeExecutor at 0x7fe3b001c730>,
        'symbol': ':',
        'type': 'init'},
    {   'arg count': 1,
        'code': 'DINT',
        'description': 'Denitializes the executor at the address contained in '
                       'r0. (Sets it to dormant.)',
        'function': <function denitializeExecutor at 0x7fe3b001c7b8>,
        'symbol': '.',
        'type': 'deinit'},
    {   'arg count': 0,
        'code': 'KEYA',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7fe3b001b2f0>,
        'symbol': 'a',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYB',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7fe3b001b2f0>,
        'symbol': 'b',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYC',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7fe3b001b2f0>,
        'symbol': 'c',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYD',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7fe3b001b2f0>,
        'symbol': 'd',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYE',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7fe3b001b2f0>,
        'symbol': 'e',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYF',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7fe3b001b2f0>,
        'symbol': 'f',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYG',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7fe3b001b2f0>,
        'symbol': 'g',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYH',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7fe3b001b2f0>,
        'symbol': 'h',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYI',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7fe3b001b2f0>,
        'symbol': 'i',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYJ',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7fe3b001b2f0>,
        'symbol': 'j',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYK',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7fe3b001b2f0>,
        'symbol': 'k',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYL',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7fe3b001b2f0>,
        'symbol': 'l',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYM',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7fe3b001b2f0>,
        'symbol': 'm',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'LOKA',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7fe3b001b2f0>,
        'symbol': 'A',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKB',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7fe3b001b2f0>,
        'symbol': 'B',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKC',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7fe3b001b2f0>,
        'symbol': 'C',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKD',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7fe3b001b2f0>,
        'symbol': 'D',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKE',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7fe3b001b2f0>,
        'symbol': 'E',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKF',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7fe3b001b2f0>,
        'symbol': 'F',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKG',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7fe3b001b2f0>,
        'symbol': 'G',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKH',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7fe3b001b2f0>,
        'symbol': 'H',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKI',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7fe3b001b2f0>,
        'symbol': 'I',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKJ',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7fe3b001b2f0>,
        'symbol': 'J',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKK',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7fe3b001b2f0>,
        'symbol': 'K',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKL',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7fe3b001b2f0>,
        'symbol': 'L',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKM',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7fe3b001b2f0>,
        'symbol': 'M',
        'type': 'lock'}]


INITIAL SOUP
:A‽C↑8T(J^$77r¿%< ]r:|◇‽.154z⸘=fCh»6|Fa↑9↓!«:L<jf)1M#g:=-b=<l$E↓?*6zA3AnC(k:M!u▯
hFhT◈▯#####[t1]t3r"04B>‽2)c(tC$2=13)d^^1(bD^4:4(tT5-nIx↓Tt)67 jCE* ?d↑rBtkJ:ci»>
n&=([:>rD)]J0%»◇K▯6a▯«j29*¿0LhH↓9↓j↑l7%"G>»M%÷(gTk<T9^1g>7u1:mn«M[=%d8D+◇aKl+2<A
LilL:LF^⊕79bK^%)EG(9lgIT↑l +B⊕<7i◇«=tH>vufnLAC8[b>a9L<l8(⊕⸘9i2z5(t52=m2H>1d▯l|I%
~u«¿↓i]v↑‽e&B)4◇◇^e¿t↓G7I4r8J<d3↑e◇d⊕.»b«⊕÷x»‽d⸘gbM↑¿8»0e!^K]E)c?r]6(urD▯0rj*$j|
cG↓t.|j i5)◇tCI9HKL-ctL>=Ax0K»u4r-5Bc¿÷c9↓D↑Lji[▯xurtA~t*▯v«d▯I(kLrG:[x7 B6:5<x7
jj!◇iG⊕¿⸘3.A(^rE.^] vB»?◇↑I:«5M1[‽vluz↓«v%n÷ax?=EFEhb]&&◇t»IA4L»xj‽ ↑=a5g(*.↑Fr4
 !$b(B0j%A=0^m÷ *j»z6-▯hKM4.jevLf]vC«÷=⊕dD:u6f]I3+eEn-aBTrTIli~C90÷66↑c«fc÷h^|.C
Cr▯*i4%]6aef0⊕h‽Hhnb‽«&kzFL |[3¿⊕‽b)mj÷‽&tvxr<za(1HA7v«!D2lgA+lru-◇i÷"(4‽fa~⊕F↓g
‽^▯A4«:2u-T)*Dn21ev5»j%dMD-F?t 7FBmHI?a72TGE3>)kh5*:f3¿7Iu‽3mztrkl<÷D«!Mn^¿#vHAM
t:le:[hrz>I+G↑E⊕g-3+fh‽3lv01c~f¿k7-#H+Cafi⊕519JMB◇[+8~57↑>eFr?B)jaHt4(-Hi6(k.xx|
$-+3?◇?=#[▯^v*#H~)hJM⊕6KG↑Kj◇x"?B+2=K▯8!IK8lfLMB◇4n=-◇G9&#⊕nk(LnDzh?zj⊕d#zdA(¿mJ
!g$(f7Gj÷lr90Tni.%a»↑ hv◇K!iDT◇ceciBT0↑◇

BODIES:
22	◇`None`
52	#`0`
79	▯`8191`
84	◈`84`
85	▯`8191`
86	#`0`
87	#`0`
88	#`0`
89	#`0`
90	#`0`
175	◇`None`
177	▯`8191`
180	▯`8191`
232	◇`None`
273	◇`None`
315	▯`8191`
335	◇`None`
336	◇`None`
354	◇`None`
392	▯`8191`
411	◇`None`
448	▯`8191`
457	▯`8191`
461	▯`8191`
483	◇`None`
504	◇`None`
536	◇`None`
582	▯`8191`
642	▯`8191`
706	◇`None`
722	▯`8191`
795	#`0`
835	#`0`
849	◇`None`
885	◇`None`
888	#`0`
890	▯`8191`
894	#`0`
908	◇`None`
917	▯`8191`
928	◇`None`
933	◇`None`
937	#`0`
952	#`0`
984	◇`None`
990	◇`None`
999	◇`None`

	
cycle 1
85	▯`8190`	BODY
84	◈`85`	BODY

	
cycle 2
85	▯`8189`	BODY
84	◈`86`	BODY

	
cycle 3
85	▯`8188`	BODY
86	#`0`	BODY
85	▯`8188`	BODY
84	◈`87`	BODY

	
cycle 4
85	▯`8187`	BODY
87	#`0`	BODY
85	▯`8187`	BODY
84	◈`88`	BODY

	
cycle 5
85	▯`8186`	BODY
88	#`0`	BODY
85	▯`8186`	BODY
84	◈`89`	BODY

	
cycle 6
85	▯`8185`	BODY
89	#`0`	BODY
85	▯`8185`	BODY
84	◈`90`	BODY

	
cycle 7
85	▯`8184`	BODY
90	#`0`	BODY
85	▯`8184`	BODY
84	◈`91`	BODY

	
cycle 8
85	▯`8100`	BODY
87	#`83`	BODY
85	▯`8100`	BODY
84	◈`92`	BODY

	
cycle 9
85	▯`8099`	BODY
84	◈`93`	BODY

	
cycle 10
85	▯`8098`	BODY
84	◈`94`	BODY

	
cycle 11
85	▯`7968`	BODY
89	#`129`	BODY
85	▯`7968`	BODY
84	◈`95`	BODY

	
cycle 12
85	▯`7967`	BODY
84	◈`96`	BODY

	
cycle 13
85	▯`7966`	BODY
84	◈`97`	BODY

	
cycle 14
85	▯`7363`	BODY
86	#`602`	BODY
85	▯`7363`	BODY
84	◈`98`	BODY

	
cycle 15
85	▯`6760`	BODY
90	#`602`	BODY
85	▯`6760`	BODY
84	◈`99`	BODY

	
cycle 16
85	▯`6759`	BODY
84	◈`100`	BODY

	
cycle 17
85	▯`6758`	BODY
84	◈`101`	BODY

	
cycle 18
85	▯`6757`	BODY
84	◈`102`	BODY

	
cycle 19
85	▯`6140`	BODY
88	#`616`	BODY
85	▯`6140`	BODY
84	◈`103`	BODY

	
cycle 20
85	▯`6139`	BODY
84	◈`104`	BODY

	
cycle 21
85	▯`6138`	BODY
84	◈`105`	BODY

	
cycle 22
85	▯`6134`	BODY
84	◈`109`	BODY

	
cycle 23
85	▯`6133`	BODY
84	◈`110`	BODY

	
cycle 24
85	▯`6132`	BODY
84	◈`111`	BODY
602	T	BLOCK
616	:	BLOCK

	
cycle 25
85	▯`6131`	BODY
84	◈`112`	BODY

	
cycle 26
85	▯`6127`	BODY
84	◈`116`	BODY

	
cycle 27
85	▯`6126`	BODY
84	◈`117`	BODY

	
cycle 28
85	▯`6124`	BODY
86	#`603`	BODY
85	▯`6124`	BODY
84	◈`118`	BODY

	
cycle 29
85	▯`6122`	BODY
87	#`84`	BODY
85	▯`6122`	BODY
84	◈`119`	BODY

	
cycle 30
85	▯`6121`	BODY
84	◈`120`	BODY

	
cycle 31
85	▯`6140`	BODY
84	◈`101`	BODY

	
cycle 32
85	▯`6139`	BODY
84	◈`102`	BODY

	
cycle 33
85	▯`6048`	BODY
88	#`706`	BODY
85	▯`6048`	BODY
84	◈`103`	BODY

	
cycle 34
85	▯`6047`	BODY
84	◈`104`	BODY

	
cycle 35
85	▯`6046`	BODY
84	◈`105`	BODY

	
cycle 36
85	▯`6042`	BODY
84	◈`109`	BODY

	
cycle 37
85	▯`6041`	BODY
84	◈`110`	BODY

	
cycle 38
85	▯`6040`	BODY
84	◈`111`	BODY
603	◇`None`	BLOCK
706	u	BLOCK

	
cycle 39
85	▯`6039`	BODY
84	◈`112`	BODY

	
cycle 40
85	▯`6035`	BODY
84	◈`116`	BODY

	
cycle 41
85	▯`6034`	BODY
84	◈`117`	BODY

	
cycle 42
85	▯`6032`	BODY
86	#`604`	BODY
85	▯`6032`	BODY
84	◈`118`	BODY

	
cycle 43
85	▯`6030`	BODY
87	#`85`	BODY
85	▯`6030`	BODY
84	◈`119`	BODY

	
cycle 44
85	▯`6029`	BODY
84	◈`120`	BODY

	
cycle 45
85	▯`6048`	BODY
84	◈`101`	BODY

	
cycle 46
85	▯`6047`	BODY
84	◈`102`	BODY

	
cycle 47
85	▯`6110`	BODY
88	#`642`	BODY
85	▯`6110`	BODY
84	◈`103`	BODY

	
cycle 48
85	▯`6109`	BODY
84	◈`104`	BODY

	
cycle 49
85	▯`6108`	BODY
84	◈`105`	BODY

	
cycle 50
85	▯`6104`	BODY
84	◈`109`	BODY

	
cycle 51
85	▯`6103`	BODY
84	◈`110`	BODY

	
cycle 52
85	▯`6102`	BODY
84	◈`111`	BODY
604	▯`8191`	BLOCK
642	6	BLOCK

	
cycle 53
85	▯`6101`	BODY
84	◈`112`	BODY

	
cycle 54
85	▯`6097`	BODY
84	◈`116`	BODY

	
cycle 55
85	▯`6096`	BODY
84	◈`117`	BODY

	
cycle 56
85	▯`6094`	BODY
86	#`605`	BODY
85	▯`6094`	BODY
84	◈`118`	BODY

	
cycle 57
85	▯`6092`	BODY
87	#`86`	BODY
85	▯`6092`	BODY
84	◈`119`	BODY

	
cycle 58
85	▯`6091`	BODY
84	◈`120`	BODY

	
cycle 59
85	▯`6110`	BODY
84	◈`101`	BODY

	
cycle 60
85	▯`6109`	BODY
84	◈`102`	BODY

	
cycle 61
85	▯`5955`	BODY
88	#`795`	BODY
85	▯`5955`	BODY
84	◈`103`	BODY

	
cycle 62
85	▯`5954`	BODY
84	◈`104`	BODY

	
cycle 63
85	▯`5953`	BODY
84	◈`105`	BODY

	
cycle 64
85	▯`5949`	BODY
84	◈`109`	BODY

	
cycle 65
85	▯`5948`	BODY
84	◈`110`	BODY

	
cycle 66
85	▯`5947`	BODY
84	◈`111`	BODY
605	#`0`	BLOCK
795	f	BLOCK

	
cycle 67
85	▯`5946`	BODY
84	◈`112`	BODY

	
cycle 68
85	▯`5942`	BODY
84	◈`116`	BODY

	
cycle 69
85	▯`5941`	BODY
84	◈`117`	BODY

	
cycle 70
85	▯`5939`	BODY
86	#`606`	BODY
85	▯`5939`	BODY
84	◈`118`	BODY

	
cycle 71
85	▯`5937`	BODY
87	#`87`	BODY
85	▯`5937`	BODY
84	◈`119`	BODY

	
cycle 72
85	▯`5936`	BODY
84	◈`120`	BODY

	
cycle 73
85	▯`5955`	BODY
84	◈`101`	BODY

	
cycle 74
85	▯`5954`	BODY
84	◈`102`	BODY

	
cycle 75
85	▯`5913`	BODY
88	#`835`	BODY
85	▯`5913`	BODY
84	◈`103`	BODY

	
cycle 76
85	▯`5912`	BODY
84	◈`104`	BODY

	
cycle 77
85	▯`5911`	BODY
84	◈`105`	BODY

	
cycle 78
85	▯`5907`	BODY
84	◈`109`	BODY

	
cycle 79
85	▯`5906`	BODY
84	◈`110`	BODY

	
cycle 80
85	▯`5905`	BODY
84	◈`111`	BODY
606	#`0`	BLOCK
835	]	BLOCK

	
cycle 81
85	▯`5904`	BODY
84	◈`112`	BODY

	
cycle 82
85	▯`5900`	BODY
84	◈`116`	BODY

	
cycle 83
85	▯`5899`	BODY
84	◈`117`	BODY

	
cycle 84
85	▯`5897`	BODY
86	#`607`	BODY
85	▯`5897`	BODY
84	◈`118`	BODY

	
cycle 85
85	▯`5895`	BODY
87	#`88`	BODY
85	▯`5895`	BODY
84	◈`119`	BODY

	
cycle 86
85	▯`5894`	BODY
84	◈`120`	BODY

	
cycle 87
85	▯`5913`	BODY
84	◈`101`	BODY

	
cycle 88
85	▯`5912`	BODY
84	◈`102`	BODY

	
cycle 89
85	▯`5858`	BODY
88	#`888`	BODY
85	▯`5858`	BODY
84	◈`103`	BODY

	
cycle 90
85	▯`5857`	BODY
84	◈`104`	BODY

	
cycle 91
85	▯`5856`	BODY
84	◈`105`	BODY

	
cycle 92
85	▯`5852`	BODY
84	◈`109`	BODY

	
cycle 93
85	▯`5851`	BODY
84	◈`110`	BODY

	
cycle 94
85	▯`5850`	BODY
84	◈`111`	BODY
607	#`0`	BLOCK
888	I	BLOCK

	
cycle 95
85	▯`5849`	BODY
84	◈`112`	BODY

	
cycle 96
85	▯`5845`	BODY
84	◈`116`	BODY

	
cycle 97
85	▯`5844`	BODY
84	◈`117`	BODY

	
cycle 98
85	▯`5842`	BODY
86	#`608`	BODY
85	▯`5842`	BODY
84	◈`118`	BODY

	
cycle 99
85	▯`5840`	BODY
87	#`89`	BODY
85	▯`5840`	BODY
84	◈`119`	BODY

	
cycle 100
85	▯`5839`	BODY
84	◈`120`	BODY

	
cycle 101
85	▯`5858`	BODY
84	◈`101`	BODY

	
cycle 102
85	▯`5857`	BODY
84	◈`102`	BODY

	
cycle 103
85	▯`5850`	BODY
88	#`894`	BODY
85	▯`5850`	BODY
84	◈`103`	BODY

	
cycle 104
85	▯`5849`	BODY
84	◈`104`	BODY

	
cycle 105
85	▯`5848`	BODY
84	◈`105`	BODY

	
cycle 106
85	▯`5844`	BODY
84	◈`109`	BODY

	
cycle 107
85	▯`5843`	BODY
84	◈`110`	BODY

	
cycle 108
85	▯`5842`	BODY
84	◈`111`	BODY
608	#`0`	BLOCK
894	3	BLOCK

	
cycle 109
85	▯`5841`	BODY
84	◈`112`	BODY

	
cycle 110
85	▯`5837`	BODY
84	◈`116`	BODY

	
cycle 111
85	▯`5836`	BODY
84	◈`117`	BODY

	
cycle 112
85	▯`5834`	BODY
86	#`609`	BODY
85	▯`5834`	BODY
84	◈`118`	BODY

	
cycle 113
85	▯`5832`	BODY
87	#`90`	BODY
85	▯`5832`	BODY
84	◈`119`	BODY

	
cycle 114
85	▯`5831`	BODY
84	◈`120`	BODY

	
cycle 115
85	▯`5850`	BODY
84	◈`101`	BODY

	
cycle 116
85	▯`5849`	BODY
84	◈`102`	BODY

	
cycle 117
85	▯`5805`	BODY
88	#`937`	BODY
85	▯`5805`	BODY
84	◈`103`	BODY

	
cycle 118
85	▯`5804`	BODY
84	◈`104`	BODY

	
cycle 119
85	▯`5803`	BODY
84	◈`105`	BODY

	
cycle 120
85	▯`5799`	BODY
84	◈`109`	BODY

	
cycle 121
85	▯`5798`	BODY
84	◈`110`	BODY

	
cycle 122
85	▯`5797`	BODY
84	◈`111`	BODY
609	#`0`	BLOCK
937	+	BLOCK

	
cycle 123
85	▯`5796`	BODY
84	◈`112`	BODY

	
cycle 124
85	▯`5792`	BODY
84	◈`116`	BODY

	
cycle 125
85	▯`5791`	BODY
84	◈`117`	BODY

	
cycle 126
85	▯`5789`	BODY
86	#`610`	BODY
85	▯`5789`	BODY
84	◈`118`	BODY

	
cycle 127
85	▯`5787`	BODY
87	#`91`	BODY
85	▯`5787`	BODY
84	◈`119`	BODY

	
cycle 128
85	▯`5786`	BODY
84	◈`120`	BODY

	
cycle 129
85	▯`5805`	BODY
84	◈`101`	BODY

	
cycle 130
85	▯`5804`	BODY
84	◈`102`	BODY

	
cycle 131
85	▯`6071`	BODY
88	#`669`	BODY
85	▯`6071`	BODY
84	◈`103`	BODY

	
cycle 132
85	▯`6070`	BODY
84	◈`104`	BODY

	
cycle 133
85	▯`6069`	BODY
84	◈`105`	BODY

	
cycle 134
85	▯`6065`	BODY
84	◈`109`	BODY

	
cycle 135
85	▯`6064`	BODY
84	◈`110`	BODY

	
cycle 136
85	▯`6063`	BODY
84	◈`111`	BODY
610	[	BLOCK
669	e	BLOCK

	
cycle 137
85	▯`6062`	BODY
84	◈`112`	BODY

	
cycle 138
85	▯`6058`	BODY
84	◈`116`	BODY

	
cycle 139
85	▯`6057`	BODY
84	◈`117`	BODY

	
cycle 140
85	▯`6055`	BODY
86	#`611`	BODY
85	▯`6055`	BODY
84	◈`118`	BODY

	
cycle 141
85	▯`6053`	BODY
87	#`92`	BODY
85	▯`6053`	BODY
84	◈`119`	BODY

	
cycle 142
85	▯`6052`	BODY
84	◈`120`	BODY

	
cycle 143
85	▯`6071`	BODY
84	◈`101`	BODY

	
cycle 144
85	▯`6070`	BODY
84	◈`102`	BODY

	
cycle 145
85	▯`6057`	BODY
88	#`681`	BODY
85	▯`6057`	BODY
84	◈`103`	BODY

	
cycle 146
85	▯`6056`	BODY
84	◈`104`	BODY

	
cycle 147
85	▯`6055`	BODY
84	◈`105`	BODY

	
cycle 148
85	▯`6051`	BODY
84	◈`109`	BODY

	
cycle 149
85	▯`6050`	BODY
84	◈`110`	BODY

	
cycle 150
85	▯`6049`	BODY
84	◈`111`	BODY
611	t	BLOCK
681	E	BLOCK

	
cycle 151
85	▯`6048`	BODY
84	◈`112`	BODY

	
cycle 152
85	▯`6044`	BODY
84	◈`116`	BODY

	
cycle 153
85	▯`6043`	BODY
84	◈`117`	BODY

	
cycle 154
85	▯`6041`	BODY
86	#`612`	BODY
85	▯`6041`	BODY
84	◈`118`	BODY

	
cycle 155
85	▯`6039`	BODY
87	#`93`	BODY
85	▯`6039`	BODY
84	◈`119`	BODY

	
cycle 156
85	▯`6038`	BODY
84	◈`120`	BODY

	
cycle 157
85	▯`6057`	BODY
84	◈`101`	BODY

	
cycle 158
85	▯`6056`	BODY
84	◈`102`	BODY

	
cycle 159
85	▯`6047`	BODY
88	#`689`	BODY
85	▯`6047`	BODY
84	◈`103`	BODY

	
cycle 160
85	▯`6046`	BODY
84	◈`104`	BODY

	
cycle 161
85	▯`6045`	BODY
84	◈`105`	BODY

	
cycle 162
85	▯`6041`	BODY
84	◈`109`	BODY

	
cycle 163
85	▯`6040`	BODY
84	◈`110`	BODY

	
cycle 164
85	▯`6039`	BODY
84	◈`111`	BODY
612	1	BLOCK
689	n	BLOCK

	
cycle 165
85	▯`6038`	BODY
84	◈`112`	BODY

	
cycle 166
85	▯`6034`	BODY
84	◈`116`	BODY

	
cycle 167
85	▯`6033`	BODY
84	◈`117`	BODY

	
cycle 168
85	▯`6031`	BODY
86	#`613`	BODY
85	▯`6031`	BODY
84	◈`118`	BODY

	
cycle 169
85	▯`6029`	BODY
87	#`94`	BODY
85	▯`6029`	BODY
84	◈`119`	BODY

	
cycle 170
85	▯`6028`	BODY
84	◈`120`	BODY

	
cycle 171
85	▯`6047`	BODY
84	◈`101`	BODY

	
cycle 172
85	▯`6046`	BODY
84	◈`102`	BODY

	
cycle 173
85	▯`6087`	BODY
88	#`647`	BODY
85	▯`6087`	BODY
84	◈`103`	BODY

	
cycle 174
85	▯`6086`	BODY
84	◈`104`	BODY

	
cycle 175
85	▯`6085`	BODY
84	◈`105`	BODY

	
cycle 176
85	▯`6081`	BODY
84	◈`109`	BODY

	
cycle 177
85	▯`6080`	BODY
84	◈`110`	BODY

	
cycle 178
85	▯`6079`	BODY
84	◈`111`	BODY
613	]	BLOCK
647	-	BLOCK

	
cycle 179
85	▯`6078`	BODY
84	◈`112`	BODY

	
cycle 180
85	▯`6074`	BODY
84	◈`116`	BODY

	
cycle 181
85	▯`6073`	BODY
84	◈`117`	BODY

	
cycle 182
85	▯`6071`	BODY
86	#`614`	BODY
85	▯`6071`	BODY
84	◈`118`	BODY

	
cycle 183
85	▯`6069`	BODY
87	#`95`	BODY
85	▯`6069`	BODY
84	◈`119`	BODY

	
cycle 184
85	▯`6068`	BODY
84	◈`120`	BODY

	
cycle 185
85	▯`6087`	BODY
84	◈`101`	BODY

	
cycle 186
85	▯`6086`	BODY
84	◈`102`	BODY

	
cycle 187
85	▯`5983`	BODY
88	#`749`	BODY
85	▯`5983`	BODY
84	◈`103`	BODY

	
cycle 188
85	▯`5982`	BODY
84	◈`104`	BODY

	
cycle 189
85	▯`5981`	BODY
84	◈`105`	BODY

	
cycle 190
85	▯`5977`	BODY
84	◈`109`	BODY

	
cycle 191
85	▯`5976`	BODY
84	◈`110`	BODY

	
cycle 192
85	▯`5975`	BODY
84	◈`111`	BODY
614	t	BLOCK
749	a	BLOCK

	
cycle 193
85	▯`5974`	BODY
84	◈`112`	BODY

	
cycle 194
85	▯`5970`	BODY
84	◈`116`	BODY

	
cycle 195
85	▯`5969`	BODY
84	◈`117`	BODY

	
cycle 196
85	▯`5967`	BODY
86	#`615`	BODY
85	▯`5967`	BODY
84	◈`118`	BODY

	
cycle 197
85	▯`5965`	BODY
87	#`96`	BODY
85	▯`5965`	BODY
84	◈`119`	BODY

	
cycle 198
85	▯`5964`	BODY
84	◈`120`	BODY

	
cycle 199
85	▯`5983`	BODY
84	◈`101`	BODY

	
cycle 200
85	▯`5982`	BODY
84	◈`102`	BODY

	
cycle 201
85	▯`6060`	BODY
88	#`670`	BODY
85	▯`6060`	BODY
84	◈`103`	BODY

	
cycle 202
85	▯`6059`	BODY
84	◈`104`	BODY

	
cycle 203
85	▯`6058`	BODY
84	◈`105`	BODY

	
cycle 204
85	▯`6054`	BODY
84	◈`109`	BODY

	
cycle 205
85	▯`6053`	BODY
84	◈`110`	BODY

	
cycle 206
85	▯`6052`	BODY
84	◈`111`	BODY
615	3	BLOCK
670	B	BLOCK

	
cycle 207
85	▯`6051`	BODY
84	◈`112`	BODY

	
cycle 208
85	▯`6047`	BODY
84	◈`116`	BODY

	
cycle 209
85	▯`6046`	BODY
84	◈`117`	BODY

	
cycle 210
85	▯`6044`	BODY
86	#`616`	BODY
85	▯`6044`	BODY
84	◈`118`	BODY

	
cycle 211
85	▯`6042`	BODY
87	#`97`	BODY
85	▯`6042`	BODY
84	◈`119`	BODY

	
cycle 212
85	▯`6041`	BODY
84	◈`120`	BODY

	
cycle 213
85	▯`6060`	BODY
84	◈`101`	BODY

	
cycle 214
85	▯`6059`	BODY
84	◈`102`	BODY

	
cycle 215
85	▯`6111`	BODY
88	#`617`	BODY
85	▯`6111`	BODY
84	◈`103`	BODY

	
cycle 216
85	▯`6110`	BODY
84	◈`104`	BODY

	
cycle 217
85	▯`6109`	BODY
84	◈`105`	BODY

	
cycle 218
85	▯`6105`	BODY
84	◈`109`	BODY

	
cycle 219
85	▯`6104`	BODY
84	◈`110`	BODY

	
cycle 220
85	▯`6103`	BODY
84	◈`111`	BODY
616	r	BLOCK
617	:	BLOCK

	
cycle 221
85	▯`6102`	BODY
84	◈`112`	BODY

	
cycle 222
85	▯`6098`	BODY
84	◈`116`	BODY

	
cycle 223
85	▯`6097`	BODY
84	◈`117`	BODY

	
cycle 224
85	▯`6095`	BODY
86	#`617`	BODY
85	▯`6095`	BODY
84	◈`118`	BODY

	
cycle 225
85	▯`6093`	BODY
87	#`98`	BODY
85	▯`6093`	BODY
84	◈`119`	BODY

	
cycle 226
85	▯`6092`	BODY
84	◈`120`	BODY

	
cycle 227
85	▯`6111`	BODY
84	◈`101`	BODY

	
cycle 228
85	▯`6110`	BODY
84	◈`102`	BODY

	
cycle 229
85	▯`6017`	BODY
88	#`709`	BODY
85	▯`6017`	BODY
84	◈`103`	BODY

	
cycle 230
85	▯`6016`	BODY
84	◈`104`	BODY

	
cycle 231
85	▯`6015`	BODY
84	◈`105`	BODY

	
cycle 232
85	▯`6011`	BODY
84	◈`109`	BODY

	
cycle 233
85	▯`6010`	BODY
84	◈`110`	BODY

	
cycle 234
85	▯`6009`	BODY
84	◈`111`	BODY
617	"	BLOCK
709	:	BLOCK

	
cycle 235
85	▯`6008`	BODY
84	◈`112`	BODY

	
cycle 236
85	▯`6004`	BODY
84	◈`116`	BODY

	
cycle 237
85	▯`6003`	BODY
84	◈`117`	BODY

	
cycle 238
85	▯`6001`	BODY
86	#`618`	BODY
85	▯`6001`	BODY
84	◈`118`	BODY

	
cycle 239
85	▯`5999`	BODY
87	#`99`	BODY
85	▯`5999`	BODY
84	◈`119`	BODY

	
cycle 240
85	▯`5998`	BODY
84	◈`120`	BODY

	
cycle 241
85	▯`6017`	BODY
84	◈`101`	BODY

	
cycle 242
85	▯`6016`	BODY
84	◈`102`	BODY

	
cycle 243
85	▯`6099`	BODY
88	#`625`	BODY
85	▯`6099`	BODY
84	◈`103`	BODY

	
cycle 244
85	▯`6098`	BODY
84	◈`104`	BODY

	
cycle 245
85	▯`6097`	BODY
84	◈`105`	BODY

	
cycle 246
85	▯`6093`	BODY
84	◈`109`	BODY

	
cycle 247
85	▯`6092`	BODY
84	◈`110`	BODY

	
cycle 248
85	▯`6091`	BODY
84	◈`111`	BODY
618	0	BLOCK
625	T	BLOCK

	
cycle 249
85	▯`6090`	BODY
84	◈`112`	BODY

	
cycle 250
85	▯`6086`	BODY
84	◈`116`	BODY

	
cycle 251
85	▯`6085`	BODY
84	◈`117`	BODY

	
cycle 252
85	▯`6083`	BODY
86	#`619`	BODY
85	▯`6083`	BODY
84	◈`118`	BODY

	
cycle 253
85	▯`6081`	BODY
87	#`100`	BODY
85	▯`6081`	BODY
84	◈`119`	BODY

	
cycle 254
85	▯`6080`	BODY
84	◈`120`	BODY

	
cycle 255
85	▯`6099`	BODY
84	◈`101`	BODY

	
cycle 256
85	▯`6098`	BODY
84	◈`102`	BODY

	
cycle 257
85	▯`6077`	BODY
88	#`645`	BODY
85	▯`6077`	BODY
84	◈`103`	BODY

	
cycle 258
85	▯`6076`	BODY
84	◈`104`	BODY

	
cycle 259
85	▯`6075`	BODY
84	◈`105`	BODY

	
cycle 260
85	▯`6071`	BODY
84	◈`109`	BODY

	
cycle 261
85	▯`6070`	BODY
84	◈`110`	BODY

	
cycle 262
85	▯`6069`	BODY
84	◈`111`	BODY
619	4	BLOCK
645	I	BLOCK

	
cycle 263
85	▯`6068`	BODY
84	◈`112`	BODY

	
cycle 264
85	▯`6064`	BODY
84	◈`116`	BODY

	
cycle 265
85	▯`6063`	BODY
84	◈`117`	BODY

	
cycle 266
85	▯`6061`	BODY
86	#`620`	BODY
85	▯`6061`	BODY
84	◈`118`	BODY

	
cycle 267
85	▯`6059`	BODY
87	#`101`	BODY
85	▯`6059`	BODY
84	◈`119`	BODY

	
cycle 268
85	▯`6058`	BODY
84	◈`120`	BODY

	
cycle 269
85	▯`6077`	BODY
84	◈`101`	BODY

	
cycle 270
85	▯`6076`	BODY
84	◈`102`	BODY

	
cycle 271
85	▯`6050`	BODY
88	#`670`	BODY
85	▯`6050`	BODY
84	◈`103`	BODY

	
cycle 272
85	▯`6049`	BODY
84	◈`104`	BODY

	
cycle 273
85	▯`6048`	BODY
84	◈`105`	BODY

	
cycle 274
85	▯`6044`	BODY
84	◈`109`	BODY

	
cycle 275
85	▯`6043`	BODY
84	◈`110`	BODY

	
cycle 276
85	▯`6042`	BODY
84	◈`111`	BODY
620	B	BLOCK
670	l	BLOCK

	
cycle 277
85	▯`6041`	BODY
84	◈`112`	BODY

	
cycle 278
85	▯`6037`	BODY
84	◈`116`	BODY

	
cycle 279
85	▯`6036`	BODY
84	◈`117`	BODY

	
cycle 280
85	▯`6034`	BODY
86	#`621`	BODY
85	▯`6034`	BODY
84	◈`118`	BODY

	
cycle 281
85	▯`6032`	BODY
87	#`102`	BODY
85	▯`6032`	BODY
84	◈`119`	BODY

	
cycle 282
85	▯`6031`	BODY
84	◈`120`	BODY

	
cycle 283
85	▯`6050`	BODY
84	◈`101`	BODY

	
cycle 284
85	▯`6049`	BODY
84	◈`102`	BODY

	
cycle 285
85	▯`5953`	BODY
88	#`765`	BODY
85	▯`5953`	BODY
84	◈`103`	BODY

	
cycle 286
85	▯`5952`	BODY
84	◈`104`	BODY

	
cycle 287
85	▯`5951`	BODY
84	◈`105`	BODY

	
cycle 288
85	▯`5947`	BODY
84	◈`109`	BODY

	
cycle 289
85	▯`5946`	BODY
84	◈`110`	BODY

	
cycle 290
85	▯`5945`	BODY
84	◈`111`	BODY
621	>	BLOCK
765	i	BLOCK

	
cycle 291
85	▯`5944`	BODY
84	◈`112`	BODY

	
cycle 292
85	▯`5940`	BODY
84	◈`116`	BODY

	
cycle 293
85	▯`5939`	BODY
84	◈`117`	BODY

	
cycle 294
85	▯`5937`	BODY
86	#`622`	BODY
85	▯`5937`	BODY
84	◈`118`	BODY

	
cycle 295
85	▯`5935`	BODY
87	#`103`	BODY
85	▯`5935`	BODY
84	◈`119`	BODY

	
cycle 296
85	▯`5934`	BODY
84	◈`120`	BODY

	
cycle 297
85	▯`5953`	BODY
84	◈`101`	BODY

	
cycle 298
85	▯`5952`	BODY
84	◈`102`	BODY

	
cycle 299
85	▯`6061`	BODY
88	#`655`	BODY
85	▯`6061`	BODY
84	◈`103`	BODY

	
cycle 300
85	▯`6060`	BODY
84	◈`104`	BODY

	
cycle 301
85	▯`6059`	BODY
84	◈`105`	BODY

	
cycle 302
85	▯`6055`	BODY
84	◈`109`	BODY

	
cycle 303
85	▯`6054`	BODY
84	◈`110`	BODY

	
cycle 304
85	▯`6053`	BODY
84	◈`111`	BODY
622	‽	BLOCK
655	~	BLOCK

	
cycle 305
85	▯`6052`	BODY
84	◈`112`	BODY

	
cycle 306
85	▯`6048`	BODY
84	◈`116`	BODY

	
cycle 307
85	▯`6047`	BODY
84	◈`117`	BODY

	
cycle 308
85	▯`6045`	BODY
86	#`623`	BODY
85	▯`6045`	BODY
84	◈`118`	BODY

	
cycle 309
85	▯`6043`	BODY
87	#`104`	BODY
85	▯`6043`	BODY
84	◈`119`	BODY

	
cycle 310
85	▯`6042`	BODY
84	◈`120`	BODY

	
cycle 311
85	▯`6061`	BODY
84	◈`101`	BODY

	
cycle 312
85	▯`6060`	BODY
84	◈`102`	BODY

	
cycle 313
85	▯`6017`	BODY
88	#`697`	BODY
85	▯`6017`	BODY
84	◈`103`	BODY

	
cycle 314
85	▯`6016`	BODY
84	◈`104`	BODY

	
cycle 315
85	▯`6015`	BODY
84	◈`105`	BODY

	
cycle 316
85	▯`6011`	BODY
84	◈`109`	BODY

	
cycle 317
85	▯`6010`	BODY
84	◈`110`	BODY

	
cycle 318
85	▯`6009`	BODY
84	◈`111`	BODY
623	2	BLOCK
697	C	BLOCK

	
cycle 319
85	▯`6008`	BODY
84	◈`112`	BODY

	
cycle 320
85	▯`6004`	BODY
84	◈`116`	BODY

	
cycle 321
85	▯`6003`	BODY
84	◈`117`	BODY

	
cycle 322
85	▯`6001`	BODY
86	#`624`	BODY
85	▯`6001`	BODY
84	◈`118`	BODY

	
cycle 323
85	▯`5999`	BODY
87	#`105`	BODY
85	▯`5999`	BODY
84	◈`119`	BODY

	
cycle 324
85	▯`5998`	BODY
84	◈`120`	BODY

	
cycle 325
85	▯`6017`	BODY
84	◈`101`	BODY

	
cycle 326
85	▯`6016`	BODY
84	◈`102`	BODY

	
cycle 327
85	▯`6037`	BODY
88	#`675`	BODY
85	▯`6037`	BODY
84	◈`103`	BODY

	
cycle 328
85	▯`6036`	BODY
84	◈`104`	BODY

	
cycle 329
85	▯`6035`	BODY
84	◈`105`	BODY

	
cycle 330
85	▯`6031`	BODY
84	◈`109`	BODY

	
cycle 331
85	▯`6030`	BODY
84	◈`110`	BODY
