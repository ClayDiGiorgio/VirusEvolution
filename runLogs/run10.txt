body len = 13
header len = 3
body opener = "`"
body closer = "`"
OPCODE DATA

Flag Names: ['special', 'isRegister', 'isNonNull']

Flag Codes:
{   '000': {   'code': '0000',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f7df5385840>,
               'name': 'uninitialized block',
               'symbol': '░',
               'type': 'uninitialized'},
    '001': {   'code': None,
               'default body': None,
               'execute?': True,
               'interpret body': <function Opcodes.<lambda> at 0x7f7df5385bf8>,
               'name': 'instruction block',
               'symbol': None,
               'type': 'instruction'},
    '010': {   'code': 'REGn',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f7df5385950>,
               'name': 'register with a null value',
               'symbol': '_',
               'type': 'register'},
    '011': {   'code': 'REG#',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f7df53858c8>,
               'name': 'register',
               'symbol': '#',
               'type': 'register'},
    '100': {   'code': 'EXEn',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f7df5385b70>,
               'name': 'dormant executor',
               'symbol': '◇',
               'type': 'executor'},
    '101': {   'code': 'EXEC',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f7df5385ae8>,
               'name': 'executor',
               'symbol': '◈',
               'type': 'executor'},
    '110': {   'code': 'DMPn',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f7df5385a60>,
               'name': 'dump register with a null value',
               'symbol': '█',
               'type': 'dump register'},
    '111': {   'code': 'DUMP',
               'default body': '1111111111111',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f7df53859d8>,
               'name': 'dump register',
               'symbol': '▯',
               'type': 'dump register'}}


Instruction Codes:
[   {   'arg count': 0,
        'code': 'NOOP',
        'description': 'No operation',
        'function': <function noOp at 0x7f7df53842f0>,
        'symbol': ' ',
        'type': 'noop'},
    {   'arg count': 0,
        'code': 'ARG0',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f7df53842f0>,
        'symbol': '0',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG1',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f7df53842f0>,
        'symbol': '1',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG2',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f7df53842f0>,
        'symbol': '2',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG3',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f7df53842f0>,
        'symbol': '3',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG4',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f7df53842f0>,
        'symbol': '4',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG5',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f7df53842f0>,
        'symbol': '5',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG6',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f7df53842f0>,
        'symbol': '6',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG7',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f7df53842f0>,
        'symbol': '7',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG8',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f7df53842f0>,
        'symbol': '8',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG9',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f7df53842f0>,
        'symbol': '9',
        'type': 'arg'},
    {   'arg count': 1,
        'code': 'JMPR',
        'description': 'Jump to the address in r0.',
        'function': <function jumpR at 0x7f7df5384378>,
        'symbol': '%',
        'type': 'jump'},
    {   'arg count': 0,
        'code': 'JMPB',
        'description': 'Jump backwards to the first lock matching the '
                       'following key',
        'function': <function jumpB at 0x7f7df5384400>,
        'symbol': '(',
        'type': 'jump'},
    {   'arg count': 0,
        'code': 'JMPF',
        'description': 'Jump forwards to the first lock matching the following '
                       'key',
        'function': <function jumpF at 0x7f7df5384488>,
        'symbol': ')',
        'type': 'jump'},
    {   'arg count': 1,
        'code': 'ADRB',
        'description': 'Look backwards to the first lock matching the '
                       'following key, store its address in r0',
        'function': <function addressOfJumpB at 0x7f7df5384510>,
        'symbol': '[',
        'type': 'lookaround'},
    {   'arg count': 1,
        'code': 'ADRF',
        'description': 'Look forwards to the first lock matching the following '
                       'key, store its address in r0',
        'function': <function addressOfJumpF at 0x7f7df5384598>,
        'symbol': ']',
        'type': 'lookaround'},
    {   'arg count': 3,
        'code': 'SERB',
        'description': 'Starting from [r0], look backwards for the first '
                       'instruction matching the instruction at [r1], store '
                       'its address in r2',
        'function': <function addressOfInstructionB at 0x7f7df5384620>,
        'symbol': '<',
        'type': 'lookaround'},
    {   'arg count': 3,
        'code': 'SERF',
        'description': 'Starting from [r0], look forwards for the first '
                       'instruction matching the instruction at [r1], store '
                       'its address in r2',
        'function': <function addressOfInstructionF at 0x7f7df53846a8>,
        'symbol': '>',
        'type': 'lookaround'},
    {   'arg count': 1,
        'code': 'IFNZ',
        'description': 'if [r0] is not 0, execute the following instruction, '
                       'otherwise, skip to the next non-argument instruction',
        'function': <function skipIfZero at 0x7f7df5384730>,
        'symbol': '?',
        'type': 'if'},
    {   'arg count': 1,
        'code': 'IFNN',
        'description': 'if [r0] is not null, execute the following '
                       'instruction, otherwise, skip to the next non-argument '
                       'instruction',
        'function': <function skipIfNull at 0x7f7df53847b8>,
        'symbol': '‽',
        'type': 'if'},
    {   'arg count': 0,
        'code': 'IFDZ',
        'description': 'if the instruction at the address in r0 is the same as '
                       "the instruction at the address in r1 (or if they're "
                       'both registers, dump registers, or executors), execute '
                       'the next instruction, otherwise, skip to the next '
                       'non-argument instruction',
        'function': <function skipIfDumpIsZero at 0x7f7df5384840>,
        'symbol': '¿',
        'type': 'if'},
    {   'arg count': 2,
        'code': 'IFBE',
        'description': 'if the instruction at the address in r0 is the same as '
                       "the instruction at the address in r1 (or if they're "
                       'both registers, dump registers, or executors), execute '
                       'the next instruction, otherwise, skip to the next '
                       'non-argument instruction',
        'function': <function skipUnlessEquiv at 0x7f7df53848c8>,
        'symbol': '⸘',
        'type': 'if'},
    {   'arg count': 2,
        'code': 'IFEQ',
        'description': 'if [r0] == [r1], execute the next instruction, '
                       'otherwise, skip to the next non-argument instruction',
        'function': <function skipUnlessEqual at 0x7f7df5384950>,
        'symbol': '=',
        'type': 'if'},
    {   'arg count': 3,
        'code': 'ADDr',
        'description': "Add registers' contents ([r0] = [r1] + [r2])",
        'function': <function add at 0x7f7df53849d8>,
        'symbol': '+',
        'type': 'arithmetic'},
    {   'arg count': 3,
        'code': 'SUBr',
        'description': "Subtract registers' contents ([r0] = [r1] - [r2])",
        'function': <function subtract at 0x7f7df5384a60>,
        'symbol': '-',
        'type': 'arithmetic'},
    {   'arg count': 3,
        'code': 'MULr',
        'description': "Multiply registers' contents ([r0] = [r1] * [r2])",
        'function': <function multiply at 0x7f7df5384ae8>,
        'symbol': '*',
        'type': 'arithmetic'},
    {   'arg count': 3,
        'code': 'DIVr',
        'description': "Divide registers' contents ([r0] = [r1] ÷ [r2])",
        'function': <function divide at 0x7f7df5384b70>,
        'symbol': '÷',
        'type': 'arithmetic'},
    {   'arg count': 1,
        'code': 'INCr',
        'description': "Increment register's contents ([r0]++)",
        'function': <function increment at 0x7f7df5384e18>,
        'symbol': '^',
        'type': 'arithmetic'},
    {   'arg count': 1,
        'code': 'DECr',
        'description': "Decrement register's contents ([r0]--)",
        'function': <function decrement at 0x7f7df5384ea0>,
        'symbol': 'v',
        'type': 'arithmetic'},
    {   'arg count': 1,
        'code': 'NOTr',
        'description': "Bitwise NOT register's contents ([r0] = ![r0])",
        'function': <function bitwiseInverse at 0x7f7df5384f28>,
        'symbol': '!',
        'type': 'bitwise'},
    {   'arg count': 1,
        'code': 'SHFL',
        'description': "Bitwise left shift register's contents ([r0] = [r0] << "
                       '1)',
        'function': <function bitwiseShiftLeft at 0x7f7df5385048>,
        'symbol': '«',
        'type': 'bitwise'},
    {   'arg count': 1,
        'code': 'SHFR',
        'description': "Bitwise right shift register's contents ([r0] = [r0] "
                       '>> 1)',
        'function': <function bitwiseShiftRight at 0x7f7df53850d0>,
        'symbol': '»',
        'type': 'bitwise'},
    {   'arg count': 3,
        'code': 'ANDr',
        'description': "Bitwise AND register's contents ([r0] = [r1] & [r2])",
        'function': <function bitwiseAND at 0x7f7df5384bf8>,
        'symbol': '&',
        'type': 'bitwise'},
    {   'arg count': 3,
        'code': 'ORr-',
        'description': "Bitwise OR register's contents ([r0] = [r1] | [r2])",
        'function': <function bitwiseOR at 0x7f7df5384c80>,
        'symbol': '|',
        'type': 'bitwise'},
    {   'arg count': 3,
        'code': 'XORr',
        'description': "Bitwise XOR register's contents ([r0] = [r1] ^ [r2])",
        'function': <function bitwiseXOR at 0x7f7df5384d08>,
        'symbol': '⊕',
        'type': 'bitwise'},
    {   'arg count': 1,
        'code': 'ZERO',
        'description': 'Set register contents to 0 ([r0] = 0)',
        'function': <function setToZero at 0x7f7df5385158>,
        'symbol': 'z',
        'type': 'set'},
    {   'arg count': 1,
        'code': 'UNIT',
        'description': 'Set register contents to 1 ([r0] = 1)',
        'function': <function setToOne at 0x7f7df53851e0>,
        'symbol': 'u',
        'type': 'set'},
    {   'arg count': 1,
        'code': 'RAND',
        'description': 'Sets [r0] to a random valid address.',
        'function': <function setToRand at 0x7f7df53852f0>,
        'symbol': 'r',
        'type': 'set'},
    {   'arg count': 1,
        'code': 'NULL',
        'description': 'Sets [r0] to null.',
        'function': <function setToNull at 0x7f7df5385268>,
        'symbol': 'n',
        'type': 'set'},
    {   'arg count': 2,
        'code': 'CPYr',
        'description': 'Copy [r0] into r1',
        'function': <function copy at 0x7f7df5385400>,
        'symbol': '"',
        'type': 'clone/swap'},
    {   'arg count': 2,
        'code': 'SWPr',
        'description': 'Swap [r0] into r1 and [r1] into r0',
        'function': <function swap at 0x7f7df5385488>,
        'symbol': 'x',
        'type': 'clone/swap'},
    {   'arg count': 1,
        'code': 'POPr',
        'description': 'Pop into r0 a value from the first stack found '
                       'immediately after the first matching lock found after '
                       'this executor',
        'function': <function pop at 0x7f7df5385598>,
        'symbol': '↑',
        'type': 'stack'},
    {   'arg count': 1,
        'code': 'PSHr',
        'description': 'Push [r0] to the first stack found immediately after '
                       'the first matching lock found after this executor',
        'function': <function push at 0x7f7df5385510>,
        'symbol': '↓',
        'type': 'stack'},
    {   'arg count': 0,
        'code': 'CLAM',
        'description': "A claim marker, used to stake an executor's territory; "
                       'the boundaries of an organism. Also functions as lock.',
        'function': <function noOp at 0x7f7df53842f0>,
        'symbol': 'T',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'CLMk',
        'description': 'A claim marker key, matches to a claim marker.',
        'function': <function noOp at 0x7f7df53842f0>,
        'symbol': 't',
        'type': 'key'},
    {   'arg count': 2,
        'code': 'MNTR',
        'description': 'Sets [r0] to the address most recently checked within '
                       "this executor's claim boundaries, and [r1] to the "
                       'address of the instruction that checked it. Both are '
                       'set to null if no checks have been recently made.',
        'function': <function monitor at 0x7f7df53856a8>,
        'symbol': '~',
        'type': 'monitor'},
    {   'arg count': 2,
        'code': 'ADRS',
        'description': 'Swap the memory block at [r0] with the block at [r1]',
        'function': <function swapMemoryBlocks at 0x7f7df5385620>,
        'symbol': '$',
        'type': 'memwrite'},
    {   'arg count': 1,
        'code': 'INIT',
        'description': 'Initializes the executor at the address contained in '
                       'r0. (Sets it to non-dormant and sets its instruction '
                       'pointer to itself.)',
        'function': <function initializeExecutor at 0x7f7df5385730>,
        'symbol': ':',
        'type': 'init'},
    {   'arg count': 1,
        'code': 'DINT',
        'description': 'Denitializes the executor at the address contained in '
                       'r0. (Sets it to dormant.)',
        'function': <function denitializeExecutor at 0x7f7df53857b8>,
        'symbol': '.',
        'type': 'deinit'},
    {   'arg count': 0,
        'code': 'KEYA',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f7df53842f0>,
        'symbol': 'a',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYB',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f7df53842f0>,
        'symbol': 'b',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYC',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f7df53842f0>,
        'symbol': 'c',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYD',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f7df53842f0>,
        'symbol': 'd',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYE',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f7df53842f0>,
        'symbol': 'e',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYF',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f7df53842f0>,
        'symbol': 'f',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYG',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f7df53842f0>,
        'symbol': 'g',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYH',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f7df53842f0>,
        'symbol': 'h',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYI',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f7df53842f0>,
        'symbol': 'i',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYJ',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f7df53842f0>,
        'symbol': 'j',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYK',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f7df53842f0>,
        'symbol': 'k',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYL',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f7df53842f0>,
        'symbol': 'l',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYM',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f7df53842f0>,
        'symbol': 'm',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'LOKA',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f7df53842f0>,
        'symbol': 'A',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKB',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f7df53842f0>,
        'symbol': 'B',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKC',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f7df53842f0>,
        'symbol': 'C',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKD',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f7df53842f0>,
        'symbol': 'D',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKE',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f7df53842f0>,
        'symbol': 'E',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKF',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f7df53842f0>,
        'symbol': 'F',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKG',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f7df53842f0>,
        'symbol': 'G',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKH',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f7df53842f0>,
        'symbol': 'H',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKI',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f7df53842f0>,
        'symbol': 'I',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKJ',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f7df53842f0>,
        'symbol': 'J',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKK',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f7df53842f0>,
        'symbol': 'K',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKL',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f7df53842f0>,
        'symbol': 'L',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKM',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f7df53842f0>,
        'symbol': 'M',
        'type': 'lock'}]


INITIAL SOUP
g|*lI%nfxc◇*eTc-*hhBj»]M?tnhx#5▯8K?$3&)$^K‽¿e÷aE:z#8gk⸘vt5h1fe-rej%8÷»◇6f‽:b)#MT
v.x]$9#>[ ⸘⊕G+=db+(Hc^&◇÷-(jr[6te6$«5t9T◈▯#####[t1]t3r"04B>‽2)c(tC$2=13)d^^1(bD^
4:4(tT))"3I3|Fu|uM6÷L|LD↑«6k=)<?uB!0»$÷l↑Ev>|~8↓:2tl2+ug4÷IkD‽⸘iFLx=‽1zDv? FKg01
 2IGItrj34.0BE-⸘t.l⸘f9~[c3↓↓~r9lt1~j ÷h7ixted⸘LvI6-6gcG&-cu84I¿‽<<C58tmu2IMB‽!-"
-"J⸘↑4#+0⊕z([6g$JmBH0i(n¿6^1↓3#l4ik|▯kC(G(0[3÷G(&1G~rCnEKC?r9m2|IA&xl6Hi:a5n↓0K8
~J17‽a▯Tj6~d5kGF&=IT⸘f÷J^c^f<T6⸘#>?v=*T‽*▯^»↑G^~]l5n^2a?◇DiKbClng56◇0Lc↓eTH-KE<"
r6t):Gbr%bE⸘¿Jf»9~.l]mll▯÷k7⊕:[&J?:?hlT¿^mC:63«G‽|75+K◇61«⸘«↑G÷A‽"M<2%A.A-t+&j>(
bj(&▯M↑ ↑h▯i[>gE>Lf0:21m47e+L⊕⊕L1&"¿)¿K◇8KFD:]|d5=j7|5j^ri)÷(=vEz"Dbj%^jGt7:Km&:
i%*%"]»I⊕:↓b↓ax53TlzKFF 5Fzj]"M&]AkAGj<▯g480.F9B‽↓GBACHG436ega-mMe xET&D◇ m-9m"#
fE 04#g=eFgk!t^3¿F[b-)16x↓n&H#JJ?5$2=]tn2ar>5aLG◇K+2»M<Hk*⊕5hc8<K(m+◇JdaH↑‽0)!gB
|-↓(97(6c‽3E*LFm]-D#d↓▯mC|-⊕◇G▯HMCju↓d^!M÷)0if↑*¿ch37%:=v>85i‽"n"BtJ.JG9>)¿↑9x?:
‽$&I*<uf)e↑B:2!hi%-!Du7Ee=!1~=.Ak◇=<¿J(-L+b^ki»0LDH⸘jGjf|aM⸘"9)↓.~)>+1liIzc#efeG
m^*l5%ul)<u◇e 1$c⸘Dz‽t|D%kv▯Kznk>$kHzgt$

BODIES:
10	◇`None`
29	#`0`
31	▯`8191`
50	#`0`
70	◇`None`
77	#`0`
86	#`0`
103	◇`None`
120	◈`120`
121	▯`8191`
122	#`0`
123	#`0`
124	#`0`
125	#`0`
126	#`0`
326	#`0`
350	#`0`
356	▯`8191`
406	▯`8191`
432	#`0`
441	▯`8191`
456	◇`None`
467	◇`None`
504	▯`8191`
534	◇`None`
564	▯`8191`
570	▯`8191`
599	◇`None`
679	▯`8191`
712	◇`None`
719	#`0`
725	#`0`
749	#`0`
768	◇`None`
788	◇`None`
819	#`0`
822	▯`8191`
828	◇`None`
830	▯`8191`
913	◇`None`
955	#`0`
971	◇`None`
987	▯`8191`

	
cycle 1
121	▯`8190`	BODY
120	◈`121`	BODY

	
cycle 2
121	▯`8189`	BODY
120	◈`122`	BODY

	
cycle 3
121	▯`8188`	BODY
122	#`0`	BODY
121	▯`8188`	BODY
120	◈`123`	BODY

	
cycle 4
121	▯`8187`	BODY
123	#`0`	BODY
121	▯`8187`	BODY
120	◈`124`	BODY

	
cycle 5
121	▯`8186`	BODY
124	#`0`	BODY
121	▯`8186`	BODY
120	◈`125`	BODY

	
cycle 6
121	▯`8185`	BODY
125	#`0`	BODY
121	▯`8185`	BODY
120	◈`126`	BODY

	
cycle 7
121	▯`8184`	BODY
126	#`0`	BODY
121	▯`8184`	BODY
120	◈`127`	BODY

	
cycle 8
121	▯`8064`	BODY
123	#`119`	BODY
121	▯`8064`	BODY
120	◈`128`	BODY

	
cycle 9
121	▯`8063`	BODY
120	◈`129`	BODY

	
cycle 10
121	▯`8062`	BODY
120	◈`130`	BODY

	
cycle 11
121	▯`7896`	BODY
125	#`165`	BODY
121	▯`7896`	BODY
120	◈`131`	BODY

	
cycle 12
121	▯`7895`	BODY
120	◈`132`	BODY

	
cycle 13
121	▯`7894`	BODY
120	◈`133`	BODY

	
cycle 14
121	▯`7877`	BODY
122	#`16`	BODY
121	▯`7877`	BODY
120	◈`134`	BODY

	
cycle 15
121	▯`7860`	BODY
126	#`16`	BODY
121	▯`7860`	BODY
120	◈`135`	BODY

	
cycle 16
121	▯`7859`	BODY
120	◈`136`	BODY

	
cycle 17
121	▯`7858`	BODY
120	◈`137`	BODY

	
cycle 18
121	▯`7857`	BODY
120	◈`138`	BODY

	
cycle 19
121	▯`7777`	BODY
124	#`79`	BODY
121	▯`7777`	BODY
120	◈`139`	BODY

	
cycle 20
121	▯`7776`	BODY
120	◈`140`	BODY

	
cycle 21
121	▯`7775`	BODY
120	◈`141`	BODY

	
cycle 22
121	▯`7771`	BODY
120	◈`145`	BODY

	
cycle 23
121	▯`7770`	BODY
120	◈`146`	BODY

	
cycle 24
121	▯`7769`	BODY
120	◈`147`	BODY
16	T	BLOCK
79	*	BLOCK

	
cycle 25
121	▯`7768`	BODY
120	◈`148`	BODY

	
cycle 26
121	▯`7764`	BODY
120	◈`152`	BODY

	
cycle 27
121	▯`7763`	BODY
120	◈`153`	BODY

	
cycle 28
121	▯`7761`	BODY
122	#`17`	BODY
121	▯`7761`	BODY
120	◈`154`	BODY

	
cycle 29
121	▯`7759`	BODY
123	#`120`	BODY
121	▯`7759`	BODY
120	◈`155`	BODY

	
cycle 30
121	▯`7758`	BODY
120	◈`156`	BODY

	
cycle 31
121	▯`7777`	BODY
120	◈`137`	BODY

	
cycle 32
121	▯`7776`	BODY
120	◈`138`	BODY

	
cycle 33
121	▯`7784`	BODY
124	#`70`	BODY
121	▯`7784`	BODY
120	◈`139`	BODY

	
cycle 34
121	▯`7783`	BODY
120	◈`140`	BODY

	
cycle 35
121	▯`7782`	BODY
120	◈`141`	BODY

	
cycle 36
121	▯`7778`	BODY
120	◈`145`	BODY

	
cycle 37
121	▯`7777`	BODY
120	◈`146`	BODY

	
cycle 38
121	▯`7776`	BODY
120	◈`147`	BODY
17	◇`None`	BLOCK
70	h	BLOCK

	
cycle 39
121	▯`7775`	BODY
120	◈`148`	BODY

	
cycle 40
121	▯`7771`	BODY
120	◈`152`	BODY

	
cycle 41
121	▯`7770`	BODY
120	◈`153`	BODY

	
cycle 42
121	▯`7768`	BODY
122	#`18`	BODY
121	▯`7768`	BODY
120	◈`154`	BODY

	
cycle 43
121	▯`7766`	BODY
123	#`121`	BODY
121	▯`7766`	BODY
120	◈`155`	BODY

	
cycle 44
121	▯`7765`	BODY
120	◈`156`	BODY

	
cycle 45
121	▯`7784`	BODY
120	◈`137`	BODY

	
cycle 46
121	▯`7783`	BODY
120	◈`138`	BODY

	
cycle 47
121	▯`7821`	BODY
124	#`31`	BODY
121	▯`7821`	BODY
120	◈`139`	BODY

	
cycle 48
121	▯`7820`	BODY
120	◈`140`	BODY

	
cycle 49
121	▯`7819`	BODY
120	◈`141`	BODY

	
cycle 50
121	▯`7815`	BODY
120	◈`145`	BODY

	
cycle 51
121	▯`7814`	BODY
120	◈`146`	BODY

	
cycle 52
121	▯`7813`	BODY
120	◈`147`	BODY
18	▯`8191`	BLOCK
31	h	BLOCK

	
cycle 53
121	▯`7812`	BODY
120	◈`148`	BODY

	
cycle 54
121	▯`7808`	BODY
120	◈`152`	BODY

	
cycle 55
121	▯`7807`	BODY
120	◈`153`	BODY

	
cycle 56
121	▯`7805`	BODY
122	#`19`	BODY
121	▯`7805`	BODY
120	◈`154`	BODY

	
cycle 57
121	▯`7803`	BODY
123	#`122`	BODY
121	▯`7803`	BODY
120	◈`155`	BODY

	
cycle 58
121	▯`7802`	BODY
120	◈`156`	BODY

	
cycle 59
121	▯`7821`	BODY
120	◈`137`	BODY

	
cycle 60
121	▯`7820`	BODY
120	◈`138`	BODY

	
cycle 61
121	▯`7821`	BODY
124	#`29`	BODY
121	▯`7821`	BODY
120	◈`139`	BODY

	
cycle 62
121	▯`7820`	BODY
120	◈`140`	BODY

	
cycle 63
121	▯`7819`	BODY
120	◈`141`	BODY

	
cycle 64
121	▯`7815`	BODY
120	◈`145`	BODY

	
cycle 65
121	▯`7814`	BODY
120	◈`146`	BODY

	
cycle 66
121	▯`7813`	BODY
120	◈`147`	BODY
19	#`0`	BLOCK
29	B	BLOCK

	
cycle 67
121	▯`7812`	BODY
120	◈`148`	BODY

	
cycle 68
121	▯`7808`	BODY
120	◈`152`	BODY

	
cycle 69
121	▯`7807`	BODY
120	◈`153`	BODY

	
cycle 70
121	▯`7805`	BODY
122	#`20`	BODY
121	▯`7805`	BODY
120	◈`154`	BODY

	
cycle 71
121	▯`7803`	BODY
123	#`123`	BODY
121	▯`7803`	BODY
120	◈`155`	BODY

	
cycle 72
121	▯`7802`	BODY
120	◈`156`	BODY

	
cycle 73
121	▯`7821`	BODY
120	◈`137`	BODY

	
cycle 74
121	▯`7820`	BODY
120	◈`138`	BODY

	
cycle 75
121	▯`7798`	BODY
124	#`50`	BODY
121	▯`7798`	BODY
120	◈`139`	BODY

	
cycle 76
121	▯`7797`	BODY
120	◈`140`	BODY

	
cycle 77
121	▯`7796`	BODY
120	◈`141`	BODY

	
cycle 78
121	▯`7792`	BODY
120	◈`145`	BODY

	
cycle 79
121	▯`7791`	BODY
120	◈`146`	BODY

	
cycle 80
121	▯`7790`	BODY
120	◈`147`	BODY
20	#`0`	BLOCK
50	j	BLOCK

	
cycle 81
121	▯`7789`	BODY
120	◈`148`	BODY

	
cycle 82
121	▯`7785`	BODY
120	◈`152`	BODY

	
cycle 83
121	▯`7784`	BODY
120	◈`153`	BODY

	
cycle 84
121	▯`7782`	BODY
122	#`21`	BODY
121	▯`7782`	BODY
120	◈`154`	BODY

	
cycle 85
121	▯`7780`	BODY
123	#`124`	BODY
121	▯`7780`	BODY
120	◈`155`	BODY

	
cycle 86
121	▯`7779`	BODY
120	◈`156`	BODY

	
cycle 87
121	▯`7798`	BODY
120	◈`137`	BODY

	
cycle 88
121	▯`7797`	BODY
120	◈`138`	BODY

	
cycle 89
121	▯`7769`	BODY
124	#`77`	BODY
121	▯`7769`	BODY
120	◈`139`	BODY

	
cycle 90
121	▯`7768`	BODY
120	◈`140`	BODY

	
cycle 91
121	▯`7767`	BODY
120	◈`141`	BODY

	
cycle 92
121	▯`7763`	BODY
120	◈`145`	BODY

	
cycle 93
121	▯`7762`	BODY
120	◈`146`	BODY

	
cycle 94
121	▯`7761`	BODY
120	◈`147`	BODY
21	#`0`	BLOCK
77	»	BLOCK

	
cycle 95
121	▯`7760`	BODY
120	◈`148`	BODY

	
cycle 96
121	▯`7756`	BODY
120	◈`152`	BODY

	
cycle 97
121	▯`7755`	BODY
120	◈`153`	BODY

	
cycle 98
121	▯`7753`	BODY
122	#`22`	BODY
121	▯`7753`	BODY
120	◈`154`	BODY

	
cycle 99
121	▯`7751`	BODY
123	#`125`	BODY
121	▯`7751`	BODY
120	◈`155`	BODY

	
cycle 100
121	▯`7750`	BODY
120	◈`156`	BODY

	
cycle 101
121	▯`7769`	BODY
120	◈`137`	BODY

	
cycle 102
121	▯`7768`	BODY
120	◈`138`	BODY

	
cycle 103
121	▯`7758`	BODY
124	#`86`	BODY
121	▯`7758`	BODY
120	◈`139`	BODY

	
cycle 104
121	▯`7757`	BODY
120	◈`140`	BODY

	
cycle 105
121	▯`7756`	BODY
120	◈`141`	BODY

	
cycle 106
121	▯`7752`	BODY
120	◈`145`	BODY

	
cycle 107
121	▯`7751`	BODY
120	◈`146`	BODY

	
cycle 108
121	▯`7750`	BODY
120	◈`147`	BODY
22	#`0`	BLOCK
86	]	BLOCK

	
cycle 109
121	▯`7749`	BODY
120	◈`148`	BODY

	
cycle 110
121	▯`7745`	BODY
120	◈`152`	BODY

	
cycle 111
121	▯`7744`	BODY
120	◈`153`	BODY

	
cycle 112
121	▯`7742`	BODY
122	#`23`	BODY
121	▯`7742`	BODY
120	◈`154`	BODY

	
cycle 113
121	▯`7740`	BODY
123	#`126`	BODY
121	▯`7740`	BODY
120	◈`155`	BODY

	
cycle 114
121	▯`7739`	BODY
120	◈`156`	BODY

	
cycle 115
121	▯`7758`	BODY
120	◈`137`	BODY

	
cycle 116
121	▯`7757`	BODY
120	◈`138`	BODY

	
cycle 117
121	▯`7720`	BODY
124	#`122`	BODY
121	▯`7720`	BODY
120	◈`139`	BODY
