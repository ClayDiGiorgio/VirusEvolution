body len = 13
header len = 3
body opener = "`"
body closer = "`"
OPCODE DATA

Flag Names: ['special', 'isRegister', 'isNonNull']

Flag Codes:
{   '000': {   'code': '0000',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7fe16ffa3840>,
               'name': 'uninitialized block',
               'symbol': '░',
               'type': 'uninitialized'},
    '001': {   'code': None,
               'default body': None,
               'execute?': True,
               'interpret body': <function Opcodes.<lambda> at 0x7fe16ffa3bf8>,
               'name': 'instruction block',
               'symbol': None,
               'type': 'instruction'},
    '010': {   'code': 'REGn',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7fe16ffa3950>,
               'name': 'register with a null value',
               'symbol': '_',
               'type': 'register'},
    '011': {   'code': 'REG#',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7fe16ffa38c8>,
               'name': 'register',
               'symbol': '#',
               'type': 'register'},
    '100': {   'code': 'EXEn',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7fe16ffa3b70>,
               'name': 'dormant executor',
               'symbol': '◇',
               'type': 'executor'},
    '101': {   'code': 'EXEC',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7fe16ffa3ae8>,
               'name': 'executor',
               'symbol': '◈',
               'type': 'executor'},
    '110': {   'code': 'DMPn',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7fe16ffa3a60>,
               'name': 'dump register with a null value',
               'symbol': '█',
               'type': 'dump register'},
    '111': {   'code': 'DUMP',
               'default body': '1111111111111',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7fe16ffa39d8>,
               'name': 'dump register',
               'symbol': '▯',
               'type': 'dump register'}}


Instruction Codes:
[   {   'arg count': 0,
        'code': 'NOOP',
        'description': 'No operation',
        'function': <function noOp at 0x7fe16ffa22f0>,
        'symbol': ' ',
        'type': 'noop'},
    {   'arg count': 0,
        'code': 'ARG0',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7fe16ffa22f0>,
        'symbol': '0',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG1',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7fe16ffa22f0>,
        'symbol': '1',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG2',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7fe16ffa22f0>,
        'symbol': '2',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG3',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7fe16ffa22f0>,
        'symbol': '3',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG4',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7fe16ffa22f0>,
        'symbol': '4',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG5',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7fe16ffa22f0>,
        'symbol': '5',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG6',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7fe16ffa22f0>,
        'symbol': '6',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG7',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7fe16ffa22f0>,
        'symbol': '7',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG8',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7fe16ffa22f0>,
        'symbol': '8',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG9',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7fe16ffa22f0>,
        'symbol': '9',
        'type': 'arg'},
    {   'arg count': 1,
        'code': 'JMPR',
        'description': 'Jump to the address in r0.',
        'function': <function jumpR at 0x7fe16ffa2378>,
        'symbol': '%',
        'type': 'jump'},
    {   'arg count': 0,
        'code': 'JMPB',
        'description': 'Jump backwards to the first lock matching the '
                       'following key',
        'function': <function jumpB at 0x7fe16ffa2400>,
        'symbol': '(',
        'type': 'jump'},
    {   'arg count': 0,
        'code': 'JMPF',
        'description': 'Jump forwards to the first lock matching the following '
                       'key',
        'function': <function jumpF at 0x7fe16ffa2488>,
        'symbol': ')',
        'type': 'jump'},
    {   'arg count': 1,
        'code': 'ADRB',
        'description': 'Look backwards to the first lock matching the '
                       'following key, store its address in r0',
        'function': <function addressOfJumpB at 0x7fe16ffa2510>,
        'symbol': '[',
        'type': 'lookaround'},
    {   'arg count': 1,
        'code': 'ADRF',
        'description': 'Look forwards to the first lock matching the following '
                       'key, store its address in r0',
        'function': <function addressOfJumpF at 0x7fe16ffa2598>,
        'symbol': ']',
        'type': 'lookaround'},
    {   'arg count': 3,
        'code': 'SERB',
        'description': 'Starting from [r0], look backwards for the first '
                       'instruction matching the instruction at [r1], store '
                       'its address in r2',
        'function': <function addressOfInstructionB at 0x7fe16ffa2620>,
        'symbol': '<',
        'type': 'lookaround'},
    {   'arg count': 3,
        'code': 'SERF',
        'description': 'Starting from [r0], look forwards for the first '
                       'instruction matching the instruction at [r1], store '
                       'its address in r2',
        'function': <function addressOfInstructionF at 0x7fe16ffa26a8>,
        'symbol': '>',
        'type': 'lookaround'},
    {   'arg count': 1,
        'code': 'IFNZ',
        'description': 'if [r0] is not 0, execute the following instruction, '
                       'otherwise, skip to the next non-argument instruction',
        'function': <function skipIfZero at 0x7fe16ffa2730>,
        'symbol': '?',
        'type': 'if'},
    {   'arg count': 1,
        'code': 'IFNN',
        'description': 'if [r0] is not null, execute the following '
                       'instruction, otherwise, skip to the next non-argument '
                       'instruction',
        'function': <function skipIfNull at 0x7fe16ffa27b8>,
        'symbol': '‽',
        'type': 'if'},
    {   'arg count': 0,
        'code': 'IFDZ',
        'description': 'if the instruction at the address in r0 is the same as '
                       "the instruction at the address in r1 (or if they're "
                       'both registers, dump registers, or executors), execute '
                       'the next instruction, otherwise, skip to the next '
                       'non-argument instruction',
        'function': <function skipIfDumpIsZero at 0x7fe16ffa2840>,
        'symbol': '¿',
        'type': 'if'},
    {   'arg count': 2,
        'code': 'IFBE',
        'description': 'if the instruction at the address in r0 is the same as '
                       "the instruction at the address in r1 (or if they're "
                       'both registers, dump registers, or executors), execute '
                       'the next instruction, otherwise, skip to the next '
                       'non-argument instruction',
        'function': <function skipUnlessEquiv at 0x7fe16ffa28c8>,
        'symbol': '⸘',
        'type': 'if'},
    {   'arg count': 2,
        'code': 'IFEQ',
        'description': 'if [r0] == [r1], execute the next instruction, '
                       'otherwise, skip to the next non-argument instruction',
        'function': <function skipUnlessEqual at 0x7fe16ffa2950>,
        'symbol': '=',
        'type': 'if'},
    {   'arg count': 3,
        'code': 'ADDr',
        'description': "Add registers' contents ([r0] = [r1] + [r2])",
        'function': <function add at 0x7fe16ffa29d8>,
        'symbol': '+',
        'type': 'arithmetic'},
    {   'arg count': 3,
        'code': 'SUBr',
        'description': "Subtract registers' contents ([r0] = [r1] - [r2])",
        'function': <function subtract at 0x7fe16ffa2a60>,
        'symbol': '-',
        'type': 'arithmetic'},
    {   'arg count': 3,
        'code': 'MULr',
        'description': "Multiply registers' contents ([r0] = [r1] * [r2])",
        'function': <function multiply at 0x7fe16ffa2ae8>,
        'symbol': '*',
        'type': 'arithmetic'},
    {   'arg count': 3,
        'code': 'DIVr',
        'description': "Divide registers' contents ([r0] = [r1] ÷ [r2])",
        'function': <function divide at 0x7fe16ffa2b70>,
        'symbol': '÷',
        'type': 'arithmetic'},
    {   'arg count': 1,
        'code': 'INCr',
        'description': "Increment register's contents ([r0]++)",
        'function': <function increment at 0x7fe16ffa2e18>,
        'symbol': '^',
        'type': 'arithmetic'},
    {   'arg count': 1,
        'code': 'DECr',
        'description': "Decrement register's contents ([r0]--)",
        'function': <function decrement at 0x7fe16ffa2ea0>,
        'symbol': 'v',
        'type': 'arithmetic'},
    {   'arg count': 1,
        'code': 'NOTr',
        'description': "Bitwise NOT register's contents ([r0] = ![r0])",
        'function': <function bitwiseInverse at 0x7fe16ffa2f28>,
        'symbol': '!',
        'type': 'bitwise'},
    {   'arg count': 1,
        'code': 'SHFL',
        'description': "Bitwise left shift register's contents ([r0] = [r0] << "
                       '1)',
        'function': <function bitwiseShiftLeft at 0x7fe16ffa3048>,
        'symbol': '«',
        'type': 'bitwise'},
    {   'arg count': 1,
        'code': 'SHFR',
        'description': "Bitwise right shift register's contents ([r0] = [r0] "
                       '>> 1)',
        'function': <function bitwiseShiftRight at 0x7fe16ffa30d0>,
        'symbol': '»',
        'type': 'bitwise'},
    {   'arg count': 3,
        'code': 'ANDr',
        'description': "Bitwise AND register's contents ([r0] = [r1] & [r2])",
        'function': <function bitwiseAND at 0x7fe16ffa2bf8>,
        'symbol': '&',
        'type': 'bitwise'},
    {   'arg count': 3,
        'code': 'ORr-',
        'description': "Bitwise OR register's contents ([r0] = [r1] | [r2])",
        'function': <function bitwiseOR at 0x7fe16ffa2c80>,
        'symbol': '|',
        'type': 'bitwise'},
    {   'arg count': 3,
        'code': 'XORr',
        'description': "Bitwise XOR register's contents ([r0] = [r1] ^ [r2])",
        'function': <function bitwiseXOR at 0x7fe16ffa2d08>,
        'symbol': '⊕',
        'type': 'bitwise'},
    {   'arg count': 1,
        'code': 'ZERO',
        'description': 'Set register contents to 0 ([r0] = 0)',
        'function': <function setToZero at 0x7fe16ffa3158>,
        'symbol': 'z',
        'type': 'set'},
    {   'arg count': 1,
        'code': 'UNIT',
        'description': 'Set register contents to 1 ([r0] = 1)',
        'function': <function setToOne at 0x7fe16ffa31e0>,
        'symbol': 'u',
        'type': 'set'},
    {   'arg count': 1,
        'code': 'RAND',
        'description': 'Sets [r0] to a random valid address.',
        'function': <function setToRand at 0x7fe16ffa32f0>,
        'symbol': 'r',
        'type': 'set'},
    {   'arg count': 1,
        'code': 'NULL',
        'description': 'Sets [r0] to null.',
        'function': <function setToNull at 0x7fe16ffa3268>,
        'symbol': 'n',
        'type': 'set'},
    {   'arg count': 2,
        'code': 'CPYr',
        'description': 'Copy [r0] into r1',
        'function': <function copy at 0x7fe16ffa3400>,
        'symbol': '"',
        'type': 'clone/swap'},
    {   'arg count': 2,
        'code': 'SWPr',
        'description': 'Swap [r0] into r1 and [r1] into r0',
        'function': <function swap at 0x7fe16ffa3488>,
        'symbol': 'x',
        'type': 'clone/swap'},
    {   'arg count': 1,
        'code': 'POPr',
        'description': 'Pop into r0 a value from the first stack found '
                       'immediately after the first matching lock found after '
                       'this executor',
        'function': <function pop at 0x7fe16ffa3598>,
        'symbol': '↑',
        'type': 'stack'},
    {   'arg count': 1,
        'code': 'PSHr',
        'description': 'Push [r0] to the first stack found immediately after '
                       'the first matching lock found after this executor',
        'function': <function push at 0x7fe16ffa3510>,
        'symbol': '↓',
        'type': 'stack'},
    {   'arg count': 0,
        'code': 'CLAM',
        'description': "A claim marker, used to stake an executor's territory; "
                       'the boundaries of an organism. Also functions as lock.',
        'function': <function noOp at 0x7fe16ffa22f0>,
        'symbol': 'T',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'CLMk',
        'description': 'A claim marker key, matches to a claim marker.',
        'function': <function noOp at 0x7fe16ffa22f0>,
        'symbol': 't',
        'type': 'key'},
    {   'arg count': 2,
        'code': 'MNTR',
        'description': 'Sets [r0] to the address most recently checked within '
                       "this executor's claim boundaries, and [r1] to the "
                       'address of the instruction that checked it. Both are '
                       'set to null if no checks have been recently made.',
        'function': <function monitor at 0x7fe16ffa36a8>,
        'symbol': '~',
        'type': 'monitor'},
    {   'arg count': 2,
        'code': 'ADRS',
        'description': 'Swap the memory block at [r0] with the block at [r1]',
        'function': <function swapMemoryBlocks at 0x7fe16ffa3620>,
        'symbol': '$',
        'type': 'memwrite'},
    {   'arg count': 1,
        'code': 'INIT',
        'description': 'Initializes the executor at the address contained in '
                       'r0. (Sets it to non-dormant and sets its instruction '
                       'pointer to itself.)',
        'function': <function initializeExecutor at 0x7fe16ffa3730>,
        'symbol': ':',
        'type': 'init'},
    {   'arg count': 1,
        'code': 'DINT',
        'description': 'Denitializes the executor at the address contained in '
                       'r0. (Sets it to dormant.)',
        'function': <function denitializeExecutor at 0x7fe16ffa37b8>,
        'symbol': '.',
        'type': 'deinit'},
    {   'arg count': 0,
        'code': 'KEYA',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7fe16ffa22f0>,
        'symbol': 'a',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYB',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7fe16ffa22f0>,
        'symbol': 'b',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYC',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7fe16ffa22f0>,
        'symbol': 'c',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYD',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7fe16ffa22f0>,
        'symbol': 'd',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYE',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7fe16ffa22f0>,
        'symbol': 'e',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYF',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7fe16ffa22f0>,
        'symbol': 'f',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYG',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7fe16ffa22f0>,
        'symbol': 'g',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYH',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7fe16ffa22f0>,
        'symbol': 'h',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYI',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7fe16ffa22f0>,
        'symbol': 'i',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYJ',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7fe16ffa22f0>,
        'symbol': 'j',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYK',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7fe16ffa22f0>,
        'symbol': 'k',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYL',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7fe16ffa22f0>,
        'symbol': 'l',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYM',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7fe16ffa22f0>,
        'symbol': 'm',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'LOKA',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7fe16ffa22f0>,
        'symbol': 'A',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKB',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7fe16ffa22f0>,
        'symbol': 'B',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKC',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7fe16ffa22f0>,
        'symbol': 'C',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKD',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7fe16ffa22f0>,
        'symbol': 'D',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKE',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7fe16ffa22f0>,
        'symbol': 'E',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKF',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7fe16ffa22f0>,
        'symbol': 'F',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKG',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7fe16ffa22f0>,
        'symbol': 'G',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKH',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7fe16ffa22f0>,
        'symbol': 'H',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKI',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7fe16ffa22f0>,
        'symbol': 'I',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKJ',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7fe16ffa22f0>,
        'symbol': 'J',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKK',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7fe16ffa22f0>,
        'symbol': 'K',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKL',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7fe16ffa22f0>,
        'symbol': 'L',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKM',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7fe16ffa22f0>,
        'symbol': 'M',
        'type': 'lock'}]


INITIAL SOUP
5*↓8k↑C~0Cn*‽ m>÷F0"3tL55▯◇▯9=tg÷x↑>↑?LG?81iT7)«LL&9K!)!0l¿v)j4⸘+M5FKbM284m5T~2D
▯d=>g?#?]65i÷Db-^k#c!3>ij$F|r◇&* ii0÷⸘)]M¿e]⸘Lj:&v1÷ni]‽c+◇95lT*TCha⸘tkh⸘i)b>K9+
mz~--j↓⸘*%j!u)¿rkv*t2MAuLC!+I◇↑=n↑In<z↑Tk!0cn)«▯>[÷*7‽)◇⸘Mxbr6~T◈▯#####[t1]t3r"0
4B>‽2)c(tC$2=13)d^^1(bD^4:4(tTmix[4)1↓↑>-.^5j‽:CGL^uubc93(2$aTaz#⊕BAa1nuI.uF«Gj~
.[x»)n▯G1L[»agH◇>LCT0~1nL"Hr4xf⊕i1K|71#tEL~-:◇bk<M~r↑Fn¿EMI>3⊕«j÷ G÷5n]<-‽mDC54[
BHt0»r|+6%T4d6⸘(L÷◇A|Mt⊕5Cfir!f$f&36~^vjcgvMH(h!«l=K2F2iA1=dmH⊕Dvj|h%[«B«6«7lxD[
)"f◇$⊕LT»↓?⸘09$m◇6La«mu↑(hJ*njJ!rb↑xdI)a)%j)lnk▯▯u:=|Fc=)#.¿)h&1#Jk1m&m«FJ»<]⸘¿<
=9c)&~k)Dv-vM% ¿h<$f]zvt¿?8b!)◇zlxTxu(nkhE«Fi&FjDe◇zL[[L3fHG1v4$2d-IdKIK7A%M3*⸘ 
⊕$dTrrxd|e↓v-↑TzF◇5+k.j4~-|6⊕H9»!g⸘|j<=fv▯◇9?b*Ji#v‽8=D1Tr!7!Egcl>0÷◇$xB013?i⊕1>
&-«÷↓:¿‽>J)6↓ibGlK.rLGz%c2◇^#÷xT<4%JGIg7-aA#»rb)&u(r▯]g=.tg&:EGC⊕keAFDDua$g>#a!G
M⊕gkLD<B$eE%aIa"Dg⊕÷"bjfL7vD↓1*[6uE$C[v3a6⊕l4#GgKC6ca^MT<trKua↓C(*]t3+÷«cMK~0 A8
?i1GM4b:k◇5BELbam%|MKMjKf▯]*v(]Mg<M⊕⊕!+g<AA↑«T?3◇L&◇E~*m&x.ATID↑-«)A5r9a&<.5%Ha#
Ii!9zC⊕"1gCJkgkaTa↑1IfbK*◇5:fC6E↑|«1hB$)

BODIES:
25	▯`8191`
26	◇`None`
27	▯`8191`
80	▯`8191`
86	#`0`
98	#`0`
109	◇`None`
138	◇`None`
189	◇`None`
207	▯`8191`
215	◇`None`
224	◈`224`
225	▯`8191`
226	#`0`
227	#`0`
228	#`0`
229	#`0`
230	#`0`
304	#`0`
326	▯`8191`
335	◇`None`
358	#`0`
365	◇`None`
418	◇`None`
483	◇`None`
496	◇`None`
527	▯`8191`
528	▯`8191`
537	#`0`
544	#`0`
590	◇`None`
610	◇`None`
657	◇`None`
681	▯`8191`
682	◇`None`
689	#`0`
708	◇`None`
746	◇`None`
748	#`0`
763	#`0`
772	▯`8191`
796	#`0`
845	#`0`
889	◇`None`
905	▯`8191`
928	◇`None`
931	◇`None`
959	#`0`
985	◇`None`

	
cycle 1
225	▯`8190`	BODY
224	◈`225`	BODY

	
cycle 2
225	▯`8189`	BODY
224	◈`226`	BODY

	
cycle 3
225	▯`8188`	BODY
226	#`0`	BODY
225	▯`8188`	BODY
224	◈`227`	BODY

	
cycle 4
225	▯`8187`	BODY
227	#`0`	BODY
225	▯`8187`	BODY
224	◈`228`	BODY

	
cycle 5
225	▯`8186`	BODY
228	#`0`	BODY
225	▯`8186`	BODY
224	◈`229`	BODY

	
cycle 6
225	▯`8185`	BODY
229	#`0`	BODY
225	▯`8185`	BODY
224	◈`230`	BODY

	
cycle 7
225	▯`8184`	BODY
230	#`0`	BODY
225	▯`8184`	BODY
224	◈`231`	BODY

	
cycle 8
225	▯`7960`	BODY
227	#`223`	BODY
225	▯`7960`	BODY
224	◈`232`	BODY

	
cycle 9
225	▯`7959`	BODY
224	◈`233`	BODY

	
cycle 10
225	▯`7958`	BODY
224	◈`234`	BODY

	
cycle 11
225	▯`7688`	BODY
229	#`269`	BODY
225	▯`7688`	BODY
224	◈`235`	BODY

	
cycle 12
225	▯`7687`	BODY
224	◈`236`	BODY

	
cycle 13
225	▯`7686`	BODY
224	◈`237`	BODY

	
cycle 14
225	▯`7113`	BODY
226	#`572`	BODY
225	▯`7113`	BODY
224	◈`238`	BODY

	
cycle 15
225	▯`6540`	BODY
230	#`572`	BODY
225	▯`6540`	BODY
224	◈`239`	BODY

	
cycle 16
225	▯`6539`	BODY
224	◈`240`	BODY

	
cycle 17
225	▯`6538`	BODY
224	◈`241`	BODY

	
cycle 18
225	▯`6537`	BODY
224	◈`242`	BODY

	
cycle 19
225	▯`5942`	BODY
228	#`594`	BODY
225	▯`5942`	BODY
224	◈`243`	BODY

	
cycle 20
225	▯`5941`	BODY
224	◈`244`	BODY

	
cycle 21
225	▯`5940`	BODY
224	◈`245`	BODY

	
cycle 22
225	▯`5936`	BODY
224	◈`249`	BODY

	
cycle 23
225	▯`5935`	BODY
224	◈`250`	BODY

	
cycle 24
225	▯`5934`	BODY
224	◈`251`	BODY
572	T	BLOCK
594	M	BLOCK

	
cycle 25
225	▯`5933`	BODY
224	◈`252`	BODY

	
cycle 26
225	▯`5929`	BODY
224	◈`256`	BODY

	
cycle 27
225	▯`5928`	BODY
224	◈`257`	BODY

	
cycle 28
225	▯`5926`	BODY
226	#`573`	BODY
225	▯`5926`	BODY
224	◈`258`	BODY

	
cycle 29
225	▯`5924`	BODY
227	#`224`	BODY
225	▯`5924`	BODY
224	◈`259`	BODY

	
cycle 30
225	▯`5923`	BODY
224	◈`260`	BODY

	
cycle 31
225	▯`5942`	BODY
224	◈`241`	BODY

	
cycle 32
225	▯`5941`	BODY
224	◈`242`	BODY

	
cycle 33
225	▯`5944`	BODY
228	#`590`	BODY
225	▯`5944`	BODY
224	◈`243`	BODY

	
cycle 34
225	▯`5943`	BODY
224	◈`244`	BODY

	
cycle 35
225	▯`5942`	BODY
224	◈`245`	BODY

	
cycle 36
225	▯`5938`	BODY
224	◈`249`	BODY

	
cycle 37
225	▯`5937`	BODY
224	◈`250`	BODY

	
cycle 38
225	▯`5936`	BODY
224	◈`251`	BODY
573	◇`None`	BLOCK
590	%	BLOCK

	
cycle 39
225	▯`5935`	BODY
224	◈`252`	BODY

	
cycle 40
225	▯`5931`	BODY
224	◈`256`	BODY

	
cycle 41
225	▯`5930`	BODY
224	◈`257`	BODY

	
cycle 42
225	▯`5928`	BODY
226	#`574`	BODY
225	▯`5928`	BODY
224	◈`258`	BODY

	
cycle 43
225	▯`5926`	BODY
227	#`225`	BODY
225	▯`5926`	BODY
224	◈`259`	BODY

	
cycle 44
225	▯`5925`	BODY
224	◈`260`	BODY

	
cycle 45
225	▯`5944`	BODY
224	◈`241`	BODY

	
cycle 46
225	▯`5943`	BODY
224	◈`242`	BODY

	
cycle 47
225	▯`5851`	BODY
228	#`681`	BODY
225	▯`5851`	BODY
224	◈`243`	BODY

	
cycle 48
225	▯`5850`	BODY
224	◈`244`	BODY

	
cycle 49
225	▯`5849`	BODY
224	◈`245`	BODY

	
cycle 50
225	▯`5845`	BODY
224	◈`249`	BODY

	
cycle 51
225	▯`5844`	BODY
224	◈`250`	BODY

	
cycle 52
225	▯`5843`	BODY
224	◈`251`	BODY
574	▯`8191`	BLOCK
681	 	BLOCK

	
cycle 53
225	▯`5842`	BODY
224	◈`252`	BODY

	
cycle 54
225	▯`5838`	BODY
224	◈`256`	BODY

	
cycle 55
225	▯`5837`	BODY
224	◈`257`	BODY

	
cycle 56
225	▯`5835`	BODY
226	#`575`	BODY
225	▯`5835`	BODY
224	◈`258`	BODY

	
cycle 57
225	▯`5833`	BODY
227	#`226`	BODY
225	▯`5833`	BODY
224	◈`259`	BODY

	
cycle 58
225	▯`5832`	BODY
224	◈`260`	BODY

	
cycle 59
225	▯`5851`	BODY
224	◈`241`	BODY

	
cycle 60
225	▯`5850`	BODY
224	◈`242`	BODY

	
cycle 61
225	▯`5841`	BODY
228	#`689`	BODY
225	▯`5841`	BODY
224	◈`243`	BODY

	
cycle 62
225	▯`5840`	BODY
224	◈`244`	BODY

	
cycle 63
225	▯`5839`	BODY
224	◈`245`	BODY

	
cycle 64
225	▯`5835`	BODY
224	◈`249`	BODY

	
cycle 65
225	▯`5834`	BODY
224	◈`250`	BODY

	
cycle 66
225	▯`5833`	BODY
224	◈`251`	BODY
575	#`0`	BLOCK
689	¿	BLOCK

	
cycle 67
225	▯`5832`	BODY
224	◈`252`	BODY

	
cycle 68
225	▯`5828`	BODY
224	◈`256`	BODY

	
cycle 69
225	▯`5827`	BODY
224	◈`257`	BODY

	
cycle 70
225	▯`5825`	BODY
226	#`576`	BODY
225	▯`5825`	BODY
224	◈`258`	BODY

	
cycle 71
225	▯`5823`	BODY
227	#`227`	BODY
225	▯`5823`	BODY
224	◈`259`	BODY

	
cycle 72
225	▯`5822`	BODY
224	◈`260`	BODY

	
cycle 73
225	▯`5841`	BODY
224	◈`241`	BODY

	
cycle 74
225	▯`5840`	BODY
224	◈`242`	BODY

	
cycle 75
225	▯`5780`	BODY
228	#`748`	BODY
225	▯`5780`	BODY
224	◈`243`	BODY

	
cycle 76
225	▯`5779`	BODY
224	◈`244`	BODY

	
cycle 77
225	▯`5778`	BODY
224	◈`245`	BODY

	
cycle 78
225	▯`5774`	BODY
224	◈`249`	BODY

	
cycle 79
225	▯`5773`	BODY
224	◈`250`	BODY

	
cycle 80
225	▯`5772`	BODY
224	◈`251`	BODY
576	#`0`	BLOCK
748	h	BLOCK

	
cycle 81
225	▯`5771`	BODY
224	◈`252`	BODY

	
cycle 82
225	▯`5767`	BODY
224	◈`256`	BODY

	
cycle 83
225	▯`5766`	BODY
224	◈`257`	BODY

	
cycle 84
225	▯`5764`	BODY
226	#`577`	BODY
225	▯`5764`	BODY
224	◈`258`	BODY

	
cycle 85
225	▯`5762`	BODY
227	#`228`	BODY
225	▯`5762`	BODY
224	◈`259`	BODY

	
cycle 86
225	▯`5761`	BODY
224	◈`260`	BODY

	
cycle 87
225	▯`5780`	BODY
224	◈`241`	BODY

	
cycle 88
225	▯`5779`	BODY
224	◈`242`	BODY

	
cycle 89
225	▯`5763`	BODY
228	#`763`	BODY
225	▯`5763`	BODY
224	◈`243`	BODY

	
cycle 90
225	▯`5762`	BODY
224	◈`244`	BODY

	
cycle 91
225	▯`5761`	BODY
224	◈`245`	BODY

	
cycle 92
225	▯`5757`	BODY
224	◈`249`	BODY

	
cycle 93
225	▯`5756`	BODY
224	◈`250`	BODY

	
cycle 94
225	▯`5755`	BODY
224	◈`251`	BODY
577	#`0`	BLOCK
763	<	BLOCK

	
cycle 95
225	▯`5754`	BODY
224	◈`252`	BODY

	
cycle 96
225	▯`5750`	BODY
224	◈`256`	BODY

	
cycle 97
225	▯`5749`	BODY
224	◈`257`	BODY

	
cycle 98
225	▯`5747`	BODY
226	#`578`	BODY
225	▯`5747`	BODY
224	◈`258`	BODY

	
cycle 99
225	▯`5745`	BODY
227	#`229`	BODY
225	▯`5745`	BODY
224	◈`259`	BODY

	
cycle 100
225	▯`5744`	BODY
224	◈`260`	BODY

	
cycle 101
225	▯`5763`	BODY
224	◈`241`	BODY

	
cycle 102
225	▯`5762`	BODY
224	◈`242`	BODY

	
cycle 103
225	▯`5728`	BODY
228	#`796`	BODY
225	▯`5728`	BODY
224	◈`243`	BODY

	
cycle 104
225	▯`5727`	BODY
224	◈`244`	BODY

	
cycle 105
225	▯`5726`	BODY
224	◈`245`	BODY

	
cycle 106
225	▯`5722`	BODY
224	◈`249`	BODY

	
cycle 107
225	▯`5721`	BODY
224	◈`250`	BODY

	
cycle 108
225	▯`5720`	BODY
224	◈`251`	BODY
578	#`0`	BLOCK
796	$	BLOCK

	
cycle 109
225	▯`5719`	BODY
224	◈`252`	BODY

	
cycle 110
225	▯`5715`	BODY
224	◈`256`	BODY

	
cycle 111
225	▯`5714`	BODY
224	◈`257`	BODY

	
cycle 112
225	▯`5712`	BODY
226	#`579`	BODY
225	▯`5712`	BODY
224	◈`258`	BODY

	
cycle 113
225	▯`5710`	BODY
227	#`230`	BODY
225	▯`5710`	BODY
224	◈`259`	BODY

	
cycle 114
225	▯`5709`	BODY
224	◈`260`	BODY

	
cycle 115
225	▯`5728`	BODY
224	◈`241`	BODY
