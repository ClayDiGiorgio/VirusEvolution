body len = 13
header len = 3
body opener = "`"
body closer = "`"
OPCODE DATA

Flag Names: ['special', 'isRegister', 'isNonNull']

Flag Codes:
{   '000': {   'code': '0000',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f8cb6879840>,
               'name': 'uninitialized block',
               'symbol': '░',
               'type': 'uninitialized'},
    '001': {   'code': None,
               'default body': None,
               'execute?': True,
               'interpret body': <function Opcodes.<lambda> at 0x7f8cb6879bf8>,
               'name': 'instruction block',
               'symbol': None,
               'type': 'instruction'},
    '010': {   'code': 'REGn',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f8cb6879950>,
               'name': 'register with a null value',
               'symbol': '_',
               'type': 'register'},
    '011': {   'code': 'REG#',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f8cb68798c8>,
               'name': 'register',
               'symbol': '#',
               'type': 'register'},
    '100': {   'code': 'EXEn',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f8cb6879b70>,
               'name': 'dormant executor',
               'symbol': '◇',
               'type': 'executor'},
    '101': {   'code': 'EXEC',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f8cb6879ae8>,
               'name': 'executor',
               'symbol': '◈',
               'type': 'executor'},
    '110': {   'code': 'DMPn',
               'default body': '0000000000000',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f8cb6879a60>,
               'name': 'dump register with a null value',
               'symbol': '█',
               'type': 'dump register'},
    '111': {   'code': 'DUMP',
               'default body': '1111111111111',
               'execute?': False,
               'interpret body': <function Opcodes.<lambda> at 0x7f8cb68799d8>,
               'name': 'dump register',
               'symbol': '▯',
               'type': 'dump register'}}


Instruction Codes:
[   {   'arg count': 0,
        'code': 'NOOP',
        'description': 'No operation',
        'function': <function noOp at 0x7f8cb68782f0>,
        'symbol': ' ',
        'type': 'noop'},
    {   'arg count': 0,
        'code': 'ARG0',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f8cb68782f0>,
        'symbol': '0',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG1',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f8cb68782f0>,
        'symbol': '1',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG2',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f8cb68782f0>,
        'symbol': '2',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG3',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f8cb68782f0>,
        'symbol': '3',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG4',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f8cb68782f0>,
        'symbol': '4',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG5',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f8cb68782f0>,
        'symbol': '5',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG6',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f8cb68782f0>,
        'symbol': '6',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG7',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f8cb68782f0>,
        'symbol': '7',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG8',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f8cb68782f0>,
        'symbol': '8',
        'type': 'arg'},
    {   'arg count': 0,
        'code': 'ARG9',
        'description': 'No operation. Modifies registers to be used by '
                       'previous instruction',
        'function': <function noOp at 0x7f8cb68782f0>,
        'symbol': '9',
        'type': 'arg'},
    {   'arg count': 1,
        'code': 'JMPR',
        'description': 'Jump to the address in r0.',
        'function': <function jumpR at 0x7f8cb6878378>,
        'symbol': '%',
        'type': 'jump'},
    {   'arg count': 0,
        'code': 'JMPB',
        'description': 'Jump backwards to the first lock matching the '
                       'following key',
        'function': <function jumpB at 0x7f8cb6878400>,
        'symbol': '(',
        'type': 'jump'},
    {   'arg count': 0,
        'code': 'JMPF',
        'description': 'Jump forwards to the first lock matching the following '
                       'key',
        'function': <function jumpF at 0x7f8cb6878488>,
        'symbol': ')',
        'type': 'jump'},
    {   'arg count': 1,
        'code': 'ADRB',
        'description': 'Look backwards to the first lock matching the '
                       'following key, store its address in r0',
        'function': <function addressOfJumpB at 0x7f8cb6878510>,
        'symbol': '[',
        'type': 'lookaround'},
    {   'arg count': 1,
        'code': 'ADRF',
        'description': 'Look forwards to the first lock matching the following '
                       'key, store its address in r0',
        'function': <function addressOfJumpF at 0x7f8cb6878598>,
        'symbol': ']',
        'type': 'lookaround'},
    {   'arg count': 3,
        'code': 'SERB',
        'description': 'Starting from [r0], look backwards for the first '
                       'instruction matching the instruction at [r1], store '
                       'its address in r2',
        'function': <function addressOfInstructionB at 0x7f8cb6878620>,
        'symbol': '<',
        'type': 'lookaround'},
    {   'arg count': 3,
        'code': 'SERF',
        'description': 'Starting from [r0], look forwards for the first '
                       'instruction matching the instruction at [r1], store '
                       'its address in r2',
        'function': <function addressOfInstructionF at 0x7f8cb68786a8>,
        'symbol': '>',
        'type': 'lookaround'},
    {   'arg count': 1,
        'code': 'IFNZ',
        'description': 'if [r0] is not 0, execute the following instruction, '
                       'otherwise, skip to the next non-argument instruction',
        'function': <function skipIfZero at 0x7f8cb6878730>,
        'symbol': '?',
        'type': 'if'},
    {   'arg count': 1,
        'code': 'IFNN',
        'description': 'if [r0] is not null, execute the following '
                       'instruction, otherwise, skip to the next non-argument '
                       'instruction',
        'function': <function skipIfNull at 0x7f8cb68787b8>,
        'symbol': '‽',
        'type': 'if'},
    {   'arg count': 0,
        'code': 'IFDZ',
        'description': 'if the instruction at the address in r0 is the same as '
                       "the instruction at the address in r1 (or if they're "
                       'both registers, dump registers, or executors), execute '
                       'the next instruction, otherwise, skip to the next '
                       'non-argument instruction',
        'function': <function skipIfDumpIsZero at 0x7f8cb6878840>,
        'symbol': '¿',
        'type': 'if'},
    {   'arg count': 2,
        'code': 'IFBE',
        'description': 'if the instruction at the address in r0 is the same as '
                       "the instruction at the address in r1 (or if they're "
                       'both registers, dump registers, or executors), execute '
                       'the next instruction, otherwise, skip to the next '
                       'non-argument instruction',
        'function': <function skipUnlessEquiv at 0x7f8cb68788c8>,
        'symbol': '⸘',
        'type': 'if'},
    {   'arg count': 2,
        'code': 'IFEQ',
        'description': 'if [r0] == [r1], execute the next instruction, '
                       'otherwise, skip to the next non-argument instruction',
        'function': <function skipUnlessEqual at 0x7f8cb6878950>,
        'symbol': '=',
        'type': 'if'},
    {   'arg count': 3,
        'code': 'ADDr',
        'description': "Add registers' contents ([r0] = [r1] + [r2])",
        'function': <function add at 0x7f8cb68789d8>,
        'symbol': '+',
        'type': 'arithmetic'},
    {   'arg count': 3,
        'code': 'SUBr',
        'description': "Subtract registers' contents ([r0] = [r1] - [r2])",
        'function': <function subtract at 0x7f8cb6878a60>,
        'symbol': '-',
        'type': 'arithmetic'},
    {   'arg count': 3,
        'code': 'MULr',
        'description': "Multiply registers' contents ([r0] = [r1] * [r2])",
        'function': <function multiply at 0x7f8cb6878ae8>,
        'symbol': '*',
        'type': 'arithmetic'},
    {   'arg count': 3,
        'code': 'DIVr',
        'description': "Divide registers' contents ([r0] = [r1] ÷ [r2])",
        'function': <function divide at 0x7f8cb6878b70>,
        'symbol': '÷',
        'type': 'arithmetic'},
    {   'arg count': 1,
        'code': 'INCr',
        'description': "Increment register's contents ([r0]++)",
        'function': <function increment at 0x7f8cb6878e18>,
        'symbol': '^',
        'type': 'arithmetic'},
    {   'arg count': 1,
        'code': 'DECr',
        'description': "Decrement register's contents ([r0]--)",
        'function': <function decrement at 0x7f8cb6878ea0>,
        'symbol': 'v',
        'type': 'arithmetic'},
    {   'arg count': 1,
        'code': 'NOTr',
        'description': "Bitwise NOT register's contents ([r0] = ![r0])",
        'function': <function bitwiseInverse at 0x7f8cb6878f28>,
        'symbol': '!',
        'type': 'bitwise'},
    {   'arg count': 1,
        'code': 'SHFL',
        'description': "Bitwise left shift register's contents ([r0] = [r0] << "
                       '1)',
        'function': <function bitwiseShiftLeft at 0x7f8cb6879048>,
        'symbol': '«',
        'type': 'bitwise'},
    {   'arg count': 1,
        'code': 'SHFR',
        'description': "Bitwise right shift register's contents ([r0] = [r0] "
                       '>> 1)',
        'function': <function bitwiseShiftRight at 0x7f8cb68790d0>,
        'symbol': '»',
        'type': 'bitwise'},
    {   'arg count': 3,
        'code': 'ANDr',
        'description': "Bitwise AND register's contents ([r0] = [r1] & [r2])",
        'function': <function bitwiseAND at 0x7f8cb6878bf8>,
        'symbol': '&',
        'type': 'bitwise'},
    {   'arg count': 3,
        'code': 'ORr-',
        'description': "Bitwise OR register's contents ([r0] = [r1] | [r2])",
        'function': <function bitwiseOR at 0x7f8cb6878c80>,
        'symbol': '|',
        'type': 'bitwise'},
    {   'arg count': 3,
        'code': 'XORr',
        'description': "Bitwise XOR register's contents ([r0] = [r1] ^ [r2])",
        'function': <function bitwiseXOR at 0x7f8cb6878d08>,
        'symbol': '⊕',
        'type': 'bitwise'},
    {   'arg count': 1,
        'code': 'ZERO',
        'description': 'Set register contents to 0 ([r0] = 0)',
        'function': <function setToZero at 0x7f8cb6879158>,
        'symbol': 'z',
        'type': 'set'},
    {   'arg count': 1,
        'code': 'UNIT',
        'description': 'Set register contents to 1 ([r0] = 1)',
        'function': <function setToOne at 0x7f8cb68791e0>,
        'symbol': 'u',
        'type': 'set'},
    {   'arg count': 1,
        'code': 'RAND',
        'description': 'Sets [r0] to a random valid address.',
        'function': <function setToRand at 0x7f8cb68792f0>,
        'symbol': 'r',
        'type': 'set'},
    {   'arg count': 1,
        'code': 'NULL',
        'description': 'Sets [r0] to null.',
        'function': <function setToNull at 0x7f8cb6879268>,
        'symbol': 'n',
        'type': 'set'},
    {   'arg count': 2,
        'code': 'CPYr',
        'description': 'Copy [r0] into r1',
        'function': <function copy at 0x7f8cb6879400>,
        'symbol': '"',
        'type': 'clone/swap'},
    {   'arg count': 2,
        'code': 'SWPr',
        'description': 'Swap [r0] into r1 and [r1] into r0',
        'function': <function swap at 0x7f8cb6879488>,
        'symbol': 'x',
        'type': 'clone/swap'},
    {   'arg count': 1,
        'code': 'POPr',
        'description': 'Pop into r0 a value from the first stack found '
                       'immediately after the first matching lock found after '
                       'this executor',
        'function': <function pop at 0x7f8cb6879598>,
        'symbol': '↑',
        'type': 'stack'},
    {   'arg count': 1,
        'code': 'PSHr',
        'description': 'Push [r0] to the first stack found immediately after '
                       'the first matching lock found after this executor',
        'function': <function push at 0x7f8cb6879510>,
        'symbol': '↓',
        'type': 'stack'},
    {   'arg count': 0,
        'code': 'CLAM',
        'description': "A claim marker, used to stake an executor's territory; "
                       'the boundaries of an organism. Also functions as lock.',
        'function': <function noOp at 0x7f8cb68782f0>,
        'symbol': 'T',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'CLMk',
        'description': 'A claim marker key, matches to a claim marker.',
        'function': <function noOp at 0x7f8cb68782f0>,
        'symbol': 't',
        'type': 'key'},
    {   'arg count': 2,
        'code': 'MNTR',
        'description': 'Sets [r0] to the address most recently checked within '
                       "this executor's claim boundaries, and [r1] to the "
                       'address of the instruction that checked it. Both are '
                       'set to null if no checks have been recently made.',
        'function': <function monitor at 0x7f8cb68796a8>,
        'symbol': '~',
        'type': 'monitor'},
    {   'arg count': 2,
        'code': 'ADRS',
        'description': 'Swap the memory block at [r0] with the block at [r1]',
        'function': <function swapMemoryBlocks at 0x7f8cb6879620>,
        'symbol': '$',
        'type': 'memwrite'},
    {   'arg count': 1,
        'code': 'INIT',
        'description': 'Initializes the executor at the address contained in '
                       'r0. (Sets it to non-dormant and sets its instruction '
                       'pointer to itself.)',
        'function': <function initializeExecutor at 0x7f8cb6879730>,
        'symbol': ':',
        'type': 'init'},
    {   'arg count': 1,
        'code': 'DINT',
        'description': 'Denitializes the executor at the address contained in '
                       'r0. (Sets it to dormant.)',
        'function': <function denitializeExecutor at 0x7f8cb68797b8>,
        'symbol': '.',
        'type': 'deinit'},
    {   'arg count': 0,
        'code': 'KEYA',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f8cb68782f0>,
        'symbol': 'a',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYB',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f8cb68782f0>,
        'symbol': 'b',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYC',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f8cb68782f0>,
        'symbol': 'c',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYD',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f8cb68782f0>,
        'symbol': 'd',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYE',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f8cb68782f0>,
        'symbol': 'e',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYF',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f8cb68782f0>,
        'symbol': 'f',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYG',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f8cb68782f0>,
        'symbol': 'g',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYH',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f8cb68782f0>,
        'symbol': 'h',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYI',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f8cb68782f0>,
        'symbol': 'i',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYJ',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f8cb68782f0>,
        'symbol': 'j',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYK',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f8cb68782f0>,
        'symbol': 'k',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYL',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f8cb68782f0>,
        'symbol': 'l',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'KEYM',
        'description': 'A key used by some instructions to find a matching '
                       'upper case lock',
        'function': <function noOp at 0x7f8cb68782f0>,
        'symbol': 'm',
        'type': 'key'},
    {   'arg count': 0,
        'code': 'LOKA',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f8cb68782f0>,
        'symbol': 'A',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKB',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f8cb68782f0>,
        'symbol': 'B',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKC',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f8cb68782f0>,
        'symbol': 'C',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKD',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f8cb68782f0>,
        'symbol': 'D',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKE',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f8cb68782f0>,
        'symbol': 'E',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKF',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f8cb68782f0>,
        'symbol': 'F',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKG',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f8cb68782f0>,
        'symbol': 'G',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKH',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f8cb68782f0>,
        'symbol': 'H',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKI',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f8cb68782f0>,
        'symbol': 'I',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKJ',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f8cb68782f0>,
        'symbol': 'J',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKK',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f8cb68782f0>,
        'symbol': 'K',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKL',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f8cb68782f0>,
        'symbol': 'L',
        'type': 'lock'},
    {   'arg count': 0,
        'code': 'LOKM',
        'description': 'A lock used by some instructions to match to a lower '
                       'case key',
        'function': <function noOp at 0x7f8cb68782f0>,
        'symbol': 'M',
        'type': 'lock'}]


INITIAL SOUP
4r*D#Gm»uT⸘rz^[⸘!zbnGaFj<eit)"B⊕:+]jBa1]g ⊕E<eaa»5▯!hj<LHT◈▯#####[t1]t3r"04B>‽2)
c(tC$2=13)d^^1(bD^4:4(tTA*-<1[H35kI7k-?k)#t⸘)÷⸘÷mn+I÷D<"¿?m>tkgb!¿:G0&¿#8FhGAIBL
0cmm¿503lkbA◇gr⸘z62⸘"‽FekL◇|J◇G6K⸘u&»1I↑n)xim»z|]EC.|-M|A|]81 B=÷«[2dh5 [z"Gtk⸘r
«)mFFl>)0inD«c"⸘¿?i ◇e$L2)-"+99dLtI+$1|+318crC⊕[↓[==u÷km1#e3ILaTT5mlekLilT=↑‽^*l
"u7)j|5>H‽.=x?c5+?↑‽⸘d%|+ll‽Lt(F:uh!M |~|1¿4E]I" ÷gfzH)<«FKrkF0e>~lv(<*M«e÷"$]2m
^=MD# ALA«<⊕jc2#gjtaxcm▯«gHtCJMhMD&m"-[D[J)]↓>j|%v>i?tG7¿e+vtKiuT&-9rh⊕c>L4JK«hj
÷~Dk▯Fzt%= nC+n=xrGcE|Ta~%MI9▯)F?LD7G#d:."<.B⸘av↑↑>K6L6⸘37!~iJ>EHfAACtD-[¿A◇(T.#
E&rIlC%gv↓1jv« 4<|D[ ↑5-Fj0vr01▯I(‽↓H"‽1uJeb▯9T‽▯5&kk^c÷]|(=*]Jv38¿JH&÷!uh«.E↓j!
>FB¿i*g>K4[*G]JExAFMB(»B2¿-‽]BTBt=ID1D4FTdFf 6+v↓|2+^^c(i=z&K<..%??d3IF◇<↓‽↑ f~◇
Dh¿-aJ«JTC>&"JFj"*gC:K^u%4LA▯9x$2r(>D(FI1a↓cC$D1◇2fG^bI.T↑H[⊕(↓!40M%C$$.ECn⊕÷(=¿
÷4&?5K◇z0m⊕7K]"‽?v*a9It!▯↓"tCIEMH7i]G(fI▯zn&KF]↓TgtuMt ~$+1%zHk?&uIMhaj$K$Lke»im
~"b«kJI&jB10zG]e*»++|~+aI*A⊕gG>H)GtlmChK|ntG0n5nd↑>"%0a]%t⸘&i◇<xCK↓ghTmI<>«Du9:6
⊕a-x↓Ba<"a0Ai0?!B%9vvx»8cJ(J!2~70Km»◇]Mx

BODIES:
4	#`0`
50	▯`8191`
58	◈`58`
59	▯`8191`
60	#`0`
61	#`0`
62	#`0`
63	#`0`
64	#`0`
121	#`0`
151	#`0`
172	◇`None`
186	◇`None`
189	◇`None`
260	◇`None`
297	#`0`
404	#`0`
415	#`0`
423	▯`8191`
484	▯`8191`
509	▯`8191`
517	#`0`
555	◇`None`
559	#`0`
591	▯`8191`
604	▯`8191`
608	▯`8191`
711	◇`None`
719	◇`None`
748	▯`8191`
768	◇`None`
806	◇`None`
824	▯`8191`
840	▯`8191`
941	◇`None`
996	◇`None`

	
cycle 1
59	▯`8190`	BODY
58	◈`59`	BODY

	
cycle 2
59	▯`8189`	BODY
58	◈`60`	BODY

	
cycle 3
59	▯`8188`	BODY
60	#`0`	BODY
59	▯`8188`	BODY
58	◈`61`	BODY

	
cycle 4
59	▯`8187`	BODY
61	#`0`	BODY
59	▯`8187`	BODY
58	◈`62`	BODY

	
cycle 5
59	▯`8186`	BODY
62	#`0`	BODY
59	▯`8186`	BODY
58	◈`63`	BODY

	
cycle 6
59	▯`8185`	BODY
63	#`0`	BODY
59	▯`8185`	BODY
58	◈`64`	BODY

	
cycle 7
59	▯`8184`	BODY
64	#`0`	BODY
59	▯`8184`	BODY
58	◈`65`	BODY

	
cycle 8
59	▯`8126`	BODY
61	#`57`	BODY
59	▯`8126`	BODY
58	◈`66`	BODY

	
cycle 9
59	▯`8125`	BODY
58	◈`67`	BODY

	
cycle 10
59	▯`8124`	BODY
58	◈`68`	BODY

	
cycle 11
59	▯`8020`	BODY
63	#`103`	BODY
59	▯`8020`	BODY
58	◈`69`	BODY

	
cycle 12
59	▯`8019`	BODY
58	◈`70`	BODY

	
cycle 13
59	▯`8018`	BODY
58	◈`71`	BODY

	
cycle 14
59	▯`7136`	BODY
60	#`881`	BODY
59	▯`7136`	BODY
58	◈`72`	BODY

	
cycle 15
59	▯`6254`	BODY
64	#`881`	BODY
59	▯`6254`	BODY
58	◈`73`	BODY

	
cycle 16
59	▯`6253`	BODY
58	◈`74`	BODY

	
cycle 17
59	▯`6252`	BODY
58	◈`75`	BODY

	
cycle 18
59	▯`6251`	BODY
58	◈`76`	BODY

	
cycle 19
59	▯`5301`	BODY
62	#`949`	BODY
59	▯`5301`	BODY
58	◈`77`	BODY

	
cycle 20
59	▯`5300`	BODY
58	◈`78`	BODY

	
cycle 21
59	▯`5299`	BODY
58	◈`79`	BODY

	
cycle 22
59	▯`5295`	BODY
58	◈`83`	BODY

	
cycle 23
59	▯`5294`	BODY
58	◈`84`	BODY

	
cycle 24
59	▯`5293`	BODY
58	◈`85`	BODY
881	T	BLOCK
949	"	BLOCK

	
cycle 25
59	▯`5292`	BODY
58	◈`86`	BODY

	
cycle 26
59	▯`5288`	BODY
58	◈`90`	BODY

	
cycle 27
59	▯`5287`	BODY
58	◈`91`	BODY

	
cycle 28
59	▯`5285`	BODY
60	#`882`	BODY
59	▯`5285`	BODY
58	◈`92`	BODY

	
cycle 29
59	▯`5283`	BODY
61	#`58`	BODY
59	▯`5283`	BODY
58	◈`93`	BODY

	
cycle 30
59	▯`5282`	BODY
58	◈`94`	BODY

	
cycle 31
59	▯`5301`	BODY
58	◈`75`	BODY

	
cycle 32
59	▯`5300`	BODY
58	◈`76`	BODY

	
cycle 33
59	▯`5307`	BODY
62	#`941`	BODY
59	▯`5307`	BODY
58	◈`77`	BODY

	
cycle 34
59	▯`5306`	BODY
58	◈`78`	BODY

	
cycle 35
59	▯`5305`	BODY
58	◈`79`	BODY

	
cycle 36
59	▯`5301`	BODY
58	◈`83`	BODY

	
cycle 37
59	▯`5300`	BODY
58	◈`84`	BODY

	
cycle 38
59	▯`5299`	BODY
58	◈`85`	BODY
882	◇`None`	BLOCK
941	b	BLOCK

	
cycle 39
59	▯`5298`	BODY
58	◈`86`	BODY

	
cycle 40
59	▯`5294`	BODY
58	◈`90`	BODY

	
cycle 41
59	▯`5293`	BODY
58	◈`91`	BODY

	
cycle 42
59	▯`5291`	BODY
60	#`883`	BODY
59	▯`5291`	BODY
58	◈`92`	BODY

	
cycle 43
59	▯`5289`	BODY
61	#`59`	BODY
59	▯`5289`	BODY
58	◈`93`	BODY

	
cycle 44
59	▯`5288`	BODY
58	◈`94`	BODY

	
cycle 45
59	▯`5307`	BODY
58	◈`75`	BODY

	
cycle 46
59	▯`5306`	BODY
58	◈`76`	BODY

	
cycle 47
59	▯`6246`	BODY
59	▯`6246`	BODY
58	◈`77`	BODY
62	_`None`	BLOCK

	
cycle 48
59	▯`6243`	BODY
58	◈`80`	BODY

	
cycle 49
59	▯`6242`	BODY
58	◈`81`	BODY

	
cycle 50
59	▯`6266`	BODY
58	◈`57`	BODY

	
cycle 51
59	▯`6265`	BODY
58	◈`58`	BODY

	
cycle 52
59	▯`6264`	BODY
58	◈`59`	BODY

	
cycle 53
59	▯`6263`	BODY
58	◈`60`	BODY

	
cycle 54
59	▯`7145`	BODY
60	#`0`	BODY
59	▯`7145`	BODY
58	◈`61`	BODY

	
cycle 55
59	▯`7203`	BODY
61	#`0`	BODY
59	▯`7203`	BODY
58	◈`62`	BODY

	
cycle 56
59	▯`7202`	BODY
59	▯`7202`	BODY
58	◈`63`	BODY
62	#`0`	BLOCK

	
cycle 57
59	▯`7304`	BODY
63	#`0`	BODY
59	▯`7304`	BODY
58	◈`64`	BODY

	
cycle 58
59	▯`8184`	BODY
64	#`0`	BODY
59	▯`8184`	BODY
58	◈`65`	BODY

	
cycle 59
59	▯`8126`	BODY
61	#`57`	BODY
59	▯`8126`	BODY
58	◈`66`	BODY

	
cycle 60
59	▯`8125`	BODY
58	◈`67`	BODY

	
cycle 61
59	▯`8124`	BODY
58	◈`68`	BODY

	
cycle 62
59	▯`8020`	BODY
63	#`103`	BODY
59	▯`8020`	BODY
58	◈`69`	BODY

	
cycle 63
59	▯`8019`	BODY
58	◈`70`	BODY

	
cycle 64
59	▯`8018`	BODY
58	◈`71`	BODY

	
cycle 65
59	▯`7621`	BODY
60	#`396`	BODY
59	▯`7621`	BODY
58	◈`72`	BODY

	
cycle 66
59	▯`7224`	BODY
64	#`396`	BODY
59	▯`7224`	BODY
58	◈`73`	BODY

	
cycle 67
59	▯`7223`	BODY
58	◈`74`	BODY

	
cycle 68
59	▯`7222`	BODY
58	◈`75`	BODY

	
cycle 69
59	▯`7221`	BODY
58	◈`76`	BODY

	
cycle 70
59	▯`6756`	BODY
62	#`464`	BODY
59	▯`6756`	BODY
58	◈`77`	BODY

	
cycle 71
59	▯`6755`	BODY
58	◈`78`	BODY

	
cycle 72
59	▯`6754`	BODY
58	◈`79`	BODY

	
cycle 73
59	▯`6750`	BODY
58	◈`83`	BODY

	
cycle 74
59	▯`6749`	BODY
58	◈`84`	BODY

	
cycle 75
59	▯`6748`	BODY
58	◈`85`	BODY
396	T	BLOCK
464	$	BLOCK

	
cycle 76
59	▯`6747`	BODY
58	◈`86`	BODY

	
cycle 77
59	▯`6743`	BODY
58	◈`90`	BODY

	
cycle 78
59	▯`6742`	BODY
58	◈`91`	BODY

	
cycle 79
59	▯`6740`	BODY
60	#`397`	BODY
59	▯`6740`	BODY
58	◈`92`	BODY

	
cycle 80
59	▯`6738`	BODY
61	#`58`	BODY
59	▯`6738`	BODY
58	◈`93`	BODY

	
cycle 81
59	▯`6737`	BODY
58	◈`94`	BODY

	
cycle 82
59	▯`6756`	BODY
58	◈`75`	BODY

	
cycle 83
59	▯`6755`	BODY
58	◈`76`	BODY

	
cycle 84
59	▯`6663`	BODY
62	#`555`	BODY
59	▯`6663`	BODY
58	◈`77`	BODY

	
cycle 85
59	▯`6662`	BODY
58	◈`78`	BODY

	
cycle 86
59	▯`6661`	BODY
58	◈`79`	BODY

	
cycle 87
59	▯`6657`	BODY
58	◈`83`	BODY

	
cycle 88
59	▯`6656`	BODY
58	◈`84`	BODY

	
cycle 89
59	▯`6655`	BODY
58	◈`85`	BODY
397	◇`None`	BLOCK
555	]	BLOCK

	
cycle 90
59	▯`6654`	BODY
58	◈`86`	BODY

	
cycle 91
59	▯`6650`	BODY
58	◈`90`	BODY

	
cycle 92
59	▯`6649`	BODY
58	◈`91`	BODY

	
cycle 93
59	▯`6647`	BODY
60	#`398`	BODY
59	▯`6647`	BODY
58	◈`92`	BODY

	
cycle 94
59	▯`6645`	BODY
61	#`59`	BODY
59	▯`6645`	BODY
58	◈`93`	BODY

	
cycle 95
59	▯`6644`	BODY
58	◈`94`	BODY

	
cycle 96
59	▯`6663`	BODY
58	◈`75`	BODY

	
cycle 97
59	▯`6662`	BODY
58	◈`76`	BODY

	
cycle 98
59	▯`6793`	BODY
62	#`423`	BODY
59	▯`6793`	BODY
58	◈`77`	BODY

	
cycle 99
59	▯`6792`	BODY
58	◈`78`	BODY

	
cycle 100
59	▯`6791`	BODY
58	◈`79`	BODY

	
cycle 101
59	▯`6787`	BODY
58	◈`83`	BODY

	
cycle 102
59	▯`6786`	BODY
58	◈`84`	BODY

	
cycle 103
59	▯`6785`	BODY
58	◈`85`	BODY
398	▯`8191`	BLOCK
423	2	BLOCK

	
cycle 104
59	▯`6784`	BODY
58	◈`86`	BODY

	
cycle 105
59	▯`6780`	BODY
58	◈`90`	BODY

	
cycle 106
59	▯`6779`	BODY
58	◈`91`	BODY

	
cycle 107
59	▯`6777`	BODY
60	#`399`	BODY
59	▯`6777`	BODY
58	◈`92`	BODY

	
cycle 108
59	▯`6775`	BODY
61	#`60`	BODY
59	▯`6775`	BODY
58	◈`93`	BODY

	
cycle 109
59	▯`6774`	BODY
58	◈`94`	BODY

	
cycle 110
59	▯`6793`	BODY
58	◈`75`	BODY

	
cycle 111
59	▯`6792`	BODY
58	◈`76`	BODY

	
cycle 112
59	▯`6810`	BODY
62	#`404`	BODY
59	▯`6810`	BODY
58	◈`77`	BODY

	
cycle 113
59	▯`6809`	BODY
58	◈`78`	BODY

	
cycle 114
59	▯`6808`	BODY
58	◈`79`	BODY

	
cycle 115
59	▯`6804`	BODY
58	◈`83`	BODY

	
cycle 116
59	▯`6803`	BODY
58	◈`84`	BODY

	
cycle 117
59	▯`6802`	BODY
58	◈`85`	BODY
399	#`0`	BLOCK
404	m	BLOCK

	
cycle 118
59	▯`6801`	BODY
58	◈`86`	BODY

	
cycle 119
59	▯`6797`	BODY
58	◈`90`	BODY

	
cycle 120
59	▯`6796`	BODY
58	◈`91`	BODY

	
cycle 121
59	▯`6794`	BODY
60	#`400`	BODY
59	▯`6794`	BODY
58	◈`92`	BODY

	
cycle 122
59	▯`6792`	BODY
61	#`61`	BODY
59	▯`6792`	BODY
58	◈`93`	BODY

	
cycle 123
59	▯`6791`	BODY
58	◈`94`	BODY
