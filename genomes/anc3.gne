// A twist on the second ancestor genome I wrote for this simulation.
// this one contains a second executor that acts independently, kinda like a
// mitochondria, its purpose is to feed the 


// regex for linearizing this file: /(\/\/ .*\n)|(\/\/ .*)| |\n/g
// just delete everything this regex matches

// strategy: assemble the child in order - ie, walk down this genome, 
// for each instruction, find a copy in the soup and swap it onto the child, 
// then advance to the next instruction in this genome

// r1 will walk down the length of this genome, using it as a template
// r0 will walk down the length of the child as it's built
// r2 will store the location of found peices

// r3 will store the address of the end of this genome, responsible for triggering the end of the copy loop
// r4 will store the start address of the child and be responsible for awakening it

T       // begin claim marker, begining of organism

// ORGANELLE START

A       // endosymbiotic creature working as mitochondria
◈       // live executor, shares dump register with main body
####

K       // INIT 
[k1       
v1      // r1 is now set to point to one of this organelle's registers
[t      // 
v0      // r0 is now set to point just before the start of the whole organism
]k3
^3      // r3 is now set to the eating location

J       // FUNCTION - find and eat
$3      // excrete the old food
v0      // decrement the excretion pointer so that old excretions aren't selected by the food finder
<       // r2 is now set to the address of some random register outside of this organism
$23     // swap the newly found food into the eating spot
K
e       // the eating spot (the initial instruction here isn't important, it won't get run) when food gets swapped into here, it will be eaten
(J      // return to the find and eat function

// ORGANELLE END

        // physical non-instruction components
◈▯      // live executor and dump register
#####   // registers, get cleared out when executed
        // a stack would go here like so "A____" if I needed one
        
        // initialization
[t1     // find the first claim marker, store address in r1
]t3     // find the end claim marker, store address in r3
r       // generate a random address, store it in r0 - this will be the start address of the child
"04     // now r0 and r4 hold the start address of the new child

B       // lock - marker of the find loop
>       // starting after [r0], search for instruction at [r1], store its address in r2
$2      // swap mem[r2] and mem[r0] - adding another block onto the child
=13     // if [r0] == [r1]   aka if we've just swapped the last piece
)d      //     awaken the child
^       // otherwise, increment r0 and r1
^1      //     which prepares us to find the next block item
(b      //     and return to the start of the loop




D       // lock - marker of the awaken child function
^4      // increment r4 so it now points to the child's executor
<04     // look backwards from the end of the child to find the second executor, store its address in r1
:4      // awaken the child
:1      // awaken the child's second executor
(t      // start over and make a new child


T       // end of the genome

// genome laid out linearly, without comments:
// TA◈####K[k1v1[tv0]k3^3J$3v0<$23Ke(J◈▯#####[t1]t3r"04B>$2=13)d^^1(bD^4:4(tT



